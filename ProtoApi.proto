syntax = "proto3";
package api;
option go_package = "solis/pkg/proto/api";
option csharp_namespace = "Solis.Common.Proto.Api";
import "ProtoEnum.proto";
import "ProtoMaster.proto";
import "ProtoTransaction.proto";

message ActiveFanEvent {
  repeated string characterIds = 1;
  string name = 2;
  string subName = 3;
  int32 level = 4;
  int64 finishTime = 5;
  int32 currentCheerPoint = 6;
}
message ActivePromotion {
  repeated string characterIds = 1;
  string name = 2;
  string subName = 3;
  int32 level = 4;
  int64 finishTime = 5;
  repeated api.ActivityCampaignEffect campaignEffects = 6;
}
message ActiveRefresh {
  repeated string characterIds = 1;
  string name = 2;
  string subName = 3;
  int64 finishTime = 4;
}
message ActivityCharacterInfo {
  string characterId = 1;
  string costumeId = 2;
  string hairId = 3;
}
message ActivityLessonProgress {
  int32 stepRewardGold = 1;
  int32 stepRewardManagerExp = 2;
  int32 stepRewardCardEnhanceItem = 3;
  int32 rewardGoldAmount = 4;
  int32 rewardManagerExpAmount = 5;
  int32 rewardCardEnhanceItemAmount = 6;
  int64 lastReceiveTime = 7;
  int64 maxRewardTime = 8;
  int32 dailyPromoteCount = 9;
  string currentAreaId = 10;
}
message AnniversaryInfo {
  bool isPrevious = 1;
  string prologueStoryID = 2;
  string beforeAssetId = 3;
  string afterAssetId = 4;
  string extraStoryId = 5;
  bool isHideHomeCharacter = 6;
  bool isStoryUnread = 7;
  string anniversaryId = 8;
  int64 endTime = 9;
}
message BacksideCardLiveAbilityInfo {
  string cardId = 1;
  int32 level = 2;
  int32 rarity = 3;
  int64 liveAbilityLevel = 4;
  string liveAbilityId = 5;
}
message BacksideDeckCardDetailInfo {
  int32 position = 1;
  string cardId = 2;
  string displayCharacterId = 3;
  string displayCostumeId = 4;
  int32 level = 5;
  int32 rarity = 6;
  int64 vocal = 7;
  int64 dance = 8;
  int64 visual = 9;
  int64 stamina = 10;
  int64 mental = 11;
  int64 technique = 12;
  int32 skillLevel1 = 13;
  int32 skillLevel2 = 14;
  int32 skillLevel3 = 15;
  int32 liveAbilityLevel = 16;
  master.Accessory part1Accessory = 17;
  master.Accessory part2Accessory = 18;
  repeated transaction.UserPhoto photos = 19;
  int32 staminaPermil = 20;
  bool supported = 21;
  string displayHairId = 22;
  int32 skillLevel4 = 23;
  int32 evolutionLevel = 24;
}
message BacksideDeckCardInfo {
  int32 position = 1;
  string cardId = 2;
  int32 level = 3;
  int32 rarity = 4;
  int32 evolutionLevel = 5;
}
message BacksideDeckCardStaminaInfo {
  string cardId = 1;
  int64 currentMaxStamina = 2;
  int64 currentRemainingStamina = 3;
}
message BacksideDifficultyInfo {
  int32 backsideDifficultyNumber = 1;
  int32 managerLevel = 2;
  bool cleared = 3;
  string unlockConditionId = 4;
  bool unlocked = 5;
  api.BacksidePracticeStageTotalResultInfo stageTotalResultInfo = 6;
  repeated api.BacksidePracticeStageInfo practiceStageInfos = 7;
  api.BacksideFinalStageInfo finalStageInfo = 8;
  ProtoEnum.ResultRankType rewardReceivedRankType = 9;
  int32 rewardReceivedRankPlus = 10;
}
message BacksideFinalStageInfo {
  int32 number = 1;
  string name = 2;
  int32 maxActionCount = 3;
  string backsidePanelGoalSettingId = 4;
  api.BacksideFinalStageResultInfo stageResultInfo = 5;
  api.BacksideFinalStageHalfwayInfo stageHalfwayInfo = 6;
  repeated string pickupCharacterIDs = 7;
}
message BacksideLiveBonus {
  string liveBonusId = 1;
  string name = 2;
  string liveAbilityId = 3;
  int32 liveAbilityLevel = 4;
  int32 powerPermil = 5;
}
message BacksidePanelGoalInfo {
  string musicId = 1;
  string musicChartPatternId = 2;
  string name = 3;
  int32 clearScore = 4;
  int32 maxCapacity = 5;
  string stageId = 6;
  string backsideQuestSettingId = 7;
  int32 mentalThreshold = 8;
  ProtoEnum.LiveSkipType liveSkipType = 9;
}
message BacksidePanelLiveInfo {
  string musicId = 1;
  string musicChartPatternId = 2;
  string name = 3;
  int32 clearScore = 4;
  int32 maxCapacity = 5;
  string stageId = 6;
  string backsideQuestSettingId = 7;
  int32 mentalThreshold = 8;
  ProtoEnum.LiveSkipType liveSkipType = 9;
}
message BacksidePanelPvpInfo {
  string musicId = 1;
  string musicChartPatternId = 2;
  string name = 3;
  int32 clearScore = 4;
  int32 maxCapacity = 5;
  string stageId = 6;
  api.BacksideOpponentInfo opponentInfo = 7;
  string backsideQuestSettingId = 8;
  int32 mentalThreshold = 9;
  ProtoEnum.LiveSkipType liveSkipType = 10;
}
message BacksidePracticeStageInfo {
  int32 number = 1;
  string name = 2;
  int32 maxActionCount = 3;
  string backsidePanelGoalSettingId = 4;
  api.BacksidePracticeStageResultInfo stageResultInfo = 5;
  api.BacksidePracticeStageHalfwayInfo stageHalfwayInfo = 6;
  repeated string pickupCharacterIDs = 7;
}
message BacksideRankingInfo {
  string userId = 1;
  string name = 2;
  int32 managerLevel = 3;
  int64 totalPracticeScore = 4;
  int64 finalScore = 5;
  int32 rank = 6;
  string emblemId = 7;
  repeated api.BacksideDeckCardInfo deckCardInfos = 8;
}
message BacksideRankingRewardInfo {
  int32 rankFrom = 1;
  string rewardId = 2;
}
message Banner {
  string id = 1;
  string assetId = 2;
  string text = 3;
  ProtoEnum.LinkType linkType = 4;
  string linkDetail = 5;
  int32 order = 6;
  string viewConditionId = 7;
}
message BirthdayInfo {
  api.BirthdayAdvInfo birthdayAdvInfo = 1;
  string text = 2;
  string costumeId = 3;
}
message BoxGachaItem {
  int32 order = 1;
  ProtoEnum.BoxGachaItemType itemType = 2;
  string rewardId = 3;
  string liveBonusGroupId = 4;
  int32 initialStock = 5;
  int32 stock = 6;
  bool isLimited = 7;
  string assetId = 8;
  string description = 9;
}
message BuddyCardInfo {
  string cardId = 1;
  int32 rarity = 2;
  int32 level = 3;
  int32 evolutionLevel = 4;
}
message CompanyBulkReceiveEnjoyResult {
  string characterId = 1;
  int64 beforeCharacterEnjoyPoint = 2;
  repeated transaction.RewardResult enjoyCharacterLevelRewardResults = 3;
}
message CompanyEnjoyCharacterLevelInfo {
  string characterId = 1;
  int32 levelKey = 2;
  bool isReceivable = 3;
  bool isAlreadyReceived = 4;
}
message CompanyEnjoyCharacterRankingInfo {
  string userId = 1;
  int32 currentRank = 2;
  string managerName = 3;
  int64 currentEnjoyPoint = 4;
  string emblemId = 5;
}
message CompanyGradeInfo {
  string id = 1;
  bool isReceivable = 2;
  bool isAlreadyReceived = 3;
}
message CompanyRankingInfo {
  string userId = 1;
  int32 currentRank = 2;
  string managerName = 3;
  int64 currentPoint = 4;
  string emblemId = 5;
  int64 currentEnjoyPoint = 6;
  int64 currentTrustPoint = 7;
  int64 currentSalaryPoint = 8;
}
message CompanyTopResponse {
  repeated api.CompanyGradeInfo companyGradeInfos = 1;
  repeated api.CompanyTrustMissionInfo trustMissionInfos = 2;
  repeated api.CompanyTrustLevelInfo trustLevelInfos = 3;
  int32 currentRank = 4;
  repeated string receivableLevelRewardEnjoyCharacterIds = 5;
  int64 thisMonthSalaryPoint = 6;
  repeated api.DokanInfo dokanInfos = 7;
  api.CommonResponse commonResponse = 9999;
}
message CompanyTrustLevelInfo {
  int32 levelKey = 1;
  bool isReceivable = 2;
  bool isAlreadyReceived = 3;
}
message DeckPositionCharacter {
  transaction.UserDeckPosition userDeckPosition = 1;
  string characterId = 2;
  string displayCharacterId = 3;
  string displayCostumeId = 4;
  string displayHairId = 5;
}
message DiceAccessoryInfo {
  string accessoryId = 1;
  ProtoEnum.AccessoryCategoryType categoryType = 2;
  int32 param1Permil = 3;
  int32 param1Value = 4;
  int32 param2Permil = 5;
  int32 param2Value = 6;
}
message DiceDailyRewardInfo {
  int32 panelCount = 1;
  string rewardId = 2;
  api.DiceLiveBonus liveBonus = 3;
  int32 medalAmount = 4;
}
message DiceDailyRewardResultInfo {
  int32 movedPanelCount = 1;
  string medalItemId = 2;
  repeated transaction.RewardResult rewardResults = 3;
  repeated api.DiceLiveBonus liveBonuses = 4;
  repeated api.DiceDailyRewardInfo dailyRewardInfos = 5;
  int32 rank = 6;
}
message DiceInfo {
  string id = 1;
  int64 startTime = 2;
  int64 endTime = 3;
  int64 exchangeEndTime = 4;
  string assetId = 5;
  api.NoticeInfo noticeInfo = 6;
  api.EventMissionInfo eventMissionInfo = 7;
  string medalItemId = 8;
  string moneyItemId = 9;
  string staminaRecoveryItemId = 10;
  int32 maxStamina = 11;
  int32 movePanelConsumptionStamina = 12;
  int32 staminaRecoveryMinutes = 13;
  api.DiceAreaInfo areaInfo = 14;
  repeated api.DiceDailyRewardInfo dailyRewardInfos = 15;
  repeated api.DiceRankingRewardInfo rankingRewardInfos = 16;
}
message DiceLiveBonus {
  string id = 1;
  string liveAbilityId = 2;
  int32 liveAbilityLevel = 3;
  int32 powerPermil = 4;
}
message DicePhotoAbilityInfo {
  string photoAbilityId = 1;
  int64 effectValue = 2;
}
message DiceQuestInfo {
  ProtoEnum.DiceQuestDifficultyType difficultyType = 1;
  bool cleared = 2;
  int64 highestScore = 3;
  ProtoEnum.ResultRankType highestScoreRankType = 4;
  int32 highestScoreRankPlus = 5;
  string name = 6;
  ProtoEnum.LiveType liveType = 7;
  int64 clearScore = 8;
  api.QuestOpponentInfo opponentInfo = 9;
  int32 difficultyLevel = 10;
  int32 obtainMedalAmount = 11;
  string stageId = 12;
  string musicId = 13;
  string musicChartPatternId = 14;
  ProtoEnum.AttributeType position1AttributeType = 15;
  ProtoEnum.AttributeType position2AttributeType = 16;
  ProtoEnum.AttributeType position3AttributeType = 17;
  ProtoEnum.AttributeType position4AttributeType = 18;
  ProtoEnum.AttributeType position5AttributeType = 19;
  int32 activeSkillWeightPermil = 20;
  int32 specialSkillWeightPermil = 21;
  int32 skillStaminaWeightPermil = 22;
  int32 staminaRecoveryWeightPermil = 23;
  int32 beatDanceWeightPermil = 24;
  int32 beatVocalWeightPermil = 25;
  int32 beatVisualWeightPermil = 26;
  string questPressureId = 27;
  string questCharacterAdvantageId = 28;
  string questAudienceAdvantageId = 29;
  ProtoEnum.MoodType moodType = 30;
  string liveBonusGroupId = 31;
  int32 maxCapacity = 32;
  int32 mentalThreshold = 33;
  int32 consumptionStamina = 34;
  api.DiceItem obtainDiceItem = 35;
  api.DiceLiveBonus obtainLiveBonus = 36;
  int64 obtainMoneyAmount = 37;
  ProtoEnum.LiveSkipType liveSkipType = 38;
}
message DiceRankingRewardInfo {
  int32 rankFrom = 1;
  string rewardId = 2;
}
message DiceStoryCharacterInfo {
  string characterId = 1;
  string name = 2;
  string colorCode = 3;
  string costumeAssetId = 4;
  string hairAssetId = 5;
  string mascotAssetId = 6;
}
message DivisionInfo {
  string id = 1;
  int32 levelAvg = 2;
}
message DokanInfo {
  string id = 1;
  ProtoEnum.DokanType type = 2;
  string advAssetId = 3;
  api.NoticeInfo noticeInfo = 4;
  api.ShopItem shopItem = 5;
  string assetId = 6;
  string description = 7;
  string name = 8;
  ProtoEnum.ShopType shopType = 9;
  string storyId = 10;
  string linkTitle = 11;
  ProtoEnum.LinkType linkType = 12;
  string linkDetail = 13;
}
message DreamAreaAttributeInfo {
  int32 activeSkillWeightPermil = 1;
  int32 specialSkillWeightPermil = 2;
  int32 skillStaminaWeightPermil = 3;
  int32 staminaRecoveryWeightPermil = 4;
  int32 beatDanceWeightPermil = 5;
  int32 beatVocalWeightPermil = 6;
  int32 beatVisualWeightPermil = 7;
  ProtoEnum.AttributeType attributeType = 8;
  string questPressureId = 9;
}
message DreamBasePhotoEnhanceLevelEffectValueInfo {
  string photoAbilityId = 1;
  int64 effectValue = 2;
}
message DreamQuestInfo {
  int32 questNumber = 1;
  string stageId = 2;
  string musicId = 3;
  int32 difficultyLevel = 4;
  string name = 5;
  string musicChartPatternId = 6;
  ProtoEnum.AttributeType position1AttributeType = 7;
  ProtoEnum.AttributeType position2AttributeType = 8;
  ProtoEnum.AttributeType position3AttributeType = 9;
  ProtoEnum.AttributeType position4AttributeType = 10;
  ProtoEnum.AttributeType position5AttributeType = 11;
  int32 activeSkillWeightPermil = 12;
  int32 specialSkillWeightPermil = 13;
  int32 skillStaminaWeightPermil = 14;
  int32 staminaRecoveryWeightPermil = 15;
  int32 beatDanceWeightPermil = 16;
  int32 beatVocalWeightPermil = 17;
  int32 beatVisualWeightPermil = 18;
  int32 maxCapacity = 19;
  int32 mentalThreshold = 20;
  string questPressureId = 21;
  string questCharacterAdvantageId = 22;
  string questAudienceAdvantageId = 23;
  int64 clearScore = 24;
  string liveBonusGroupId = 25;
  ProtoEnum.LiveSkipType liveSkipType = 26;
  bool cleared = 27;
  bool isPlayable = 28;
  bool isSkipAvailable = 29;
  repeated api.DreamUserPhotoAbilityUpInfo userPhotoAbilityUpInfos = 30;
}
message DreamSeasonInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  string generateAreaItemId = 5;
  string assetId = 6;
  api.NoticeInfo noticeInfo = 7;
  repeated api.DreamRankInfo rankInfos = 8;
  api.EventMissionInfo eventMissionInfo = 9;
}
message DreamSkipMusicMasteryRewardInfo {
  string musicId = 1;
  int64 totalStoneAmount = 2;
  repeated string characterIds = 3;
}
message DreamUserPhotoAbility {
  string photoAbilityId = 1;
  int64 maxEffectValue = 2;
  int64 totalEnhancedEffectValue = 3;
  int64 maxDisplayValue = 4;
}
message DreamUserPhotoAbilityChangeInfo {
  string photoAbilityId = 1;
  int64 maxEffectValue = 2;
  int64 beforeEffectValue = 3;
  int64 afterEffectValue = 4;
  int64 maxDisplayValue = 5;
}
message DreamUserPhotoAbilityUpInfo {
  string photoAbilityId = 1;
  int64 afterEffectValue = 2;
  int64 upEffectValue = 3;
}
message DutyConsumptionPoint {
  string dutyPointId = 1;
  int64 amount = 2;
}
message DutyExchangeRewardInfo {
  int64 number = 1;
  string name = 2;
  string description = 3;
  repeated api.DutyConsumptionPoint consumptionPoints = 4;
  string rewardId = 5;
  string assetId = 6;
  string mainColorCode = 7;
  string subColorCode = 8;
  string mainFontColorCode = 9;
  string subFontColorCode = 10;
  string unlockConditionId = 11;
  bool isUnlocked = 12;
  bool isExchanged = 13;
}
message DutyPointInfo {
  string dutyPointId = 1;
  int64 amount = 2;
}
message DutyTopResponse {
  string id = 1;
  int64 seasonNumber = 2;
  string name = 3;
  int64 startTime = 4;
  int64 endTime = 5;
  repeated api.DutyPointInfo pointInfos = 6;
  api.EventMissionInfo eventMissionInfo = 7;
  string costumeId = 8;
  api.NoticeInfo noticeInfo = 9;
  string assetId = 10;
  string bgmAssetId = 11;
  repeated api.DutyExchangeRewardInfo exchangeInfos = 12;
  repeated api.DutyTotalObtainRewardInfo totalObtainRewardInfos = 13;
  repeated api.DutyHomeActionInfo homeActionInfos = 14;
  string backgroundAssetId = 15;
  repeated api.DokanInfo dokanInfos = 16;
  bool isLastSeason = 17;
  string title = 18;
  string tabName = 19;
  api.CommonResponse commonResponse = 9999;
}
message DutyTotalObtainRewardInfo {
  int64 number = 1;
  string rewardId = 2;
  int64 totalObtainAmount = 3;
  bool isReceived = 4;
}
message EventButtonDisplayInfo {
  string conditionId = 1;
  int32 priority = 2;
  string assetId = 3;
}
message EventMissionInfo {
  string id = 1;
  bool unlocked = 2;
  repeated transaction.UserMission userMissions = 8;
}
message EventStoryInfo {
  string id = 1;
  repeated api.EventStoryEpisodeInfo episodes = 2;
}
message ExchangeBooth {
  string id = 1;
  string name = 2;
  string bannerAssetId = 3;
  ProtoEnum.ResourceType requiredResourceType = 4;
  string requiredResourceId = 5;
  ProtoEnum.ResetTimingType resetTimingType = 6;
  int64 nextResetTime = 7;
  bool unlocked = 8;
  int64 endTime = 9;
  ProtoEnum.LinkType linkType = 10;
  string linkDetail = 11;
  int32 order = 12;
  bool limited = 13;
  string colorCode = 14;
  string backgroundColorCode = 15;
  repeated api.ExchangeItem exchanges = 16;
  string costumeId = 17;
  string iconAssetId = 18;
  string viewConditionId = 19;
  string unlockConditionId = 20;
}
message ExchangeItem {
  string id = 1;
  string assetId = 2;
  string rewardId = 3;
  ProtoEnum.ResetTimingType resetTimingType = 4;
  int64 nextResetTime = 5;
  bool unlocked = 6;
  string name = 7;
  string description = 8;
  int32 exchangeLimit = 9;
  int32 leftCount = 10;
  int64 requiredResourceAmount = 11;
  int32 order = 12;
  string viewConditionId = 13;
  string unlockConditionId = 14;
}
message ExerciseDeckPosition {
  int32 position = 1;
  string cardId = 2;
  string part1AccessoryId = 3;
  string part2AccessoryId = 4;
  repeated string photoAllInOneIds = 5;
}
message ExerciseInfo {
  string exerciseId = 1;
  bool unlocked = 2;
  repeated api.ExerciseDeckPosition positions = 3;
  api.QuestOpponentInfo opponentInfo = 4;
}
message ExerciseStartResponse {
  string questId = 1;
  api.LiveResult result = 2;
  ProtoEnum.ResultRankType rankType = 3;
  int32 rankPlus = 4;
  repeated api.QuestRankPattern rankPatterns = 5;
  repeated transaction.RewardResult clearRewards = 6;
  api.CommonResponse commonResponse = 9999;
}
message ExternalRewardInfo {
  string externalRewardId = 1;
  string rewardId = 2;
  bool isReceived = 3;
}
message ExtraStoryInfo {
  string id = 1;
  bool unlocked = 2;
  repeated api.ExtraStoryEpisodeInfo episodes = 3;
}
message ExtraStoryPartInfo {
  string id = 1;
  bool unlocked = 2;
  repeated api.ExtraStoryInfo stories = 3;
}
message FanEvent {
  string id = 1;
  string name = 2;
  string subName = 3;
  ProtoEnum.ActivityFanEventType type = 4;
  string unlockConditionId = 5;
  bool isUnlocked = 6;
  string activityPerformanceId = 7;
  int32 level = 8;
  int32 exp = 9;
  int32 nextLevelRequiredExp = 10;
  int32 requiredStamina = 11;
  string nextLevelUnlockConditionId = 12;
  bool isNextLevelUnlocked = 13;
  int32 stepConsumptionStamina = 14;
  string fixedRewardId = 15;
  string additionalRewardId = 16;
  string rankSRewardId = 17;
  string rankARewardId = 18;
  string rankBRewardId = 19;
  string rankCRewardId = 20;
  string rankDRewardId = 21;
  string viewConditionId = 22;
  repeated string campaignDropRewardIds = 23;
}
message FanEventCharacterInfo {
  string characterId = 1;
  string costumeId = 2;
  int32 activityStamina = 3;
  int32 completedStep = 4;
  int64 finishTime = 5;
  int32 activityPoint = 6;
  int32 maxStep = 7;
  int32 lastSavedActivityPoint = 8;
  string hairId = 9;
}
message FanEventProgress {
  string activityFanEventId = 1;
  string activityFanEventName = 2;
  string activityFanEventSubName = 3;
  ProtoEnum.ActivityFanEventType activityFanEventType = 4;
  int32 activityFanEventLevel = 5;
  repeated api.FanEventCharacterInfo characters = 6;
  int64 startTime = 7;
  int32 stepConsumptionStamina = 8;
  int32 stepActivityPointCoefficientPermil = 9;
  repeated api.FanEventRankPattern rankPatterns = 10;
  bool usedSuperModeItem = 11;
  string activityPerformanceId = 12;
  string maleNpcSpineId = 13;
  string femaleNpcSpineId = 14;
  int32 specialFanCheerPoint = 15;
  int32 currentCheerPoint = 16;
  int32 newSpecialFansCount = 17;
  double speedRate = 18;
}
message FanEventRankingInfo {
  int64 rank = 1;
  int64 score = 2;
  string userId = 3;
  string name = 4;
  int32 managerLevel = 5;
  repeated string characterIds = 6;
  string emblemId = 7;
}
message FavoriteCardInfo {
  string cardId = 1;
  int32 rarity = 2;
  ProtoEnum.CardDisplayType displayType = 3;
  int32 evolutionLevel = 4;
}
message GachaButtonInfo {
  string id = 1;
  int32 todayCount = 2;
  int32 totalCount = 3;
  int64 drawTime = 4;
}
message GachaContinuousInfo {
  int32 totalDrawCount = 1;
  repeated string cardIds = 2;
  bool isFinished = 3;
  api.ExternalRewardInfo externalRewardInfo = 4;
}
message GachaContinuousResult {
  int32 totalDrawCount = 1;
  repeated string cardIds = 2;
  ProtoEnum.GachaContinuousResultType resultType = 3;
  api.ExternalRewardInfo externalRewardInfo = 4;
}
message GachaExchangeInfo {
  string id = 1;
  int32 exchangedCount = 2;
  int64 exchangedTime = 3;
}
message GachaHistory {
  ProtoEnum.GachaType gachaType = 1;
  int64 drawTime = 2;
  string gachaId = 3;
  ProtoEnum.ResourceType resourceType = 4;
  string resourceId = 5;
  int32 amount = 6;
}
message GachaInfo {
  string id = 1;
  bool unlocked = 2;
  repeated api.GachaButtonInfo buttons = 3;
  repeated api.GachaExchangeInfo exchanges = 4;
  repeated transaction.Reward itemGachaRewards = 5;
  api.NoticeInfo noticeInfo = 6;
  repeated string selectedCardIds = 7;
  api.GachaPremiumInfo premiumInfo = 8;
  api.GachaContinuousInfo continuousInfo = 9;
  api.GachaStampInfo stampInfo = 10;
  repeated transaction.Reward showcaseToyGachaRewards = 11;
}
message GachaPremiumInfo {
  int32 fixedPremiumRewardRequiredDrawCount = 1;
  repeated string premiumRewardIds = 2;
  repeated transaction.Reward featuredRewards = 3;
  string freeGachaTicketItemId = 4;
  bool isFreeGachaTicketReceivable = 5;
}
message GuildGvgMatchRankInfo {
  string name = 1;
  int32 managerLevel = 2;
  int64 point = 3;
  int32 rank = 4;
  string emblemId = 5;
}
message GuildGvgSeasonInfo {
  string name = 1;
  int32 matchNumber = 2;
  int64 matchEndTime = 3;
  int32 guildRank = 4;
  repeated api.GuildGvgRankInfo ranks = 5;
  int64 aggregateEndTime = 6;
  bool isAggregate = 7;
  api.GuildGvgSeasonMatchResult preMatchResult = 8;
  bool isRemainingChallenge = 9;
  string winRewardId = 10;
  bool isCurrentMatchWin = 11;
}
message GuildGvgSeasonMatchResult {
  int32 matchNumber = 1;
  string opponentGuildId = 2;
  int64 point = 3;
  int64 opponentPoint = 4;
  ProtoEnum.GvgMatchResultType resultType = 5;
  api.GuildGvgMatchRankInfo mvpInfo = 6;
}
message GuildParam {
  string id = 1;
  int32 weaknessRank = 2;
  int32 memberAmountRank = 3;
  api.GuildGvgSeasonResult prevSeasonResult = 4;
}
message GvgCurrentSeasonMatchInfo {
  int32 matchNumber = 1;
  int64 endTime = 2;
  string opponentGuildId = 3;
  int32 opponentRank = 4;
  int64 opponentPoint = 5;
  int32 opponentWinCount = 6;
  int32 opponentLoseCount = 7;
  int32 opponentDrawCount = 8;
}
message GvgGuildRankingRewardInfo {
  int32 rankFrom = 1;
  string rewardId = 2;
}
message GvgRankingRewardInfo {
  int32 order = 1;
  int32 rankRateFromPercent = 2;
  int32 rankFrom = 3;
  string rewardId = 4;
  int64 hierarchyVariablePoint = 5;
}
message GvgSeasonInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 aggregateEndTime = 4;
  string challengeRewardId = 5;
  string challengeItemId = 6;
  string winRewardId = 7;
}
message GvgSeasonMatchInfo {
  int32 matchNumber = 1;
  string opponentGuildId = 2;
  int64 point = 3;
  int64 opponentPoint = 4;
  ProtoEnum.GvgMatchResultType resultType = 5;
  int32 memberAmountWeightPermil = 6;
  int32 opponentMemberAmountWeightPermil = 7;
}
message HierarchyChangeInfo {
  int64 addHierarchyPoint = 1;
  string oldDetailGradeId = 2;
  string newDetailGradeId = 3;
  int32 currentRank = 4;
}
message HierarchyDivisionRewardInfo {
  string hierarchyDivisionRewardId = 1;
  bool canReceive = 2;
  bool haveReceived = 3;
  api.ProfileInfo firstUserInfo = 4;
}
message HierarchyNotiInfo {
  repeated string rewardIds = 1;
  repeated string divisionRewardIds = 2;
  string currentDetailGradeId = 3;
  int32 currentRank = 4;
}
message HierarchyProfileInfo {
  string detailGradeId = 1;
  int32 rank = 2;
}
message HierarchyRankUserInfo {
  string userId = 1;
  int32 currentRank = 2;
  string managerName = 3;
  int32 managerLevel = 4;
  string currentDetailGradeId = 5;
  int64 currentPoint = 6;
  string emblemId = 7;
  string deckName = 8;
  repeated api.LastCardInfo cardInfos = 9;
}
message HierarchyRewardInfo {
  string hierarchyRewardId = 1;
  bool canReceive = 2;
  bool haveReceived = 3;
}
message HomeBacksideInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  int64 aggregateEndTime = 5;
  int64 exchangeEndTime = 6;
  string assetId = 7;
  string bannerAssetId = 8;
  int32 order = 9;
  string unlockConditionId = 10;
  bool isUnlocked = 11;
  string eventMissionId = 12;
}
message HomeDiceInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  int64 exchangeEndTime = 5;
  string assetId = 6;
  string bannerAssetId = 7;
  int32 order = 8;
  string unlockConditionId = 9;
  bool isUnlocked = 10;
  string eventMissionId = 11;
  bool isUnplayed = 12;
  bool isMaxStamina = 13;
  bool isMosaicExchangeable = 14;
  bool isMosaicTotalConsumptionRewardReceivable = 15;
}
message HomeDreamInfo {
  string name = 1;
  int64 startTime = 2;
  int64 endTime = 3;
  string assetId = 4;
  string bannerAssetId = 5;
  int32 order = 6;
  string unlockConditionId = 7;
  bool isUnlocked = 8;
  string generateAreaItemId = 9;
  bool isReceivableLoginReward = 10;
  string eventMissionId = 11;
}
message HomeDutyInfo {
  string id = 1;
  int64 seasonNumber = 2;
  string name = 3;
  int64 startTime = 4;
  int64 endTime = 5;
  string assetId = 6;
  string bannerAssetId = 7;
  int32 order = 8;
  string unlockConditionId = 9;
  bool isUnlocked = 10;
  string eventMissionId = 11;
  bool isExchangeable = 12;
  bool isTotalObtainRewardReceivable = 13;
}
message HomeEnterResponse {
  repeated api.GachaInfo gachaInfos = 1;
  api.FanEventInfo fanEventInfo = 2;
  api.PromotionInfo promotionInfo = 3;
  api.RefreshInfo refreshInfo = 4;
  api.ActivityLessonProgress lessonProgress = 5;
  repeated api.FunctionMaintenanceInfo functionMaintenanceInfos = 6;
  api.BannerInfo bannerInfo = 7;
  int64 lastFriendApprovedTime = 8;
  api.CurrentGvgInfo gvgInfo = 9;
  repeated string shopIds = 10;
  repeated string exchangeBoothIds = 11;
  bool isRemainingDiary = 12;
  api.NotiShopItem notiStoneShopItem = 13;
  api.NotiShopItem notiNormalShopItem = 14;
  transaction.Payslip payslip = 15;
  string currentMainAreaId = 16;
  api.HomeEventInfo eventInfo = 17;
  api.HomePvpInfo pvpInfo = 18;
  api.HierarchyNotiInfo hierarchyNotiInfo = 19;
  bool isDailyQuestPlayable = 20;
  string currentTowerQuestId = 21;
  bool hasUnplayedContest = 22;
  repeated api.EventStoryInfo eventStoryInfos = 23;
  repeated api.PhotoActivity photoActivities = 24;
  repeated api.PhotoMusic photoMusics = 25;
  repeated api.PhotoStage photoStages = 26;
  int32 friendAppliedCount = 27;
  repeated api.PurchasedConditionRewardShopInfo purchasedConditionRewardShopInfo = 28;
  api.LessonInfo lessonInfo = 29;
  repeated api.EventButtonDisplayInfo eventButtonDisplayInfos = 30;
  bool hasCanReceiveInviteHostRewards = 31;
  bool existsUnclearedExercise = 32;
  repeated api.ExtraStoryPartInfo extraStoryPartInfos = 33;
  api.HomeLeagueInfo leagueInfo = 34;
  api.SpecialHomePositionInfo specialHomePositionInfo = 35;
  repeated api.SpecialHomeActionInfo specialHomeActionInfos = 36;
  api.SpecialPhotoShootingInfo specialPhotoShootingInfo = 37;
  api.HomeLoveInfo loveInfo = 38;
  bool hasReceivableGift = 39;
  api.AnniversaryInfo anniversaryInfo = 40;
  api.RouletteInfo rouletteInfo = 41;
  api.CompanyInfo companyInfo = 42;
  bool isDefaultNormalShopFreeItemStockExist = 43;
  api.NotiShopItem notiShowcaseShopItem = 44;
  repeated string showcaseToyShopIds = 45;
  repeated int32 unlockedShowcaseNumbers = 46;
  bool isUnclearedPlayableQuest = 47;
  repeated api.PhotoExpression photoExpressions = 48;
  api.HomeSatelliteInfo satelliteInfo = 49;
  api.PvpRewardResultInfo pvpRewardResultInfo = 100;
  api.GvgRewardResultInfo gvgRewardResultInfo = 101;
  repeated api.TourRewardResultInfo tourRewardResultInfos = 102;
  repeated api.BacksideRewardResultInfo backsideRewardResultInfos = 103;
  repeated api.PhotoContestRewardResultInfo photoContestRewardResultInfos = 104;
  repeated api.RaceRewardResultInfo raceRewardResultInfos = 105;
  repeated api.RaceDailyRewardResultInfo raceDailyRewardResultInfos = 106;
  api.BuddyUsedRewardResultInfo buddyUsedRewardResultInfo = 107;
  api.LeagueRewardResultInfo leagueRewardResultInfo = 108;
  api.DiceDailyRewardResultInfo diceDailyRewardResultInfo = 109;
  api.DiceRewardResultInfo diceRewardResultInfo = 110;
  api.ShowcaseLikedRewardResultInfo showcaseLikedRewardResultInfo = 111;
  api.CommonResponse commonResponse = 9999;
}
message HomeEventMissionInfo {
  string id = 1;
  bool unlocked = 2;
  int32 order = 3;
}
message HomeGeneralEventInfo {
  string id = 1;
  string assetId = 2;
  string text = 3;
  ProtoEnum.LinkType linkType = 4;
  string linkDetail = 5;
  int32 order = 6;
  string viewConditionId = 7;
}
message HomeLadderInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  string assetId = 5;
  string bannerAssetId = 6;
  int32 order = 7;
  string unlockConditionId = 8;
  bool isUnlocked = 9;
  string eventMissionId = 10;
  string messageGroupId = 11;
  int32 reachablePanelCount = 13;
}
message HomeLoveEventInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  string bannerAssetId = 5;
  int32 order = 6;
  string unlockConditionId = 7;
  bool isUnlocked = 8;
  repeated string eventMissionIds = 9;
  repeated string limitedEventMissionIds = 10;
  bool isLessonRewardMax = 11;
  bool isUnplayed = 12;
  bool hasHiddenFavorabilityObtainItem = 13;
  ProtoEnum.LoveBaseType baseType = 14;
  string limitedExtraTitleAssetId = 15;
}
message HomeLoveInfo {
  bool isViewable = 1;
  bool isUnlocked = 2;
  string unlockConditionId = 3;
  repeated string eventMissionIds = 4;
  bool existsLessonRewardMaxLove = 5;
  bool existsUnplayedLove = 6;
  bool existsHasHiddenFavorabilityObtainItemLove = 7;
}
message HomeMarathonInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  int64 exchangeEndTime = 5;
  string assetId = 6;
  string bannerAssetId = 7;
  int32 order = 8;
  string unlockConditionId = 9;
  bool isUnlocked = 10;
  string eventMissionId = 11;
  bool isMaxStamina = 12;
  bool isRaidStaminaOverThreshold = 13;
  bool hasFinishedRaidQuest = 14;
  bool isRaidHostEnable = 15;
  int32 reachableLadderPanelCount = 16;
  ProtoEnum.MarathonType type = 17;
  string ladderId = 18;
}
message HomeMosaicInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  string assetId = 5;
  string bannerAssetId = 6;
  int32 order = 7;
  string unlockConditionId = 8;
  bool unlocked = 9;
  string eventMissionId = 10;
  bool isExchangeable = 11;
  bool isTotalConsumptionRewardReceivable = 12;
}
message HomePhotoContestInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  int64 aggregateEndTime = 5;
  int64 exchangeEndTime = 6;
  string assetId = 7;
  string bannerAssetId = 8;
  int32 order = 9;
  string unlockConditionId = 10;
  bool isUnlocked = 11;
  bool hasReceivableSectionReward = 12;
}
message HomeRaceInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  int64 aggregateEndTime = 5;
  int64 exchangeEndTime = 6;
  string assetId = 7;
  string bannerAssetId = 8;
  int32 order = 9;
  string unlockConditionId = 10;
  bool isUnlocked = 11;
  string eventMissionId = 12;
  bool isLessenRewardMax = 13;
}
message HomeShelfInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  string bannerAssetId = 5;
  int32 order = 6;
  string unlockConditionId = 7;
  bool isUnlocked = 8;
  repeated api.ShelfAlbumInfo albumInfos = 9;
  string eventMissionId = 10;
}
message HomeTourInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  int64 aggregateEndTime = 5;
  int64 exchangeEndTime = 6;
  string assetId = 7;
  string bannerAssetId = 8;
  int32 order = 9;
  string unlockConditionId = 10;
  bool isUnlocked = 11;
  string eventMissionId = 12;
}
message InviteGuestInfo {
  string userId = 1;
  string name = 2;
  repeated string receivedHostRewardIds = 3;
  api.BuddyCardInfo buddyCardInfo = 4;
  int64 clearQuestMainAreaCount = 5;
  int64 invitedTime = 6;
}
message LadderInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  api.EventMissionInfo eventMissionInfo = 5;
  string messageGroupId = 6;
  repeated string costumeIds = 7;
  string ladderPointItemId = 8;
  string assetId = 10;
  string topColorCode = 11;
  string bottomColorCode = 12;
  string bgmAssetId = 13;
  string backgroundAssetId = 14;
}
message LadderPanel {
  ProtoEnum.LadderPanelType type = 1;
  string messageId = 2;
  string rewardId = 3;
  int32 requiredPointItemAmount = 4;
  string unlockConditionId = 5;
  bool unlocked = 6;
  bool reached = 7;
  bool reachable = 8;
}
message LastCardInfo {
  int32 position = 1;
  string cardId = 2;
  int32 level = 3;
  int32 rarity = 4;
  int32 evolutionLevel = 5;
}
message LeagueCardInfo {
  string cardId = 1;
  int32 level = 2;
  int32 rarity = 3;
  int32 evolutionLevel = 4;
}
message LeagueCardRanking {
  string userId = 1;
  string name = 2;
  api.LeagueCardInfo cardInfo = 3;
  int64 value = 4;
  int32 rank = 5;
  string emblemId = 6;
}
message LeagueDailyResultInfo {
  int64 date = 1;
  int64 point = 2;
  int32 rank = 3;
  int32 winCount = 4;
  int32 loseCount = 5;
  string headline = 6;
  string mvpCardId = 7;
}
message LeagueNewsInfo {
  int64 date = 1;
  repeated api.LiveCardInfo deckACards = 2;
  int32 deckAWinCount = 3;
  int32 deckALoseCount = 4;
  repeated api.LiveCardInfo deckBCards = 5;
  int32 deckBWinCount = 6;
  int32 deckBLoseCount = 7;
  int32 beforeRank = 8;
  int64 beforePoint = 9;
  string headline = 10;
  string interview = 11;
  string body = 12;
  string thumbnailAssetId = 13;
  int32 thumbnailShootMillisecond = 14;
  repeated int32 thumbnailEffectShootMilliseconds = 15;
  ProtoEnum.LeagueDeckType mvpDeckType = 16;
  string mvpCardId = 17;
  api.LeagueSeasonCardResultInfo mvpSeasonCardResultInfo = 18;
  string mvpMusicId = 19;
  string mvpStageId = 20;
  repeated api.DeckPositionCharacter displayPositionCharacters = 21;
}
message LeaguePointRanking {
  string userId = 1;
  string name = 2;
  int64 point = 3;
  int32 rank = 4;
  repeated api.LiveCardInfo deckACards = 5;
  repeated api.LiveCardInfo deckBCards = 6;
  string emblemId = 7;
}
message LeagueSeasonRewardInfo {
  string upgradeRewardId = 1;
  string stayRewardId = 2;
  string downgradeRewardId = 3;
}
message LessonInfo {
  api.ActivityLessonProgress lessonProgress = 1;
  repeated api.ActivityCampaignEffect campaignEffects = 2;
  repeated string campaignDropRewardIds = 3;
}
message LiveBattleCardInfo {
  int32 position = 1;
  string cardId = 2;
  int32 level = 3;
  int32 rarity = 4;
  int32 lightFanAmount = 5;
  int32 middleFanAmount = 6;
  int32 heavyFanAmount = 7;
  int32 evolutionLevel = 8;
}
message LiveBattleQuestInfo {
  string id = 1;
  string stageId = 2;
  string musicId = 3;
  string musicChartPatternId = 4;
  ProtoEnum.AttributeType position1AttributeType = 5;
  ProtoEnum.AttributeType position2AttributeType = 6;
  ProtoEnum.AttributeType position3AttributeType = 7;
  ProtoEnum.AttributeType position4AttributeType = 8;
  ProtoEnum.AttributeType position5AttributeType = 9;
  int32 activeSkillWeightPermil = 10;
  int32 specialSkillWeightPermil = 11;
  int32 skillStaminaWeightPermil = 12;
  int32 staminaRecoveryWeightPermil = 13;
  int32 beatDanceWeightPermil = 14;
  int32 beatVocalWeightPermil = 15;
  int32 beatVisualWeightPermil = 16;
  int32 maxCapacity = 17;
  int32 mentalThreshold = 18;
  string questPressureId = 19;
  string questCharacterAdvantageId = 20;
  string questAudienceAdvantageId = 21;
  ProtoEnum.MoodType moodType = 22;
  string liveBonusGroupId = 23;
  ProtoEnum.LiveSkipType liveSkipType = 24;
}
message LiveCardInfo {
  int32 position = 1;
  string cardId = 2;
  int32 level = 3;
  int32 rarity = 4;
  int32 evolutionLevel = 5;
}
message LiveCardResult {
  string cardId = 1;
  int64 totalScore = 5;
}
message LiveCharacterAssetInfo {
  string characterId = 1;
  string costumeId = 2;
  string hairId = 3;
}
message LiveDeckCard {
  int32 index = 1;
  string cardId = 2;
  string displayCharacterId = 3;
  string displayCostumeId = 4;
  int32 level = 5;
  int32 rarity = 6;
  int64 vocal = 7;
  int64 dance = 8;
  int64 visual = 9;
  int64 stamina = 10;
  int64 startStamina = 11;
  int64 mental = 12;
  int64 technique = 13;
  int32 skillLevel1 = 14;
  int32 skillLevel2 = 15;
  int32 skillLevel3 = 16;
  int32 audienceAmount = 17;
  repeated api.LiveDeckCardSkill skills = 18;
  bool isBuddy = 19;
  bool isFriendBuddy = 20;
  string displayHairId = 21;
  bool isTourScout = 22;
  int32 evolutionLevel = 23;
  int32 skillLevel4 = 24;
}
message LiveDeckCardSkill {
  int32 index = 1;
  string skillId = 2;
  int32 skillLevel = 3;
  ProtoEnum.SkillPossessionType possessionType = 4;
  string liveAbilityId = 5;
  int32 liveAbilityLevel = 6;
  repeated string rewrittenEfficacyIds = 1001;
}
message LiveRankingInfo {
  string userId = 1;
  string name = 2;
  int32 managerLevel = 3;
  int64 point = 4;
  int32 rank = 5;
  repeated api.LiveCardInfo cardInfos = 6;
  string emblemId = 7;
  string deckName = 8;
}
message LiveUserInfo {
  int32 index = 1;
  string userId = 2;
  string name = 3;
  string emblemId = 4;
  api.LiveUserDeck userDeck = 5;
  api.LiveUserResult userResult = 6;
  bool isNpc = 7;
}
message LoveInfo {
  string loveId = 1;
  string description = 2;
  string characterId = 3;
  string costumeId = 4;
  int64 lastPlayTime = 5;
  repeated api.LoveStoryEndInfo storyEndInfos = 6;
  ProtoEnum.LoveType type = 7;
  int64 startTime = 8;
  int64 endTime = 9;
  string unlockConditionId = 10;
  bool isUnlocked = 11;
  string assetId = 12;
  repeated string eventMissionIds = 13;
  repeated string limitedEventMissionIds = 14;
  bool isLessonRewardMax = 15;
  bool isUnplayed = 16;
  bool hasHiddenFavorabilityObtainItem = 17;
  int32 order = 18;
  api.LoveMainCharacterInfo mainCharacterInfo = 19;
  ProtoEnum.LoveBaseType baseType = 20;
  bool isHideManagerVoiceSwitch = 21;
}
message LoveItemInfo {
  string storyReadItemId = 1;
  string hiddenFavorabilityObtainItemId = 2;
  string lessonPromoteItemId = 3;
}
message LoveLoadResponse {
  repeated string storyEpisodeIds = 1;
  api.CommonResponse commonResponse = 9999;
}
message LoveMainCharacterInfo {
  string characterId = 1;
  string costumeId = 2;
  string assetId = 3;
  string color = 4;
}
message LoveResetResponse {
  repeated string storyEpisodeIds = 1;
  api.CommonResponse commonResponse = 9999;
}
message LoveSaveDataInfo {
  int32 slotNumber = 1;
  int64 saveTime = 2;
  string latestStoryEpisodeId = 3;
  string name = 4;
}
message LoveTopResponse {
  string loveName = 1;
  string playerName = 2;
  int64 exp = 3;
  api.LoveLessonProgress lessonProgress = 4;
  repeated string storyEpisodeIds = 5;
  api.LoveSaveInfo saveInfo = 6;
  api.LoveItemInfo itemInfo = 7;
  repeated api.EventMissionInfo eventMissionInfos = 8;
  repeated api.EventMissionInfo limitedEventMissionInfos = 9;
  int64 hiddenFavorability = 10;
  repeated api.LoveStoryEndInfo storyEndInfos = 11;
  repeated api.LoveLevelInfo loveLevelInfos = 12;
  string bannerAssetId = 13;
  api.NoticeInfo noticeInfo = 14;
  string expAssetId = 15;
  api.LoveMainCharacterInfo mainCharacterInfo = 16;
  string loveSimpleName = 17;
  api.CommonResponse commonResponse = 9999;
}
message MarathonAccessoryInfo {
  string accessoryId = 1;
  ProtoEnum.AccessoryCategoryType categoryType = 2;
  int32 param1Permil = 3;
  int32 param1Value = 4;
  int32 param2Permil = 5;
  int32 param2Value = 6;
}
message MarathonBoxGachaInfo {
  string boxGachaId = 1;
  repeated api.BoxGachaItem boxGachaItems = 2;
  bool isFull = 3;
  int32 currentMarathonPoint = 4;
  bool unlocked = 5;
  int32 remainResetCount = 6;
}
message MarathonInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  int64 exchangeEndTime = 5;
  int32 initialStamina = 6;
  int32 staminaRecoveryMinutes = 7;
  string assetId = 8;
  string boxGachaGroupId = 9;
  api.EventStoryInfo eventStoryInfo = 10;
  api.EventMissionInfo eventMissionInfo = 11;
  api.NoticeInfo noticeInfo = 12;
  string staminaRecoveryItemId = 13;
  string questUnlockItemId = 14;
  ProtoEnum.MarathonType type = 15;
  string raidStaminaRecoveryItemId = 16;
  int32 initialRaidStamina = 17;
  int32 raidStaminaRecoveryMinutes = 18;
  api.MarathonRaidQuest raidQuest = 19;
  int32 raidRequiredPointFriendDiscountRatePermil = 22;
  int32 raidLimitHours = 23;
  api.LadderInfo ladderInfo = 24;
}
message MarathonLiveBonusInfo {
  string liveBonusId = 1;
  int32 amount = 2;
}
message MarathonPhotoAbilityInfo {
  string photoAbilityId = 1;
  int64 effectValue = 2;
}
message MarathonQuestInfo {
  string marathonQuestId = 1;
  bool unlocked = 2;
  repeated api.MarathonQuestDifficultyLevelInfo difficultyLevelInfos = 3;
  int32 lastChallengeDifficultyNumber = 4;
  bool isUnlockable = 5;
  bool isPlayable = 6;
  int32 playableCount = 7;
}
message MarathonQuestStartResponse {
  string marathonId = 1;
  string marathonQuestId = 2;
  int32 marathonQuestDifficultyNumber = 3;
  api.LiveResult result = 4;
  api.QuestReward reward = 5;
  ProtoEnum.ResultRankType rankType = 6;
  int32 rankPlus = 7;
  repeated api.QuestRankPattern rankPatterns = 8;
  ProtoEnum.ResultRankType highestClearRankType = 9;
  int64 highestScore = 10;
  int32 addMarathonPoint = 11;
  api.FriendApplyToBuddyInfo friendApplyToBuddyInfo = 12;
  api.CommonResponse commonResponse = 9999;
}
message MarathonRaidHostUser {
  string name = 1;
  bool isFriend = 2;
  api.FavoriteCardInfo favoriteCard = 3;
  api.FavoritePhotoInfo favoritePhoto = 4;
  string decorationId = 5;
  string userId = 6;
}
message MarathonRaidJoinResponse {
  string marathonId = 1;
  int32 difficultyNumber = 2;
  int32 difficultyLevel = 3;
  api.LiveResult result = 4;
  repeated transaction.RewardResult joinRewards = 5;
  int64 raidEndTime = 6;
  api.MarathonRaidResult raidResult = 7;
  int64 beforeScore = 8;
  repeated api.QuestRankPattern rankPatterns = 9;
  bool finished = 10;
  string liveBonusId = 11;
  api.CommonResponse commonResponse = 9999;
}
message MarathonRaidQuest {
  string id = 1;
  string stageId = 2;
  string name = 3;
  string description = 4;
  string unlockConditionId = 5;
  string unlockDescription = 6;
  string musicId = 8;
  string musicChartPatternId = 9;
  ProtoEnum.AttributeType position1AttributeType = 10;
  ProtoEnum.AttributeType position2AttributeType = 11;
  ProtoEnum.AttributeType position3AttributeType = 12;
  ProtoEnum.AttributeType position4AttributeType = 13;
  ProtoEnum.AttributeType position5AttributeType = 14;
  int32 activeSkillWeightPermil = 15;
  int32 specialSkillWeightPermil = 16;
  int32 skillStaminaWeightPermil = 17;
  int32 staminaRecoveryWeightPermil = 18;
  int32 beatDanceWeightPermil = 19;
  int32 beatVocalWeightPermil = 20;
  int32 beatVisualWeightPermil = 21;
  string questPressureId = 22;
  string questCharacterAdvantageId = 23;
  string questAudienceAdvantageId = 24;
  ProtoEnum.MoodType moodType = 25;
  int32 maxCapacity = 26;
  string liveBonusGroupId = 27;
  bool unlocked = 28;
  repeated api.MarathonRaidQuestDifficulty difficulties = 100;
}
message MarathonRaidQuestDifficulty {
  string raidQuestId = 1;
  int32 difficultyNumber = 2;
  int32 difficultyLevel = 3;
  int32 mentalThreshold = 4;
  int64 clearScore = 5;
  int32 requiredRaidStamina = 6;
  string hostRewardId = 7;
  string joinRewardId = 8;
  string mvpRewardId = 9;
  string unlockConditionId = 10;
  int32 rewardManagerExp = 11;
  int32 rewardCardExp = 12;
  bool cleared = 13;
  bool unlocked = 14;
  ProtoEnum.LiveSkipType liveSkipType = 15;
}
message MarathonRaidRankedUser {
  int32 rank = 1;
  string userName = 2;
  int32 managerLevel = 3;
  int64 score = 4;
  string emblemId = 5;
  string userId = 6;
  repeated api.LiveCardInfo cardInfos = 7;
}
message MarathonRaidStartResponse {
  string marathonId = 1;
  int32 difficultyNumber = 2;
  int32 difficultyLevel = 3;
  api.LiveResult result = 4;
  api.QuestReward reward = 5;
  repeated transaction.RewardResult hostRewards = 6;
  int64 raidEndTime = 7;
  api.MarathonRaidResult raidResult = 8;
  int64 beforeScore = 9;
  repeated api.QuestRankPattern rankPatterns = 10;
  string liveBonusId = 11;
  api.CommonResponse commonResponse = 9999;
}
message MarketItem {
  int32 number = 1;
  ProtoEnum.ResourceType consumptionResourceType = 2;
  int32 baseAmount = 3;
  int32 discountAmount = 4;
  string rewardId = 5;
  int32 discountRatePermil = 6;
  bool soldOut = 7;
  string unlockConditionId = 8;
}
message MessageGroupInfo {
  string messageGroupId = 1;
  api.TimelineInfo latestTimelineInfo = 2;
}
message MosaicInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  api.EventMissionInfo eventMissionInfo = 5;
  string assetId = 6;
  api.NoticeInfo noticeInfo = 7;
  string bgmAssetId = 8;
  string backgroundColorCode1 = 9;
  string backgroundColorCode2 = 10;
  string consumptionItemId = 11;
  repeated api.MosaicPanelInfo panelInfos = 12;
  repeated api.MosaicTotalConsumptionRewardInfo totalConsumptionRewardInfos = 13;
}
message MosaicPanelInfo {
  int32 number = 1;
  string rewardId = 2;
  int64 consumptionAmount = 3;
  int32 exchangeLimit = 4;
  int32 leftCount = 5;
  string unlockConditionId = 6;
  string name = 7;
  string description = 8;
  bool unlocked = 9;
}
message MosaicTotalConsumptionRewardInfo {
  int32 number = 1;
  string rewardId = 2;
  int64 totalConsumptionAmount = 3;
}
message PhotoActivity {
  string photoActivityId = 1;
  bool isUnlocked = 2;
}
message PhotoContestActivity {
  string id = 1;
  bool isUnlocked = 2;
}
message PhotoContestInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  int64 aggregateEndTime = 5;
  int64 exchangeEndTime = 6;
  string assetId = 7;
  api.EventStoryInfo eventStoryInfo = 8;
  api.EventExchangeBoothInfo eventExchangeBoothInfo = 9;
  api.NoticeInfo noticeInfo = 10;
  int64 totalBestShootEvaluationPoint = 11;
  int64 totalBestShootEvaluationPointTime = 12;
  int64 rank = 13;
  repeated api.PhotoContestRankingRewardInfo rankingRewardInfos = 14;
  repeated api.PhotoContestSectionInfo sectionInfos = 15;
  repeated api.PhotoContestActivity activities = 16;
  repeated api.PhotoContestQuestMusic musics = 17;
  repeated api.PhotoContestQuestStage stages = 18;
  repeated transaction.RewardResult dailyRewardResults = 19;
  int32 onceShootingSubmitLimitCount = 20;
  int64 currentPhotoAmount = 21;
  string submittingItemId = 22;
  string creatingItemId = 23;
}
message PhotoContestPhotoInfo {
  string assetId = 1;
  string sectionId = 2;
  int64 evaluationPoint = 3;
  bool isBest = 4;
  int64 shootingTime = 5;
  int64 fixedCreatePhotoRarity = 6;
  ProtoEnum.PhotoContestEvaluationRankType evaluationRankType = 7;
}
message PhotoContestQuestMusic {
  string id = 1;
  bool isUnlocked = 2;
}
message PhotoContestQuestStage {
  string id = 1;
  bool isUnlocked = 2;
}
message PhotoContestRankingInfo {
  string userId = 1;
  string name = 2;
  int32 managerLevel = 3;
  int64 totalBestShootEvaluationPoint = 4;
  int32 rank = 5;
  string emblemId = 6;
  repeated api.PhotoContestPhotoInfo bestPhotoInfos = 7;
}
message PhotoContestRankingRewardInfo {
  int32 rankFrom = 1;
  string rewardId = 2;
}
message PhotoContestSectionInfo {
  string id = 1;
  repeated api.PhotoContestSectionRewardInfo sectionRewardInfos = 2;
  string bestShootAssetId = 3;
  int64 bestShootEvaluationPoint = 4;
  int64 totalSectionEvaluationPoint = 5;
  bool isUnlocked = 6;
  repeated api.PhotoContestSectionAdvanceGuideInfo advanceGuideInfos = 7;
}
message PhotoContestSectionRewardInfo {
  string sectionRewardId = 1;
  bool canReceive = 2;
  bool haveReceived = 3;
}
message PhotoContestSubmitShootingResponse {
  int64 evaluationPoint = 1;
  bool isBest = 2;
  int64 totalSectionEvaluationPoint = 3;
  int64 totalBestShotEvaluationPoint = 4;
  string nextPhotoImageId = 5;
  repeated string newCanReceiveSectionRewardIds = 7;
  int64 rank = 8;
  ProtoEnum.PhotoContestEvaluationRankType evaluationRankType = 9;
  repeated api.PhotoContestSectionBaseGuideInfo baseGuideInfos = 10;
  repeated api.PhotoContestSectionAdvanceGuideInfo advanceGuideInfos = 11;
  int64 fixedCreatePhotoRarity = 12;
  api.CommonResponse commonResponse = 9999;
}
message PhotoExpression {
  string photoExpressionId = 1;
  bool isUnlocked = 2;
}
message PhotoListSpecialShootingResponse {
  repeated api.SpecialPhotoActivityInfo activities = 1;
  repeated api.SpecialPhotoQuestMusicInfo musics = 2;
  string name = 4;
  repeated string itemIds = 5;
  api.CommonResponse commonResponse = 9999;
}
message PhotoMusic {
  string musicId = 1;
  bool isUnlocked = 2;
}
message PhotoStage {
  string stageId = 1;
  bool isUnlocked = 2;
}
message ProfileFindUserResponse {
  string userId = 1;
  string name = 2;
  int64 managerExp = 3;
  int32 managerLevel = 4;
  string divisionId = 5;
  string guildId = 6;
  string emblemId = 7;
  api.FavoriteCardInfo favoriteCard = 8;
  api.FavoritePhotoInfo favoritePhoto = 9;
  repeated string favoriteCharacterIds = 10;
  string message = 11;
  int32 birthMonth = 12;
  int32 birthDay = 13;
  ProtoEnum.ProfileBackgroundType backgroundType = 14;
  ProtoEnum.ProfileLayoutType layoutType = 15;
  string hierarchyCurrentDetailGradeId = 16;
  int32 hierarchyCurrentRank = 17;
  string decorationId = 18;
  ProtoEnum.ProfileInformationType informationType = 19;
  ProtoEnum.ProfileColorType colorType = 20;
  api.CommonResponse commonResponse = 9999;
}
message ProfileInfo {
  string userId = 1;
  string name = 2;
  int64 managerExp = 3;
  int32 managerLevel = 4;
  string emblemId = 5;
  api.FavoriteCardInfo favoriteCard = 6;
  api.FavoritePhotoInfo favoritePhoto = 7;
  repeated string favoriteCharacterIds = 8;
  ProtoEnum.ProfileBackgroundType backgroundType = 9;
  ProtoEnum.ProfileLayoutType layoutType = 10;
  int64 lastLoginTime = 11;
  string decorationId = 12;
  ProtoEnum.ProfileInformationType informationType = 13;
  ProtoEnum.ProfileColorType colorType = 14;
  api.BuddyCardInfo buddyCardInfo = 15;
}
message ProfileTopResponse {
  string hierarchyCurrentDetailGradeId = 1;
  int32 hierarchyCurrentRank = 2;
  repeated api.ProfileInfo friendProfiles = 3;
  api.CommonResponse commonResponse = 9999;
}
message Promotion {
  string id = 1;
  string name = 2;
  string subName = 3;
  string unlockConditionId = 5;
  bool isUnlocked = 6;
  string activityPerformanceId = 7;
  int32 level = 8;
  int32 exp = 9;
  int32 nextLevelRequiredExp = 10;
  int32 requiredStamina = 11;
  string nextLevelUnlockConditionId = 12;
  bool isNextLevelUnlocked = 13;
  int32 stepConsumptionStamina = 14;
  int32 stepRewardGold = 15;
  int32 stepRewardCardEnhanceItem = 16;
  string stepAdditionalRewardId = 17;
  string multiStepRewardId = 18;
  int32 maxFanAmount = 19;
  string viewConditionId = 20;
  string subGenre = 21;
  repeated string multiStepCampaignDropRewardIds = 22;
}
message PromotionProgress {
  string activityPromotionId = 1;
  string activityPromotionName = 2;
  string activityPromotionSubName = 3;
  int32 activityPromotionLevel = 5;
  repeated api.ActivityCharacterInfo characters = 6;
  int64 startTime = 7;
  int64 finishTime = 8;
  int32 stepConsumptionStamina = 9;
  int32 completedStep = 10;
  int32 stepRewardGold = 11;
  int32 stepRewardManagerExp = 12;
  int32 stepRewardActivityExp = 13;
  int32 stepRewardCharacterActivityExp = 14;
  string stepAdditionalRewardId = 15;
  string multiStepRewardId = 16;
  int32 stepRewardCardEnhanceItem = 17;
  int32 rewardGoldAmount = 18;
  int32 rewardCardEnhanceItemAmount = 19;
  repeated api.ActivityPromotionReward rewards = 20;
  int64 nextActivityLevelUpTime = 21;
  repeated api.ActivityCampaignEffect campaignEffects = 22;
  string activityPerformanceId = 23;
  string subGenre = 24;
  repeated string multiStepCampaignDropRewardIds = 25;
}
message PvpRewardInfo {
  int64 rankFrom = 1;
  string rankingRewardId = 2;
  string challengeRewardId = 3;
  int64 hierarchyVariablePoint = 4;
}
message QuestAreaGroupInfo {
  string areaGroupId = 1;
  repeated api.QuestAreaInfo areas = 2;
}
message QuestAreaInfo {
  string areaId = 1;
  bool unlocked = 2;
  repeated api.QuestInfo quests = 3;
}
message QuestBulkDailyDeckPositionInfo {
  int32 position = 1;
  string cardId = 2;
}
message QuestBulkDailyInfo {
  string questId = 1;
  repeated api.QuestBulkDailyDeckPositionInfo deckPositions = 2;
  ProtoEnum.ResultRankType rankType = 3;
  int32 rankPlus = 4;
}
message QuestBulkDailyResultInfo {
  string questId = 1;
  int32 playCount = 2;
  repeated api.QuestBulkDailyDeckPositionInfo deckPositions = 3;
  api.QuestReward reward = 4;
  ProtoEnum.ResultRankType rankType = 5;
  int32 rankPlus = 6;
}
message QuestClearInfo {
  int64 score = 1;
  string userName = 2;
  string deckName = 3;
  repeated api.LiveCardInfo cards = 4;
  string emblemId = 5;
  string userId = 6;
  ProtoEnum.ResultRankType rankType = 7;
  int32 plus = 8;
  bool isLiveResultDetailAvailable = 9;
}
message QuestContestRankInfo {
  int32 rank = 1;
  bool isNPC = 2;
  int64 score = 3;
  string userName = 4;
  string deckName = 5;
  repeated api.LiveCardInfo cards = 6;
  string emblemId = 7;
  string userId = 8;
  bool isLiveResultDetailAvailable = 9;
}
message QuestInfo {
  string questId = 1;
  bool cleared = 2;
  int64 highestScore = 3;
  ProtoEnum.ResultRankType rankType = 4;
  int32 plus = 5;
  int32 highestRank = 6;
  bool isPlayable = 7;
  int32 playableCount = 8;
  api.QuestOpponentInfo opponentInfo = 9;
  repeated string campaignDropRewardIds = 10;
}
message QuestListTowerRankingResponse {
  int32 selfHighestRank = 1;
  string selfQuestId = 2;
  repeated api.QuestTowerRankInfo ranks = 3;
  int32 totalQuestNum = 4;
  api.CommonResponse commonResponse = 9999;
}
message QuestRewardCard {
  string cardId = 1;
  int64 funAmount = 2;
  int32 exp = 3;
  bool isExpTruncated = 4;
}
message QuestStartResponse {
  string questId = 1;
  api.LiveResult result = 2;
  api.QuestReward reward = 3;
  ProtoEnum.ResultRankType rankType = 4;
  int32 rankPlus = 5;
  repeated api.QuestRankPattern rankPatterns = 6;
  int32 highestRank = 7;
  int64 highestScore = 8;
  api.HierarchyChangeInfo hierarchyChangeInfo = 9;
  api.FriendApplyToBuddyInfo friendApplyToBuddyInfo = 10;
  api.CommonResponse commonResponse = 9999;
}
message QuestTopResponse {
  repeated api.QuestAreaGroupInfo mainAreaGroups = 1;
  int64 contestTotalScore = 2;
  bool hasUnplayedContest = 3;
  api.QuestTopPvpInfo pvpInfo = 4;
  string currentTowerQuestId = 5;
  bool isDailyPlayable = 6;
  api.CurrentGvgInfo gvgInfo = 7;
  api.HierarchyNotiInfo hierarchyNotiInfo = 8;
  repeated api.QuestAreaInfo dailyAreas = 9;
  api.QuestAreaInfo towerArea = 10;
  api.QuestAreaInfo contestArea = 11;
  bool isTowerTopUnlocked = 12;
  repeated api.QuestBulkDailyInfo bulkDailyInfos = 13;
  api.CommonResponse commonResponse = 9999;
}
message QuestTowerAreaInfo {
  api.QuestAreaInfo area = 1;
  string currentTowerQuestId = 2;
}
message QuestTowerRankInfo {
  int32 rank = 1;
  string questId = 2;
  string userName = 3;
  string deckName = 4;
  repeated api.LiveCardInfo cards = 5;
  string emblemId = 6;
  string userId = 7;
}
message RaceAccessoryInfo {
  string accessoryId = 1;
  ProtoEnum.AccessoryCategoryType categoryType = 2;
  int32 param1Permil = 3;
  int32 param1Value = 4;
  int32 param2Permil = 5;
  int32 param2Value = 6;
}
message RaceDailyRankingUserInfo {
  string userId = 1;
  string userName = 2;
  int64 score = 3;
  string emblemId = 4;
  int32 rank = 5;
}
message RaceInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  int64 exchangeEndTime = 5;
  int64 aggregateEndTime = 6;
  string assetId = 7;
  api.EventStoryInfo eventStoryInfo = 8;
  api.EventMissionInfo eventMissionInfo = 9;
  api.NoticeInfo noticeInfo = 10;
  string racePointItemId = 11;
  string raceMedalItemId = 12;
  string raceLiveBonusResetItemId = 13;
  repeated api.RaceAreaInfo raceAreaInfos = 14;
  int32 requiredCardCoolTimeRacePointAmount = 15;
  repeated api.RaceRankGradeInfo raceRankGradeInfos = 16;
  int32 livePanelDifficultyNumber = 17;
  int32 cardCoolTimeMinutes = 18;
  string raceLiveBonusGroupId = 19;
}
message RaceLiveBonusInfo {
  string liveBonusId = 1;
  int32 level = 2;
}
message RaceLiveQuestInfo {
  string raceQuestId = 1;
  int32 currentClearDifficultyNumber = 2;
  int32 beforeClearDifficultyNumber = 3;
  repeated api.RaceLiveQuestDifficultyLevelInfo difficultyLevelInfos = 4;
}
message RaceOpponentProgressInfo {
  string userId = 1;
  string name = 2;
  string displayCharacterId = 3;
  int32 clearPanelCount = 4;
  int32 rank = 5;
  repeated api.RaceLiveBonusInfo liveBonusInfos = 6;
}
message RacePhotoAbilityInfo {
  string photoAbilityId = 1;
  int64 effectValue = 2;
}
message RaceRankingInfo {
  string userId = 1;
  string name = 2;
  int32 managerLevel = 3;
  int32 clearPanelCount = 4;
  int32 rank = 5;
  string emblemId = 6;
}
message RaceUserCardCoolTimeInfo {
  string cardId = 1;
  int64 coolTime = 2;
}
message Refresh {
  string id = 1;
  string name = 2;
  int32 requiredMinutes = 3;
  string unlockConditionId = 4;
  bool isUnlocked = 5;
  int32 level = 6;
  int32 exp = 7;
  int32 nextLevelRequiredExp = 8;
  repeated api.RefreshLevel levels = 9;
  string viewConditionId = 10;
}
message RefreshLevel {
  int32 level = 1;
  string name = 3;
  int32 requiredGold = 4;
  string unlockConditionId = 5;
  bool isUnlocked = 6;
  string activityPerformanceId = 7;
  int32 recoveryAmount = 8;
  string viewConditionId = 9;
  string subGenre = 10;
}
message RefreshProgress {
  string activityRefreshId = 1;
  string activityRefreshName = 2;
  string activityRefreshSubName = 3;
  int32 activityRefreshLevel = 4;
  repeated api.ActivityCharacterInfo characters = 6;
  int64 startTime = 7;
  int64 finishTime = 8;
  int32 requiredMinutes = 9;
  int32 recoveryAmount = 10;
  string activityPerformanceId = 11;
  string subGenre = 12;
}
message ShelfAlbumEpisodeInfo {
  int32 episode = 1;
  string assetId = 2;
  string storyId = 3;
  string viewConditionId = 4;
  string unlockConditionId = 5;
  bool isUnlocked = 6;
}
message ShelfAlbumInfo {
  string albumId = 1;
  string assetId = 2;
  string unlockConditionId = 3;
  bool isUnlocked = 4;
  string snsText = 5;
  bool isNew = 6;
  string name = 7;
  string bgmAssetId = 8;
}
message ShelfInfo {
  string name = 1;
  int64 startTime = 2;
  int64 endTime = 3;
  string assetId = 4;
  api.EventMissionInfo eventMissionInfo = 5;
  api.NoticeInfo noticeInfo = 6;
  string photoCreatingItemId = 7;
  repeated api.ShelfAlbumInfo albumInfos = 8;
}
message ShelfPhotoInfo {
  string assetId = 1;
  int64 shootingTime = 2;
  int32 episode = 3;
  string mainCharacterId = 4;
}
message ShopConditionReward {
  int32 number = 1;
  string conditionId = 2;
  string rewardId = 3;
  ProtoEnum.ShopConditionRewardStatusType statusType = 4;
}
message ShopInfo {
  string id = 1;
  string name = 2;
  ProtoEnum.ShopType type = 3;
  int32 order = 4;
  string colorCode = 5;
  string backgroundColorCode = 6;
  api.NoticeInfo noticeInfo = 7;
  string viewConditionId = 8;
  string thumbnailAssetId = 9;
  string costumeId = 10;
  ProtoEnum.ResetTimingType resetTimingType = 11;
  int64 nextResetTime = 12;
  bool isPurchased = 101;
  int32 progress = 102;
  int32 maxProgress = 103;
  string bannerAssetId = 104;
}
message ShopItem {
  string id = 1;
  string name = 2;
  string description = 3;
  string productId = 4;
  string consumptionId = 5;
  string rewardId = 6;
  string thumbnailAssetId = 7;
  int32 purchaseLimit = 8;
  int32 leftCount = 9;
  int32 order = 10;
  string viewConditionId = 11;
  string pushSegment = 12;
  ProtoEnum.ResetTimingType resetTimingType = 13;
  int64 nextResetTime = 14;
  string unlockConditionId = 15;
  bool unlocked = 16;
  string colorCode = 100;
  string backgroundColorCode = 101;
}
message ShopLoginBonus {
  int32 day = 1;
  string rewardId = 2;
  bool isReceived = 3;
}
message ShowcaseApplyMysetResponse {
  string frameId = 2;
  api.ShowcaseLayoutInfo layoutInfo = 3;
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseFrameInfo {
  string id = 1;
  bool isUnlocked = 2;
}
message ShowcaseSelfInfo {
  int32 number = 1;
  string defaultName = 2;
  string unlockConditionId = 3;
  bool isUnlocked = 4;
  api.ShowcaseLayoutInfo layoutInfo = 5;
}
message ShowcaseTopResponse {
  repeated api.ShopInfo shops = 1;
  repeated api.DokanInfo dokanInfos = 2;
  repeated api.ShowcaseSelfInfo showcaseInfos = 3;
  int64 totalLikedCount = 4;
  repeated api.ShowcaseMysetInfo mysetInfos = 5;
  repeated api.ShowcaseFrameInfo frameInfos = 6;
  repeated api.DokanInfo topDokanInfos = 7;
  repeated string showcaseMusicIds = 8;
  api.CommonResponse commonResponse = 9999;
}
message SpecialHomeActionInfo {
  string characterId = 1;
  repeated api.SpecialHomeActionDetail specialHomeActionDetails = 2;
}
message SpecialHomeMotionInfo {
  string characterId = 1;
  string idleMotionAssetId = 2;
  string idleAdditionMotionAssetId = 3;
}
message SpecialHomePositionInfo {
  repeated string homeCostumeIds = 1;
  repeated string trainingCostumeIds = 2;
  repeated string activityCostumeIds = 3;
  repeated string idolCostumeIds = 4;
  string specialHomePositionId = 5;
  repeated api.SpecialHomeMotionInfo specialHomeMotionInfos = 6;
}
message SpecialPhotoActivityInfo {
  bool isUnlocked = 1;
  int32 order = 2;
  string name = 3;
  string thumbAssetId = 4;
  string photoStageId = 5;
  string photoShootingMotionSetId = 6;
  bool isDeleteCharacter = 7;
  repeated string costumeTypeIds = 8;
  string forceCostumeTypeId = 9;
  repeated string characterIds = 10;
  string unlockConditionId = 11;
  ProtoEnum.PhotoShootingActionType actionType = 12;
  string viewConditionId = 13;
}
message SpecialPhotoQuestMusicInfo {
  string musicId = 1;
  bool isUnlocked = 2;
  int32 order = 3;
  repeated string costumeTypeIds = 4;
  repeated string characterIds = 5;
  repeated api.SpecialPhotoQuestStage photoStages = 6;
  string unlockConditionId = 7;
  string viewConditionId = 8;
}
message SpecialPhotoQuestStage {
  string stageId = 1;
  bool isUnlocked = 2;
  int32 maxCapacity = 3;
  string unlockConditionId = 4;
  int32 order = 5;
  string viewConditionId = 6;
}
message SpecialPhotoShootingInfo {
  string specialPhotoShootingId = 1;
  bool isUnlocked = 2;
  string unlockConditionId = 3;
}
message StoryReadAnniversaryStoryResponse {
  repeated transaction.RewardResult rewards = 1;
  string newTitleBackgroundId = 2;
  api.CommonResponse commonResponse = 9999;
}
message TimelineInfo {
  string messageGroupId = 1;
  int64 timelineId = 2;
  string messageId = 3;
  int64 arrivedTime = 4;
  repeated string selectMessageDetailIds = 5;
  string lastMessageDetailId = 6;
  int64 lastMessageDetailTime = 7;
  bool finished = 8;
}
message TourDifficultyInfo {
  string tourDifficultyId = 1;
  int32 tourDifficultyNumber = 2;
  int32 managerLevel = 3;
  string unlockConditionId = 4;
  bool unlocked = 5;
}
message TourEffectActivity {
  string itemId = 1;
  int32 amount = 2;
  string activityPerformanceId = 3;
  string activityPromotionSubGenre = 5;
}
message TourEffectLive {
  string musicId = 1;
  string name = 2;
  string stageId = 3;
  string musicChartPatternId = 4;
  int32 maxCapacity = 5;
  int32 mentalThreshold = 6;
  int64 clearScore = 7;
  string rewardId = 8;
  int32 difficultyLevel = 9;
  string tourQuestSettingId = 10;
  ProtoEnum.LiveSkipType liveSkipType = 11;
}
message TourEffectPvp {
  string musicId = 1;
  string name = 2;
  string stageId = 3;
  string musicChartPatternId = 4;
  int32 maxCapacity = 5;
  int32 mentalThreshold = 6;
  int64 clearScore = 7;
  api.TourOpponentInfo opponentInfo = 8;
  api.TourScoutInfo scoutInfo = 9;
  string rewardId = 10;
  string tourQuestSettingId = 11;
  ProtoEnum.LiveSkipType liveSkipType = 12;
}
message TourEffectRefresh {
  int32 amountPermil = 1;
  string activityPerformanceId = 2;
  string activityRefreshSubGenre = 4;
}
message TourLiveBonusInfo {
  string liveBonusId = 1;
  string name = 2;
  string liveAbilityId = 3;
  int32 liveAbilityLevel = 4;
  int32 powerPermil = 5;
}
message TourRankingInfo {
  string userId = 1;
  string name = 2;
  int32 managerLevel = 3;
  int64 point = 4;
  int32 rank = 5;
  string emblemId = 6;
}
message TourRankingRewardInfo {
  int32 rankFrom = 1;
  string rewardId = 2;
}
message UserHierarchyInfo {
  string currentDetailGradeId = 1;
  int32 currentRank = 2;
  int64 currentPoint = 3;
}
message AccessoryEnhanceRequest {
  string accessoryId = 1;
  int32 count = 2;
  ProtoEnum.AccessoryEnhanceMaterialType materialType = 3;
}
message AccessoryEnhanceResponse {
  bool isUnsetLeague = 2;
  api.CommonResponse commonResponse = 9999;
}
message AccessoryLimitBreakRequest {
  string accessoryId = 1;
  bool isInUse = 2;
  bool isInUseLeague = 3;
}
message AccessoryLimitBreakResponse {
  api.CommonResponse commonResponse = 9999;
}
message AccessorySellRequest {
  string accessoryId = 1;
  int32 count = 2;
}
message AccessorySellResponse {
  api.CommonResponse commonResponse = 9999;
}
message ActivityStartFanEventRequest {
  string activityFanEventId = 1;
  repeated string characterIds = 2;
  repeated string costumeIds = 3;
  repeated string itemIds = 4;
  repeated string hairIds = 5;
}
message ActivityStartFanEventResponse {
  api.FanEventProgress progress = 1;
  api.CommonResponse commonResponse = 9999;
}
message ActivityLoadFanEventResponse {
  api.FanEventProgress progress = 1;
  api.CommonResponse commonResponse = 9999;
}
message ActivityFetchFanEventStepsRequest {
  repeated int32 steps = 1;
}
message ActivityFetchFanEventStepsResponse {
  repeated api.FanEventCharacterSteps characterSteps = 1;
  api.CommonResponse commonResponse = 9999;
}
message ActivitySaveFanEventRequest {
  repeated api.FanEventCharacterResult characterResults = 1;
  string useItemId = 2;
  bool execCheer = 3;
}
message ActivitySaveFanEventResponse {
  repeated api.FanEventCharacterSteps characterSteps = 1;
  api.CommonResponse commonResponse = 9999;
}
message ActivityFinishFanEventResponse {
  int32 activityPoint = 1;
  ProtoEnum.ResultRankType rankType = 2;
  int32 plus = 3;
  repeated transaction.Reward rewards = 4;
  repeated api.FanEventRankPattern rankPatterns = 5;
  api.ActivityLevelProgress activityLevelProgress = 6;
  repeated api.ActivityCharacterInfo characters = 7;
  repeated api.ActivityCampaignEffect campaignEffects = 8;
  repeated transaction.Reward campaignDropRewards = 9;
  api.CommonResponse commonResponse = 9999;
}
message ActivityGetFanEventRankingRequest {
  string activityFanEventId = 1;
}
message ActivityGetFanEventRankingResponse {
  int64 selfRank = 1;
  int64 selfScore = 2;
  repeated api.FanEventRankingInfo rankInfos = 3;
  api.CommonResponse commonResponse = 9999;
}
message ActivityStartPromotionRequest {
  string activityPromotionId = 1;
  repeated string characterIds = 2;
  repeated string costumeIds = 3;
  repeated string hairIds = 4;
}
message ActivityStartPromotionResponse {
  api.PromotionProgress progress = 1;
  api.CommonResponse commonResponse = 9999;
}
message ActivityLoadPromotionResponse {
  api.PromotionProgress progress = 1;
  api.CommonResponse commonResponse = 9999;
}
message ActivityUsePromotionItemRequest {
  string itemId = 1;
  int32 amount = 2;
}
message ActivityUsePromotionItemResponse {
  api.PromotionProgress progress = 1;
  api.CommonResponse commonResponse = 9999;
}
message ActivityReceivePromotionRewardResponse {
  repeated transaction.Reward rewards = 1;
  repeated transaction.Reward bonusRewards = 2;
  int32 completedStep = 3;
  api.PromotionProgress progress = 4;
  api.ActivityLevelProgress activityLevelProgress = 5;
  repeated api.ActivityCampaignEffect campaignEffects = 6;
  repeated transaction.Reward campaignDropRewards = 7;
  api.CommonResponse commonResponse = 9999;
}
message ActivityFetchPromotionStepsRequest {
  int32 step = 1;
}
message ActivityFetchPromotionStepsResponse {
  repeated api.PromotionStep steps = 1;
  api.CommonResponse commonResponse = 9999;
}
message ActivityFinishPromotionResponse {
  repeated transaction.Reward rewards = 1;
  repeated transaction.Reward bonusRewards = 2;
  api.ActivityLevelProgress activityLevelProgress = 3;
  int32 totalSteps = 4;
  repeated api.ActivityCharacterInfo characters = 5;
  repeated api.ActivityCampaignEffect campaignEffects = 6;
  repeated transaction.Reward campaignDropRewards = 7;
  api.CommonResponse commonResponse = 9999;
}
message ActivityStartRefreshRequest {
  string activityRefreshId = 1;
  int32 activityRefreshLevel = 2;
  repeated string characterIds = 3;
  repeated string costumeIds = 4;
  repeated string hairIds = 5;
}
message ActivityStartRefreshResponse {
  api.RefreshProgress progress = 1;
  api.CommonResponse commonResponse = 9999;
}
message ActivityLoadRefreshResponse {
  api.RefreshProgress progress = 1;
  api.CommonResponse commonResponse = 9999;
}
message ActivityUseRefreshItemRequest {
  string itemId = 1;
  int32 amount = 2;
}
message ActivityUseRefreshItemResponse {
  api.RefreshProgress progress = 1;
  api.CommonResponse commonResponse = 9999;
}
message ActivityFinishRefreshResponse {
  api.ActivityLevelProgress activityLevelProgress = 1;
  repeated api.ActivityCharacterInfo characters = 2;
  api.CommonResponse commonResponse = 9999;
}
message ActivityReceiveLessonRewardResponse {
  repeated transaction.Reward rewards = 1;
  api.ActivityLessonProgress progress = 2;
  repeated api.ActivityCampaignEffect campaignEffects = 3;
  repeated transaction.Reward campaignDropRewards = 4;
  api.CommonResponse commonResponse = 9999;
}
message ActivityPromoteLessonRequest {
  bool isFree = 1;
  string useItemId = 2;
}
message ActivityPromoteLessonResponse {
  repeated transaction.Reward rewards = 1;
  api.ActivityLessonProgress progress = 2;
  repeated api.ActivityCampaignEffect campaignEffects = 3;
  repeated transaction.Reward campaignDropRewards = 4;
  api.CommonResponse commonResponse = 9999;
}
message FanEventCharacterSteps {
  string characterId = 1;
  repeated api.FanEventStep steps = 2;
}
message FanEventStep {
  int32 step = 1;
  repeated api.FanEventHappening happenings = 2;
  repeated api.FanEventItemEffect itemEffects = 3;
}
message FanEventHappening {
  ProtoEnum.ActivityFanEventHappeningType type = 1;
  string characterId = 2;
}
message FanEventItemEffect {
  ProtoEnum.ItemType type = 1;
  int32 value = 2;
}
message FanEventCharacterResult {
  string characterId = 1;
  repeated api.FanEventStepResult stepResults = 2;
}
message FanEventStepResult {
  int32 step = 1;
  int64 reductionMilliSeconds = 2;
  int32 activityPoint = 3;
}
message PromotionStep {
  int32 step = 1;
  repeated api.ActivityPromotionReward rewards = 2;
}
message AdvertisementStartRequest {
  ProtoEnum.WatchAdvertisementType watchAdType = 1;
}
message AdvertisementStartResponse {
  api.CommonResponse commonResponse = 9999;
}
message AdvertisementEndRequest {
  ProtoEnum.WatchAdvertisementType watchAdType = 1;
}
message AdvertisementEndResponse {
  api.CommonResponse commonResponse = 9999;
}
message AnniversaryOutputTransitionLogRequest {
  string anniversaryId = 1;
  ProtoEnum.AnniversaryTransitionActionType actionType = 2;
}
message AnniversaryOutputTransitionLogResponse {
  api.CommonResponse commonResponse = 9999;
}
message AuthCreateRequest {
  string firebaseUID = 1;
}
message AuthCreateResponse {
  string firebaseCustomToken = 1;
}
message AuthLoginRequest {
  string firebaseIDToken = 1;
}
message AuthLoginResponse {
  string gameAuthToken = 1;
  transaction.UserPublic userPublic = 2;
  bool requiredFirebaseReauthenticate = 3;
}
message AuthDeleteResponse {
}
message AuthRecreateRequest {
  string firebaseIDToken = 1;
}
message AuthRecreateResponse {
  string firebaseCustomToken = 1;
}
message BacksideTopRequest {
  string backsideId = 1;
}
message BacksideTopResponse {
  api.BacksideInfo backsideInfo = 1;
  repeated api.DokanInfo dokanInfos = 2;
  api.CommonResponse commonResponse = 9999;
}
message BacksideRankingRequest {
  string backsideId = 1;
}
message BacksideRankingResponse {
  repeated api.BacksideRankingInfo rankingInfos = 1;
  int64 selfFinalScore = 2;
  int32 selfRank = 3;
  api.CommonResponse commonResponse = 9999;
}
message BacksideStageStartRequest {
  string backsideId = 1;
  int32 number = 2;
  int64 deckNumber = 3;
  int32 difficultyNumber = 4;
}
message BacksideStageStartResponse {
  api.BacksideStageInfo stageInfo = 1;
  api.BacksideExecPanelLocationInfo execPanelLocationInfo = 2;
  repeated api.BacksideLiveBonus halfwayLiveBonusChoices = 3;
  api.BacksideSurpriseInfo halfwaySurpriseInfo = 4;
  api.BacksidePracticeStageClearInfo halfwayPracticeClearInfo = 5;
  bool isForceRetired = 6;
  api.CommonResponse commonResponse = 9999;
}
message BacksideStageActionRequest {
  string backsideId = 1;
  int32 pieceNumber = 2;
  int32 radiusNumber = 3;
  int32 panelNumber = 4;
  bool isSkip = 5;
}
message BacksideStageActionResponse {
  api.BacksideStageProgressInfo stageProgressInfo = 1;
  repeated api.BacksideLiveBonus liveBonusChoices = 2;
  bool isScheduled = 3;
  api.BacksideLiveInfo liveInfo = 4;
  api.BacksidePracticeStageClearInfo practiceClearInfo = 5;
  api.BacksideFinalStageClearInfo finalClearInfo = 6;
  api.BacksideSurpriseInfo surpriseInfo = 7;
  bool isForceRetired = 8;
  api.CommonResponse commonResponse = 9999;
}
message BacksideStageLiveBonusRequest {
  string backsideId = 1;
  string liveBonusId = 2;
}
message BacksideStageLiveBonusResponse {
  api.BacksideStageProgressInfo stageProgressInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message BacksideStagePracticeUpdateRequest {
  string backsideId = 1;
  bool isUpdate = 2;
}
message BacksideStagePracticeUpdateResponse {
  api.CommonResponse commonResponse = 9999;
}
message BacksideStageResetRequest {
  string backsideId = 1;
  bool isInGame = 2;
}
message BacksideStageResetResponse {
  api.CommonResponse commonResponse = 9999;
}
message BacksideStageSurpriseFinishRequest {
  string backsideId = 1;
}
message BacksideStageSurpriseFinishResponse {
  api.BacksideStageProgressInfo stageProgressInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message BacksideStageDeckPositionChangeRequest {
  string backsideId = 1;
  repeated api.BacksideDeckPositionInfo deckPositionInfos = 2;
}
message BacksideStageDeckPositionChangeResponse {
  repeated transaction.UserCharacter deckUserCharacters = 1;
  api.BacksideStageDeckDetailInfo deckDetailInfo = 2;
  api.BacksideStageDeckDetailInfo scoreLiveDeckDetailInfo = 3;
  api.BacksideStageDeckDetailInfo battleLiveDeckDetailInfo = 4;
  api.CommonResponse commonResponse = 9999;
}
message BacksideInfo {
  string id = 1;
  string name = 2;
  ProtoEnum.BacksideType type = 3;
  int64 startTime = 4;
  int64 endTime = 5;
  int64 aggregateEndTime = 6;
  int64 exchangeEndTime = 7;
  string assetId = 8;
  api.EventStoryInfo eventStoryInfo = 9;
  api.EventMissionInfo eventMissionInfo = 10;
  api.EventExchangeBoothInfo eventExchangeBoothInfo = 11;
  api.NoticeInfo noticeInfo = 12;
  api.BacksideAreaInfo areaInfo = 13;
  repeated api.BacksideRankingRewardInfo rankingRewardInfos = 14;
  int64 realScore = 15;
  int64 realScoreTime = 16;
  int64 rank = 17;
  int64 stageStamina = 18;
  int64 stageStaminaUpdatedTime = 19;
  int32 stageStaminaRecoveryMinutes = 20;
}
message BacksideAreaInfo {
  string areaId = 1;
  string name = 2;
  ProtoEnum.BacksideAreaType type = 3;
  string assetId = 4;
  repeated api.BacksideDifficultyInfo backsideDifficultyInfos = 5;
  int32 currentDifficultyNumber = 6;
  int32 lastChallengeDifficultyNumber = 7;
  ProtoEnum.BacksideDifficultyType difficultyType = 8;
}
message BacksidePracticeStageTotalResultInfo {
  ProtoEnum.BacksidePracticeRankType practiceRankType = 1;
  int32 practiceRankPlus = 2;
  int64 practiceScore = 3;
  repeated api.BacksideLiveBonusInfo practiceLiveBonusInfos = 4;
}
message BacksidePracticeStageResultInfo {
  ProtoEnum.BacksidePracticeRankType practiceRankType = 1;
  int32 practiceRankPlus = 2;
  int64 practiceScore = 3;
  repeated api.BacksideDeckCardInfo deckCardInfos = 4;
  repeated api.BacksideLiveBonus liveBonuses = 5;
}
message BacksideFinalStageResultInfo {
  ProtoEnum.BacksidePracticeRankType totalPracticeRankType = 1;
  int32 totalPracticeRankPlus = 2;
  int64 totalPracticeScore = 3;
  ProtoEnum.ResultRankType finalRankType = 4;
  int32 finalRankPlus = 5;
  int64 finalScore = 6;
  repeated api.BacksideDeckCardInfo deckCardInfos = 7;
  repeated api.BacksideLiveBonusInfo allLiveBonusInfos = 8;
  int64 practiceScore = 9;
}
message BacksidePracticeStageHalfwayInfo {
  int32 passedActionCount = 1;
  int64 practiceScore = 2;
  repeated api.BacksideDeckCardInfo deckCardInfos = 3;
  repeated api.BacksideLiveBonus liveBonuses = 4;
}
message BacksideFinalStageHalfwayInfo {
  int32 passedActionCount = 1;
  repeated api.BacksideDeckCardInfo deckCardInfos = 2;
  repeated api.BacksideLiveBonusInfo allLiveBonusInfos = 3;
  int64 practiceScore = 4;
  int64 totalPracticeScore = 5;
}
message BacksideLiveBonusInfo {
  int32 stageNumber = 1;
  ProtoEnum.BacksideStageType stageType = 2;
  string stageName = 3;
  repeated api.BacksideLiveBonus liveBonuses = 4;
}
message BacksideStageDeckDetailInfo {
  repeated api.BacksideDeckCardDetailInfo deckCardDetailInfos = 1;
  repeated api.BacksideDeckCardStaminaInfo deckCardStaminaInfos = 2;
  int64 baseDeckOverallValue = 3;
}
message BacksideStageInfo {
  repeated api.BacksidePanelInfo panelInfos = 1;
  repeated api.BacksideScheduleInfo scheduleInfos = 2;
  int64 nextActionCount = 3;
  int64 practiceScore = 4;
  repeated api.BacksideLiveBonus liveBonuses = 5;
  repeated api.BacksideLiveBonusInfo allLiveBonusInfos = 6;
  repeated api.BacksideCardLiveAbilityInfo cardLiveAbilityInfos = 7;
  int64 totalPracticeScore = 8;
  repeated transaction.UserCharacter deckUserCharacters = 9;
  api.BacksideStageDeckDetailInfo deckDetailInfo = 10;
  api.BacksideStageDeckDetailInfo scoreLiveDeckDetailInfo = 11;
  api.BacksideStageDeckDetailInfo battleLiveDeckDetailInfo = 12;
}
message BacksideStageProgressInfo {
  repeated api.BacksidePanelInfo panelInfos = 1;
  int64 nextActionCount = 2;
  int64 practiceScore = 3;
  repeated api.BacksideLiveBonus liveBonuses = 4;
  api.BacksideExecPanelLocationInfo execPanelLocationInfo = 5;
  int64 totalPracticeScore = 6;
  repeated transaction.UserCharacter deckUserCharacters = 7;
  api.BacksideStageDeckDetailInfo deckDetailInfo = 8;
  api.BacksideStageDeckDetailInfo scoreLiveDeckDetailInfo = 9;
  api.BacksideStageDeckDetailInfo battleLiveDeckDetailInfo = 10;
}
message BacksidePanelInfo {
  int32 pieceNumber = 1;
  int32 radiusNumber = 2;
  int32 panelNumber = 3;
  ProtoEnum.BacksidePanelType panelType = 4;
  ProtoEnum.BacksidePanelAttributeType panelAttributeType = 5;
  int32 panelRank = 6;
  api.BacksidePanelGoalInfo panelGoalInfo = 7;
  api.BacksidePanelLiveInfo panelLiveInfo = 8;
  api.BacksidePanelPvpInfo panelPvpInfo = 9;
  api.BacksidePanelStaminaInfo panelStaminaInfo = 10;
  bool haveExecuted = 11;
  bool canAction = 12;
}
message BacksideOpponentInfo {
  string name = 1;
  int32 managerLevel = 2;
  repeated api.LiveBattleCardInfo cardInfos = 3;
}
message BacksidePanelStaminaInfo {
  int32 staminaConsumptionAmount = 1;
  int32 staminaRecoveryAmount = 2;
}
message BacksideScheduleInfo {
  int32 actionCount = 1;
  ProtoEnum.BacksidePanelType panelType = 2;
}
message BacksideLiveInfo {
  api.LiveResult result = 1;
  ProtoEnum.ResultRankType rankType = 2;
  int32 rankPlus = 3;
  repeated api.QuestRankPattern rankPatterns = 4;
}
message BacksidePracticeStageClearInfo {
  string name = 1;
  ProtoEnum.BacksidePracticeRankType practiceRankType = 2;
  int32 practiceRankPlus = 3;
  int64 practiceScore = 4;
  repeated api.BacksideLiveBonus liveBonuses = 5;
  ProtoEnum.BacksidePracticeRankType lastPracticeRankType = 6;
  int32 lastPracticeRankPlus = 7;
  int64 lastPracticeScore = 8;
  repeated api.BacksideLiveBonus lastLiveBonuses = 9;
  repeated transaction.RewardResult firstClearRewardResults = 10;
  repeated transaction.RewardResult firstPracticeRankRewardResults = 11;
  repeated transaction.RewardResult loopPracticeRankRewardResults = 12;
}
message BacksideFinalStageClearInfo {
  string name = 1;
  ProtoEnum.ResultRankType finalRankType = 2;
  int32 finalRankPlus = 3;
  int64 finalScore = 4;
  repeated transaction.RewardResult firstClearRewardResults = 5;
  repeated transaction.RewardResult firstFinalRankRewardResults = 6;
  bool isBest = 7;
  int64 newRank = 8;
  int64 practiceScore = 9;
  int64 totalPracticeScore = 10;
  repeated transaction.RewardResult loopFinalRankRewardResults = 11;
  repeated transaction.RewardResult difficultyAreaRewardResults = 12;
}
message BacksideSurpriseInfo {
  string advAssetId = 1;
  api.BacksideLiveBonus liveBonus = 2;
}
message BacksideExecPanelLocationInfo {
  int32 pieceNumber = 1;
  int32 radiusNumber = 2;
  int32 panelNumber = 3;
}
message BacksideDeckPositionInfo {
  string cardId = 1;
  int32 newPosition = 2;
}
message BirthdayTopResponse {
  repeated api.BirthdayInfo birthdayInfos = 1;
  repeated string unwatchedAdvBirthdayIds = 2;
  repeated string receivableRewardBirthdayIds = 3;
  api.CommonResponse commonResponse = 9999;
}
message BirthdaySetWatchedRequest {
  string birthdayId = 1;
}
message BirthdaySetWatchedResponse {
  repeated string unwatchAdvBirthdayIds = 1;
  repeated string receivableRewardBirthdayIds = 2;
  api.CommonResponse commonResponse = 9999;
}
message BirthdayReceiveRewardResponse {
  repeated transaction.RewardResult rewards = 1;
  api.CommonResponse commonResponse = 9999;
}
message BirthdayOutputWatchedLogRequest {
  string birthdayId = 1;
  bool isSkip = 2;
}
message BirthdayOutputWatchedLogResponse {
  api.CommonResponse commonResponse = 9999;
}
message BirthdaySetWatchedRemindInfoResponse {
  api.CommonResponse commonResponse = 9999;
}
message CardEnhanceRequest {
  string cardId = 1;
  int32 level = 2;
}
message CardEnhanceResponse {
  api.CommonResponse commonResponse = 9999;
}
message CardLimitBreakRequest {
  string cardId = 1;
  int32 rarity = 2;
}
message CardLimitBreakResponse {
  api.CommonResponse commonResponse = 9999;
}
message CardSkillEnhanceRequest {
  string cardId = 1;
  string skillId = 2;
}
message CardSkillEnhanceResponse {
  api.CommonResponse commonResponse = 9999;
}
message CardLiveAbilityEnhanceRequest {
  string cardId = 1;
  string abilityId = 2;
}
message CardLiveAbilityEnhanceResponse {
  api.CommonResponse commonResponse = 9999;
}
message CardActivityAbilityEnhanceRequest {
  string cardId = 1;
  string abilityId = 2;
}
message CardActivityAbilityEnhanceResponse {
  api.CommonResponse commonResponse = 9999;
}
message CardResetRequest {
  string cardId = 1;
}
message CardResetResponse {
  repeated transaction.Reward rewards = 1;
  api.CommonResponse commonResponse = 9999;
}
message CardSetSupportRequest {
  int32 number = 1;
  string cardId = 2;
}
message CardSetSupportResponse {
  api.CommonResponse commonResponse = 9999;
}
message CardRemoveSupportRequest {
  int32 number = 1;
}
message CardRemoveSupportResponse {
  repeated transaction.Reward rewards = 1;
  api.CommonResponse commonResponse = 9999;
}
message CardReleaseSupportRequest {
  bool useStone = 1;
}
message CardReleaseSupportResponse {
  api.CommonResponse commonResponse = 9999;
}
message CardRankUpRequest {
  string cardId = 1;
  int32 rank = 2;
}
message CardRankUpResponse {
  api.CommonResponse commonResponse = 9999;
}
message CardUpdateDisplayTypeRequest {
  string cardId = 1;
  ProtoEnum.CardDisplayType displayType = 2;
}
message CardUpdateDisplayTypeResponse {
  api.CommonResponse commonResponse = 9999;
}
message LoginBonusPackageItem {
  api.ShopItem shopItem = 1;
  repeated api.ShopLoginBonus loginBonuses = 2;
  bool isPurchased = 3;
}
message ConditionRewardPackageItem {
  api.ShopItem shopItem = 1;
  repeated api.ShopConditionReward conditionRewards = 2;
  bool isPurchased = 3;
}
message LiveResult {
  repeated api.LiveUserInfo userInfos = 1;
  repeated api.LiveSkill activatedPassiveSkills = 2;
  repeated api.LiveChart charts = 3;
  int32 totalAudienceAmount = 4;
  bool cleared = 5;
  bool isDisplayDetailAvailable = 6;
  api.LiveChart preChart = 7;
  string detailLogId = 8;
}
message LiveUserDeck {
  string deckName = 1;
  repeated api.LiveDeckCard cards = 2;
  repeated api.LiveDeckCardSkill bonusSkills = 3;
}
message LiveChart {
  int32 number = 1;
  ProtoEnum.MusicChartType chartType = 2;
  ProtoEnum.AttributeType attributeType = 3;
  repeated api.LiveBeat beats = 4;
  api.LiveSkill activatedSkill = 5;
  repeated api.LiveSkill activatedPassiveSkills = 6;
  repeated api.LiveUserStatus userStatuses = 7;
  repeated api.LiveCardStatus cardStatuses = 8;
}
message LiveBeat {
  int32 order = 1;
  int32 cardIndex = 2;
  int64 score = 3;
  bool isCritical = 4;
}
message LiveSkill {
  int32 order = 1;
  int32 cardIndex = 2;
  int32 skillIndex = 3;
  bool activated = 4;
  int64 stamina = 5;
  int64 score = 6;
  bool isCritical = 7;
  repeated api.LiveSkillDetail details = 8;
  repeated api.LiveSkillFailure failures = 9;
  bool isComboBreak = 10;
  repeated api.LiveCardStatus cardStatuses = 11;
  repeated api.LiveUserStatus userStatuses = 12;
  repeated api.LiveLogDescription descriptions = 1001;
}
message LiveSkillFailure {
  int32 cardIndex = 1;
  ProtoEnum.SkillFailureType type = 2;
  repeated ProtoEnum.SkillFailureType eachFailureTypes = 3;
}
message LiveSkillDetail {
  int32 efficacyIndex = 1;
  int64 value = 2;
  ProtoEnum.StatusEffectType statusType = 3;
  repeated int32 targetCardIndexes = 4;
  int32 effectiveChartCount = 5;
  repeated api.LiveSkillDetailTargetCardInfo targetCardInfos = 6;
}
message LiveSkillDetailTargetCardInfo {
  int32 targetCardIndex = 1;
  int64 value = 2;
}
message LiveLogDescription {
  string message = 1;
}
message LiveUserStatus {
  int32 userIndex = 1;
  int32 currentComboCount = 2;
  int64 totalScore = 3;
}
message LiveCardStatus {
  int32 cardIndex = 1;
  int64 stamina = 2;
  int64 dance = 3;
  int64 vocal = 4;
  int64 visual = 5;
  repeated api.LiveCardStatusEffect effects = 6;
  repeated api.LiveSkillStatus skillStatuses = 7;
}
message LiveCardStatusEffect {
  ProtoEnum.StatusEffectType statusType = 1;
  ProtoEnum.SkillEfficacyType skillEfficacyType = 2;
  int64 value = 3;
  int32 grade = 4;
  int32 remainEffectedChartCount = 5;
  int32 maxGrade = 6;
  int64 value2 = 7;
  repeated api.LiveStatusEffectReason statusReasons = 8;
  int32 limitBreakMaxGrade = 9;
}
message LiveStatusEffectReason {
  int32 cardIndex = 1;
  int32 skillIndex = 2;
}
message LiveSkillStatus {
  int32 skillIndex = 1;
  int32 remainCount = 2;
  int32 coolTime = 3;
}
message LiveUserResult {
  int64 score = 1;
  int32 criticalCount = 2;
  int32 hitCount = 3;
  int32 missCount = 4;
  int32 maxComboCount = 5;
  repeated api.LiveCardResult cardResults = 6;
}
message PvpOpponentInfo {
  string opponentId = 1;
  string name = 2;
  int32 managerLevel = 3;
  int64 point = 4;
  int32 rank = 5;
  repeated api.LiveBattleCardInfo cardInfos = 6;
}
message GvgOpponentInfo {
  string opponentId = 1;
  string name = 2;
  int32 managerLevel = 3;
  repeated api.LiveBattleCardInfo cardInfos = 4;
}
message QuestRankPattern {
  ProtoEnum.ResultRankType rankType = 1;
  int32 plus = 2;
  int64 thresholdScore = 3;
}
message ActivityPromotionReward {
  ProtoEnum.ResourceType resourceType = 1;
  string resourceId = 2;
  int64 amount = 3;
  bool isRare = 4;
}
message AllProfileInfo {
  api.ProfileInfo profile = 1;
  api.HierarchyProfileInfo hierarchy = 2;
}
message FavoritePhotoInfo {
  string photoId = 1;
  string assetId = 2;
  ProtoEnum.PhotoImageType imageType = 3;
}
message NoticeInfo {
  string id = 1;
  string title = 2;
  string bannerAssetId = 3;
  ProtoEnum.LinkType linkType = 4;
  string linkDetail = 5;
  bool displayNotification = 6;
  int64 startTime = 7;
  string listTitle = 8;
  int64 notificationRestartTime = 9;
}
message PaidJpy {
  int32 amount = 1;
}
message FanEventRankPattern {
  ProtoEnum.ResultRankType rankType = 1;
  int32 plus = 2;
  int32 thresholdPoint = 3;
}
message ActivityLevelProgress {
  int32 maxActivityLevel = 1;
  api.ActivityLevelInfo before = 2;
  api.ActivityLevelInfo after = 3;
}
message ActivityLevelInfo {
  int32 exp = 1;
  int32 level = 2;
  bool nextLevelLocked = 3;
}
message ActivityCampaignEffect {
  ProtoEnum.ActivityCampaignEffectType type = 1;
  int32 value = 2;
  int64 endTime = 3;
}
message EventStoryEpisodeInfo {
  int32 episode = 1;
  bool unlocked = 2;
}
message ExtraStoryEpisodeInfo {
  int32 episode = 1;
  bool unlocked = 2;
}
message EventExchangeBoothInfo {
  string id = 1;
  string name = 2;
  string bannerAssetId = 3;
  ProtoEnum.ResourceType requiredResourceType = 4;
  string requiredResourceId = 5;
}
message PvpSeasonInfo {
  string id = 1;
  string name = 2;
  int64 startTime = 3;
  int64 endTime = 4;
  int64 aggregateEndTime = 5;
  int32 challengeCount = 6;
  int64 nextStartTime = 7;
}
message CurrentGvgInfo {
  api.GvgSeasonInfo gvgSeason = 1;
  bool isRemainingChallenge = 2;
}
message GachaStampInfo {
  int32 currentSheetNumber = 1;
  int32 currentStampNumber = 2;
}
message HomeEventInfo {
  repeated api.HomeEventMissionInfo eventMissionInfos = 1;
  repeated api.HomeTourInfo tourInfos = 2;
  repeated api.HomeBacksideInfo backsideInfos = 3;
  repeated api.HomeMarathonInfo marathonInfos = 4;
  repeated api.HomePhotoContestInfo photoContestInfos = 5;
  repeated api.HomeRaceInfo raceInfos = 6;
  repeated api.HomeLadderInfo ladderInfos = 7;
  repeated api.HomeLoveEventInfo loveEventInfos = 8;
  api.HomeBirthdayInfo homeBirthdayInfo = 9;
  api.HomeDreamInfo dreamInfo = 10;
  repeated api.HomeMosaicInfo mosaicInfos = 11;
  api.HomeDiceInfo diceInfo = 12;
  api.HomeShelfInfo shelfInfo = 13;
  repeated api.HomeDutyInfo dutyInfos = 14;
  repeated api.HomeGeneralEventInfo generalEventInfos = 15;
}
message HomeBirthdayInfo {
  string bannerAssetId = 1;
  int32 order = 2;
  bool isRemainingUnwatched = 3;
  bool isRemainingReceivableReward = 4;
}
message QuestReward {
  repeated transaction.RewardResult clearRewards = 1;
  repeated transaction.RewardResult scoreRankRewards = 2;
  repeated transaction.RewardResult scoreRankAdditionalRewards = 3;
  repeated transaction.Reward musicMasteryRewards = 4;
  repeated transaction.Reward achievedRankRewards = 5;
  repeated api.QuestRewardCard rewardCards = 6;
  repeated transaction.RewardResult campaignDropRewards = 7;
}
message QuestOpponentInfo {
  string name = 1;
  int32 managerLevel = 2;
  repeated api.LiveBattleCardInfo cardInfos = 3;
}
message BoxGachaDrawResult {
  ProtoEnum.BoxGachaItemType itemType = 1;
  repeated transaction.Reward rewards = 2;
  string liveBonusId = 3;
}
message UserDeckPosition {
  int32 position = 2;
  string cardId = 3;
  string part1AccessoryId = 4;
  string part2AccessoryId = 5;
  repeated string photoIds = 6;
  string costumeId = 7;
  string buddyUserId = 8;
  string hairId = 9;
}
message LadderProgressInfo {
  repeated api.LadderStep steps = 1;
}
message LadderStep {
  int32 step = 1;
  api.LadderPanel lane1Panel = 2;
  api.LadderPanel lane2Panel = 3;
  api.LadderPanel lane3Panel = 4;
}
message FriendApplyToBuddyInfo {
  bool isActive = 1;
  bool isAlreadyOffered = 2;
}
message BirthdayAdvInfo {
  string birthdayId = 1;
  string advAssetId = 2;
}
message BirthdayRemindInfo {
  string assetId = 1;
  string description = 2;
  string linkTitle = 3;
  ProtoEnum.LinkType linkType = 4;
  string linkDetail = 5;
}
message MosaicProgressInfo {
  int64 totalConsumptionAmount = 1;
  int32 currentReceivedTotalConsumptionRewardNumber = 2;
}
message CommonResponse {
  api.UpdatedData updatedData = 1;
  api.DeletedData deletedData = 2;
}
message UpdatedData {
  transaction.User user = 1;
  repeated transaction.UserItem items = 2;
  repeated transaction.UserCard cards = 3;
  repeated transaction.UserCharacter characters = 4;
  repeated transaction.UserCostume costumes = 5;
  repeated transaction.UserAccessory accessories = 6;
  repeated transaction.UserPhoto photos = 7;
  repeated transaction.UserDeck decks = 8;
  repeated transaction.UserDeckPosition deckPositions = 9;
  repeated transaction.UserStory stories = 10;
  repeated transaction.UserPoint points = 11;
  repeated transaction.UserStaff staffs = 12;
  repeated transaction.UserMessage messages = 13;
  repeated transaction.UserTelephone telephones = 14;
  repeated transaction.UserMission missions = 15;
  transaction.UserProfile profile = 16;
  repeated transaction.UserEmblem emblems = 17;
  repeated transaction.UserCharacterMusic characterMusics = 18;
  transaction.UserBalance balance = 19;
  transaction.UserTotalCount totalCount = 20;
  repeated transaction.UserArea areas = 21;
  repeated transaction.UserQuest quests = 22;
  repeated transaction.UserGachaButton gachaButtons = 23;
  repeated transaction.UserHomeTalk homeTalks = 24;
  transaction.UserPhotoReport photoReport = 25;
  repeated transaction.UserCardSupport cardSupports = 26;
  repeated transaction.UserMessageSchedule messageSchedules = 27;
  repeated transaction.UserNotification notifications = 28;
  transaction.UserHierarchy hierarchy = 29;
  repeated transaction.UserTutorial tutorials = 30;
  repeated transaction.UserHomePosition homePositions = 31;
  repeated transaction.UserMusic musics = 32;
  repeated transaction.UserDecoration decorations = 33;
  repeated transaction.UserPhotoRecipe photoRecipes = 34;
  transaction.UserBuddy buddy = 35;
  transaction.UserInvite invite = 36;
  repeated transaction.UserHair hairs = 37;
  transaction.UserActivityFanEventProgress activityFanEventProgress = 38;
  repeated transaction.UserLove loves = 39;
  repeated transaction.UserLeagueDeckPosition leagueDeckPositions = 40;
  repeated transaction.UserDuty duties = 41;
  repeated transaction.UserDutyPoint dutyPoints = 42;
  transaction.UserCompany company = 43;
  repeated transaction.UserShowcase showcases = 44;
  transaction.UserShowcaseLike showcaseLike = 45;
  repeated transaction.UserShowcaseMusic showcaseMusics = 46;
  repeated transaction.UserShowcaseToy showcaseToys = 47;
  repeated transaction.UserShowcaseMyset showcaseMysets = 48;
  repeated transaction.UserTourArea tourAreas = 49;
  repeated transaction.UserPhotoPose photoPoses = 50;
}
message DeletedData {
  repeated transaction.UserItem items = 1;
  repeated transaction.UserAccessory accessories = 2;
  repeated transaction.UserPhoto photos = 3;
  repeated transaction.UserDeck decks = 4;
  repeated transaction.UserDeckPosition deckPositions = 5;
  repeated transaction.UserPoint points = 6;
  repeated transaction.UserMessageSchedule messageSchedules = 7;
  repeated transaction.UserStory stories = 9;
  repeated transaction.UserPhotoRecipe photoRecipes = 10;
  repeated transaction.UserLeagueDeckPosition leagueDeckPositions = 11;
  repeated transaction.UserShowcaseMyset showcaseMysets = 12;
  repeated transaction.UserTourArea tourAreas = 13;
}
message CompanyTopRequest {
  bool isSkipReportMissions = 1;
}
message CompanyListRankingResponse {
  repeated api.CompanyRankingInfo rankingInfos = 1;
  int64 selfPoint = 2;
  int32 selfRank = 3;
  api.CommonResponse commonResponse = 9999;
}
message CompanyReceiveGradeRewardsRequest {
  repeated string gradeIds = 1;
}
message CompanyReceiveGradeRewardsResponse {
  repeated transaction.RewardResult results = 1;
  api.CommonResponse commonResponse = 9999;
}
message CompanyBulkReceiveMissionRequest {
  repeated string missionIds = 1;
}
message CompanyBulkReceiveMissionResponse {
  repeated transaction.RewardResult results = 1;
  api.CommonResponse commonResponse = 9999;
}
message CompanyEnjoyCharacterTopRequest {
  string characterId = 1;
}
message CompanyEnjoyCharacterTopResponse {
  repeated api.CompanyEnjoyCharacterLevelInfo enjoyLevelInfos = 1;
  repeated api.CompanyEnjoyCharacterMissionInfo missionInfos = 2;
  int32 currentRank = 3;
  api.CommonResponse commonResponse = 9999;
}
message CompanyListEnjoyCharacterRankingRequest {
  string characterId = 1;
}
message CompanyListEnjoyCharacterRankingResponse {
  repeated api.CompanyEnjoyCharacterRankingInfo rankingInfos = 1;
  int64 selfPoint = 2;
  int32 selfRank = 3;
  api.CommonResponse commonResponse = 9999;
}
message CompanyReceiveEnjoyCharacterLevelRewardsRequest {
  string characterId = 1;
  repeated int32 levelKeys = 2;
}
message CompanyReceiveEnjoyCharacterLevelRewardsResponse {
  repeated transaction.RewardResult results = 1;
  api.CommonResponse commonResponse = 9999;
}
message CompanyUseObtainEnjoyPointItemRequest {
  string characterId = 1;
  string itemId = 2;
}
message CompanyUseObtainEnjoyPointItemResponse {
  api.CommonResponse commonResponse = 9999;
}
message CompanyBulkReceiveEnjoyRequest {
  repeated string missionIds = 1;
}
message CompanyBulkReceiveEnjoyResponse {
  repeated api.CompanyBulkReceiveEnjoyResult results = 1;
  api.CommonResponse commonResponse = 9999;
}
message CompanyBulkReceiveEnjoyCharacterLevelRewardsResponse {
  repeated api.CompanyBulkReceiveEnjoyResult results = 1;
  api.CommonResponse commonResponse = 9999;
}
message CompanyReceiveTrustLevelRewardsRequest {
  repeated int32 levelKeys = 1;
}
message CompanyReceiveTrustLevelRewardsResponse {
  repeated transaction.RewardResult results = 1;
  api.CommonResponse commonResponse = 9999;
}
message CompanyTrustMissionInfo {
  ProtoEnum.CompanyTrustMissionCategoryType categoryType = 1;
  repeated transaction.UserMission userMissions = 2;
}
message CompanyEnjoyCharacterMissionInfo {
  ProtoEnum.CompanyEnjoyCharacterMissionCategoryType categoryType = 1;
  repeated transaction.UserMission userMissions = 2;
}
message CostumeSetRequest {
  string costumeId = 1;
  string hairId = 2;
}
message CostumeSetResponse {
  api.CommonResponse commonResponse = 9999;
}
message CostumeLiveSetRequest {
  string costumeId = 1;
  string hairId = 2;
}
message CostumeLiveSetResponse {
  api.CommonResponse commonResponse = 9999;
}
message CostumeCheckRequest {
  string costumeId = 1;
}
message CostumeCheckResponse {
  api.CommonResponse commonResponse = 9999;
}
message CostumeCheckBulkRequest {
  repeated string costumeIds = 1;
  repeated string hairIds = 2;
}
message CostumeCheckBulkResponse {
  api.CommonResponse commonResponse = 9999;
}
message DeckSaveRequest {
  int32 number = 1;
  string name = 2;
  repeated transaction.UserDeckPosition userDeckPositions = 3;
  ProtoEnum.DeckEditType deckEditType = 4;
  string questId = 5;
}
message DeckSaveResponse {
  api.CommonResponse commonResponse = 9999;
}
message DeckDeleteRequest {
  int32 number = 1;
}
message DeckDeleteResponse {
  api.CommonResponse commonResponse = 9999;
}
message DeckBuddyListResponse {
  repeated api.DeckBuddyUserCardInfo friendBuddyUserCardInfos = 1;
  repeated api.DeckBuddyUserCardInfo notFriendBuddyUserCardInfos = 2;
  api.CommonResponse commonResponse = 9999;
}
message DeckBuddyUserCardInfo {
  string userId = 1;
  transaction.UserCard userCard = 2;
  string managerName = 3;
}
message DiaryGetInfosResponse {
  repeated api.DiaryInfo infos = 1;
  api.CommonResponse commonResponse = 9999;
}
message DiaryReadRequest {
  repeated string diaryIds = 1;
}
message DiaryReadResponse {
  api.CommonResponse commonResponse = 9999;
}
message DiaryInfo {
  string id = 1;
  int32 year = 2;
  int32 month = 3;
  int32 day = 4;
  string assetId = 5;
  bool isRead = 6;
}
message DiceTopResponse {
  api.DiceInfo diceInfo = 1;
  api.DiceUserInfo userInfo = 2;
  api.MosaicInfo mosaicInfo = 3;
  api.MosaicProgressInfo mosaicProgressInfo = 4;
  repeated api.DokanInfo dokanInfos = 5;
  repeated api.DiceQuestInfo questInfos = 6;
  api.CommonResponse commonResponse = 9999;
}
message DiceAreaInfo {
  string name = 1;
  repeated api.DicePanelInfo panelInfos = 2;
  string backgroundColorCode1 = 3;
  string backgroundColorCode2 = 4;
}
message DicePanelInfo {
  int32 number = 1;
  ProtoEnum.DicePanelType type = 2;
  int32 value = 3;
  api.DiceLiveBonus liveBonus = 4;
  api.DiceStoryCharacterInfo forceStoryCharacterInfo = 5;
}
message DiceUserInfo {
  int64 panelNumber = 1;
  int64 totalAreaCount = 2;
  int64 todayMovedPanelCount = 3;
  int32 stamina = 4;
  int64 staminaUpdatedTime = 5;
  repeated api.DiceItem diceItems = 6;
  repeated api.DiceLiveBonusInfo liveBonusInfos = 7;
  int64 highestScore = 8;
  int64 currentRank = 9;
  api.DicePanelProgressInfo panelProgressInfo = 10;
  api.EventStoryInfo eventStoryInfo = 11;
  string rankingColorCodeA = 12;
  string rankingColorCodeB = 13;
  int64 movedPanelCount = 14;
}
message DicePanelProgressInfo {
  repeated api.DiceShopItemInfo shopItemInfos = 1;
  api.DiceStoryInfo storyInfo = 2;
  repeated api.DiceLiveBonus liveBonuses = 3;
  bool isRestartQuest = 4;
  bool isChallengeQuest = 5;
}
message DiceItem {
  string id = 1;
  ProtoEnum.DiceItemType type = 2;
  string name = 3;
  int32 value = 4;
  string assetId = 5;
  string description = 6;
  int32 salePrice = 7;
}
message DiceMovePanelResponse {
  int32 diceRoll = 1;
  api.DiceUserInfo userInfo = 2;
  repeated transaction.RewardResult rewardResults = 3;
  repeated api.DiceQuestInfo questInfos = 4;
  api.CommonResponse commonResponse = 9999;
}
message DiceUseItemRequest {
  string diceItemId = 1;
}
message DiceUseItemResponse {
  api.DiceUserInfo userInfo = 1;
  repeated transaction.RewardResult rewardResults = 2;
  repeated api.DiceQuestInfo questInfos = 3;
  api.CommonResponse commonResponse = 9999;
}
message DiceShopItemInfo {
  int32 number = 1;
  api.DiceItem diceItem = 2;
  api.DiceLiveBonus diceLiveBonus = 3;
  int32 price = 4;
  int32 discountPermil = 5;
  bool isPurchased = 6;
}
message DiceStoryInfo {
  string name = 1;
  string backgroundAssetId = 2;
  repeated api.DiceStoryDetailInfo detailInfos = 3;
  repeated api.DiceStoryCharacterInfo characterInfos = 4;
}
message DiceStoryDetailInfo {
  int32 number = 1;
  int32 branchNumber = 2;
  string diceStoryCharacterId = 3;
  string text = 4;
  string motionAssetId = 5;
  string emoteAssetId = 6;
  string seAssetId = 7;
  repeated api.DiceStoryChoiceInfo choiceInfos = 8;
}
message DiceStoryChoiceInfo {
  string id = 1;
  int32 number = 2;
  string text = 3;
  int32 branchNumber = 4;
}
message DiceDeckInfo {
  int32 number = 1;
  repeated api.DiceDeckCardDetailInfo cardDetailInfos = 2;
  int64 deckOverallValue = 3;
}
message DiceDeckCardDetailInfo {
  int32 position = 1;
  int64 vocal = 2;
  int64 dance = 3;
  int64 visual = 4;
  int64 stamina = 5;
  int64 mental = 6;
  int64 technique = 7;
  repeated api.DiceAccessoryInfo accessoryInfos = 8;
  repeated api.DicePhotoInfo photoInfos = 9;
}
message DicePhotoInfo {
  string photoId = 1;
  int32 level = 2;
  repeated api.DicePhotoAbilityInfo abilities = 3;
}
message DiceDiscardItemRequest {
  string diceItemId = 1;
}
message DiceDiscardItemResponse {
  api.DiceUserInfo userInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message DicePurchaseItemRequest {
  int32 number = 1;
}
message DicePurchaseItemResponse {
  api.DiceUserInfo userInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message DiceLiveBonusInfo {
  api.DiceLiveBonus diceLiveBonus = 1;
  int32 amount = 2;
}
message DiceSellItemRequest {
  string diceItemId = 1;
}
message DiceSellItemResponse {
  api.DiceUserInfo userInfo = 1;
  repeated transaction.RewardResult rewardResults = 2;
  api.CommonResponse commonResponse = 9999;
}
message DiceFinishShopPanelResponse {
  api.DiceUserInfo userInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message DiceFinishStoryPanelRequest {
  repeated string selectedDiceStoryChoiceIds = 1;
}
message DiceFinishStoryPanelResponse {
  api.DiceUserInfo userInfo = 1;
  repeated api.DiceItem diceItems = 2;
  repeated api.DiceLiveBonus diceLiveBonuses = 3;
  repeated transaction.RewardResult rewardResults = 4;
  api.CommonResponse commonResponse = 9999;
}
message DiceUseStaminaRecoveryItemRequest {
  int32 amount = 1;
}
message DiceUseStaminaRecoveryItemResponse {
  api.DiceUserInfo userInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message DiceStartQuestRequest {
  ProtoEnum.DiceQuestDifficultyType difficultyType = 1;
  int32 deckNumber = 2;
  bool isSkip = 3;
}
message DiceStartQuestResponse {
  api.LiveResult result = 1;
  ProtoEnum.ResultRankType rankType = 2;
  int32 rankPlus = 3;
  repeated api.QuestRankPattern rankPatterns = 4;
  repeated transaction.RewardResult rewardResults = 5;
  int32 liveMedalBonusPermil = 6;
  api.DiceUserInfo userInfo = 7;
  api.DiceItem diceItem = 8;
  api.DiceLiveBonus diceLiveBonus = 9;
  int32 baseQuestObtainMedalAmount = 10;
  bool isUpdateHighestScore = 11;
  api.CommonResponse commonResponse = 9999;
}
message DiceStartGoalQuestRequest {
  ProtoEnum.DiceQuestDifficultyType difficultyType = 1;
  int32 deckNumber = 2;
  bool isSkip = 3;
}
message DiceStartGoalQuestResponse {
  api.LiveResult result = 1;
  ProtoEnum.ResultRankType rankType = 2;
  int32 rankPlus = 3;
  repeated api.QuestRankPattern rankPatterns = 4;
  int32 afterRank = 5;
  repeated transaction.RewardResult rewardResults = 6;
  int32 liveMedalBonusPermil = 7;
  api.DiceUserInfo userInfo = 8;
  int32 beforeRank = 9;
  int32 baseQuestObtainMedalAmount = 10;
  bool isUpdateHighestScore = 11;
  api.CommonResponse commonResponse = 9999;
}
message DiceListDeckRequest {
  ProtoEnum.DiceQuestDifficultyType difficultyType = 1;
}
message DiceListDeckResponse {
  repeated api.DiceDeckInfo deckInfos = 1;
  api.CommonResponse commonResponse = 9999;
}
message DiceChooseLiveBonusRequest {
  string diceLiveBonusId = 1;
}
message DiceChooseLiveBonusResponse {
  api.DiceUserInfo userInfo = 1;
  api.DiceAreaInfo areaInfo = 2;
  api.CommonResponse commonResponse = 9999;
}
message DiceListRankingResponse {
  repeated api.LiveRankingInfo rankingInfos = 1;
  int64 selfPoint = 2;
  int32 selfRank = 3;
  api.CommonResponse commonResponse = 9999;
}
message DiceSaveDeckRequest {
  int32 number = 1;
  string name = 2;
  repeated transaction.UserDeckPosition userDeckPositions = 3;
  ProtoEnum.DiceQuestDifficultyType difficultyType = 4;
}
message DiceSaveDeckResponse {
  api.DiceDeckInfo deckInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message DivisionListResponse {
  repeated api.DivisionInfo divisions = 1;
  ProtoEnum.DivisionCannotMoveReasonType reasonType = 2;
  api.CommonResponse commonResponse = 9999;
}
message DivisionMoveRequest {
  string divisionId = 1;
}
message DivisionMoveResponse {
  api.CommonResponse commonResponse = 9999;
}
message DokanListResponse {
  repeated api.DokanInfo dokanInfos = 1;
  api.CommonResponse commonResponse = 9999;
}
message DokanSetWatchedRequest {
  repeated string dokanIds = 1;
  repeated string skippedDokanIds = 2;
}
message DokanSetWathcedResponse {
  api.CommonResponse commonResponse = 9999;
}
message DokanOutputWatchedLogRequest {
  repeated string dokanIds = 1;
  repeated string skippedDokanIds = 2;
}
message DokanOutputWatchedLogResponse {
  api.CommonResponse commonResponse = 9999;
}
message DreamTopResponse {
  api.DreamSeasonInfo seasonInfo = 1;
  repeated api.DreamUserPhoto dreamUserPhotos = 2;
  repeated transaction.RewardResult loginRewardResults = 3;
  repeated api.DokanInfo dokanInfos = 4;
  api.NoticeInfo growthPermilNoticeInfo = 5;
  api.CommonResponse commonResponse = 9999;
}
message DreamRankInfo {
  ProtoEnum.DreamAreaRankType areaRankType = 1;
  int64 areaRankPlus = 2;
  string topColorCode = 3;
  string bottomColorCode = 4;
}
message DreamUserPhoto {
  string photoId = 1;
  int64 generatedTime = 2;
  int64 lastChallengedTime = 3;
  ProtoEnum.DreamAreaRankType areaRankType = 4;
  int64 areaRankPlus = 5;
  int32 clearQuestNumber = 6;
  int32 maxQuestNumber = 7;
  repeated api.DreamUserPhotoAbility abilities = 8;
  api.DreamAreaAttributeInfo attributeInfo = 9;
  int64 rankPoint = 10;
  bool isDisableGenerateArea = 11;
  int32 maxGrowthPermil = 12;
  int32 currentGrowthPermil = 13;
}
message DreamListMaterialPhotoRequest {
  string basePhotoId = 1;
}
message DreamListMaterialPhotoResponse {
  repeated api.DreamUserMaterialPhoto userMaterialPhotos = 1;
  api.CommonResponse commonResponse = 9999;
}
message DreamUserMaterialPhoto {
  string photoId = 1;
  ProtoEnum.DreamAreaRankType areaRankType = 2;
  int64 areaRankPlus = 3;
  int32 maxQuestNumber = 4;
  repeated api.DreamUserPhotoAbility enhancePlanAbilities = 5;
  int32 generateAreaItemConsumptionAmount = 6;
  api.DreamAreaAttributeInfo attributeInfo = 7;
  int64 rankPoint = 8;
  int32 maxGrowthPermil = 9;
}
message DreamListQuestRequest {
  string basePhotoId = 1;
}
message DreamListQuestResponse {
  repeated api.DreamQuestInfo questInfos = 1;
  int32 clearQuestNumber = 2;
  int32 maxQuestNumber = 3;
  api.CommonResponse commonResponse = 9999;
}
message DreamGenerateAreaRequest {
  string basePhotoId = 1;
  string materialPhotoId = 2;
}
message DreamGenerateAreaResponse {
  api.DreamUserPhoto dreamUserPhoto = 1;
  api.CommonResponse commonResponse = 9999;
}
message DreamStartQuestRequest {
  string basePhotoId = 1;
  int32 deckNumber = 2;
  bool isSkip = 3;
  repeated transaction.UserDeckPosition userBuddyDeckPositions = 4;
  string buddyDeckName = 5;
}
message DreamStartQuestResponse {
  api.LiveResult result = 1;
  int32 clearedQuestNumber = 2;
  int32 maxQuestNumber = 3;
  repeated transaction.Reward musicMasteryRewards = 4;
  repeated api.DreamUserPhotoAbilityChangeInfo abilityChangeInfos = 5;
  api.FriendApplyToBuddyInfo friendApplyToBuddyInfo = 6;
  repeated api.QuestRankPattern rankPatterns = 7;
  api.DreamUserPhoto dreamUserPhoto = 8;
  api.CommonResponse commonResponse = 9999;
}
message DreamSkipQuestRequest {
  string basePhotoId = 1;
  int32 deckNumber = 2;
  int32 questNumber = 3;
}
message DreamSkipQuestResponse {
  int32 clearedQuestNumber = 1;
  int32 maxQuestNumber = 2;
  repeated api.DreamSkipMusicMasteryRewardInfo skipMusicMasteryRewardInfos = 3;
  repeated api.DreamUserPhotoAbilityChangeInfo abilityChangeInfos = 4;
  api.DreamUserPhoto dreamUserPhoto = 5;
  api.CommonResponse commonResponse = 9999;
}
message DreamResetAreaRequest {
  string basePhotoId = 1;
}
message DreamResetAreaResponse {
  api.CommonResponse commonResponse = 9999;
}
message DutyTopRequest {
  string dutyId = 1;
}
message DutyExchangeRewardRequest {
  string dutyId = 1;
  int64 exchangeRewardNumber = 2;
}
message DutyExchangeRewardResponse {
  repeated transaction.RewardResult rewardResults = 1;
  api.CommonResponse commonResponse = 9999;
}
message DutyReceiveTotalObtainRewardRequest {
  string dutyId = 1;
}
message DutyReceiveTotalObtainRewardResponse {
  repeated transaction.RewardResult rewardResults = 1;
  api.CommonResponse commonResponse = 9999;
}
message DutyHomeActionInfo {
  string message = 1;
}
message ExchangeListResponse {
  repeated api.ExchangeBooth booths = 1;
  api.CommonResponse commonResponse = 9999;
}
message ExchangeExecuteRequest {
  string exchangeId = 1;
  int32 count = 2;
}
message ExchangeExecuteResponse {
  repeated transaction.RewardResult results = 1;
  api.ExchangeItem afterExchangeItem = 2;
  api.ExchangeBooth booth = 3;
  api.CommonResponse commonResponse = 9999;
}
message ExchangeTryOnRequest {
  string exchangeId = 1;
  string costumeId = 2;
  string hairId = 3;
}
message ExchangeTryOnResponse {
  api.CommonResponse commonResponse = 9999;
}
message ExerciseTopResponse {
  repeated api.ExerciseInfo exercises = 1;
  api.CommonResponse commonResponse = 9999;
}
message ExerciseSaveDeckRequest {
  string exerciseId = 1;
  repeated api.ExerciseDeckPosition positions = 2;
}
message ExerciseSaveDeckResponse {
  api.CommonResponse commonResponse = 9999;
}
message ExerciseStartRequest {
  string exerciseId = 1;
  bool isSkip = 2;
}
message ExerciseListAssetRequest {
  string exerciseId = 1;
}
message ExerciseListAssetResponse {
  repeated api.LiveCharacterAssetInfo characterAssets = 1;
  api.CommonResponse commonResponse = 9999;
}
message ForumListThreadReplyRequest {
  string threadId = 1;
  ProtoEnum.ForumListReplyRequestType requestType = 2;
  int32 replyId = 3;
}
message ForumCreateThreadRequest {
  string title = 1;
  string firstReplyContent = 2;
}
message ForumSendThreadReplyRequest {
  string threadId = 1;
  string replyContent = 2;
}
message ForumLikeReplyRequest {
  string threadId = 1;
  int32 replyId = 2;
}
message ForumDislikeReplyRequest {
  string threadId = 1;
  int32 replyId = 2;
}
message ForumBookmarkThreadRequest {
  string threadId = 1;
}
message ForumUnbookmarkThreadRequest {
  string threadId = 1;
}
message ForumBlockUserRequest {
  string userId = 1;
}
message ForumListThreadResponse {
  repeated api.ForumThreadInfo threads = 1;
  api.CommonResponse commonResponse = 9999;
}
message ForumListThreadReplyResponse {
  repeated api.ForumThreadReplyInfo threadReplies = 1;
  api.ForumThreadInfo thread = 2;
  api.CommonResponse commonResponse = 9999;
}
message ForumCreateThreadResponse {
  string threadId = 1;
  api.CommonResponse commonResponse = 9999;
}
message ForumSendThreadReplyResponse {
  api.CommonResponse commonResponse = 9999;
}
message ForumLikeReplyResponse {
  api.CommonResponse commonResponse = 9999;
}
message ForumDislikeReplyResponse {
  api.CommonResponse commonResponse = 9999;
}
message ForumBookmarkThreadResponse {
  api.CommonResponse commonResponse = 9999;
}
message ForumUnbookmarkThreadResponse {
  api.CommonResponse commonResponse = 9999;
}
message ForumBlockUserResponse {
  api.CommonResponse commonResponse = 9999;
}
message ForumThreadInfo {
  string id = 1;
  string title = 2;
  int32 replyCount = 3;
  bool isBookmarked = 4;
  int64 lastUpdatedTime = 5;
  int32 power = 6;
}
message ForumThreadReplyInfo {
  int32 id = 1;
  string threadId = 2;
  string userId = 3;
  string userName = 4;
  int64 repliedTime = 5;
  string content = 6;
  int32 likeCount = 7;
  bool isLiked = 8;
  bool isBlocked = 9;
  bool isDeleted = 10;
}
message FriendListResponse {
  repeated api.ProfileInfo profiles = 1;
  api.CommonResponse commonResponse = 9999;
}
message FriendDeleteRequest {
  repeated string userIds = 1;
}
message FriendDeleteResponse {
  api.CommonResponse commonResponse = 9999;
}
message FriendApplyRequest {
  string userId = 1;
}
message FriendApplyResponse {
  bool isTargetOfferedLimit = 1;
  bool isAlreadyFriend = 2;
  bool isAlreadyOffering = 3;
  bool isAlreadyOffered = 4;
  bool isAccountBan = 5;
  bool applied = 6;
  bool isAccountDeleted = 7;
  api.CommonResponse commonResponse = 9999;
}
message FriendApproveRequest {
  string userId = 1;
}
message FriendApproveResponse {
  bool isFriendLimit = 1;
  bool isTargetFriendLimit = 2;
  bool isOfferDeleted = 3;
  bool isAccountBan = 4;
  bool approved = 5;
  bool isAccountDeleted = 6;
  api.CommonResponse commonResponse = 9999;
}
message FriendCancelRequest {
  string userId = 1;
}
message FriendCancelResponse {
  api.CommonResponse commonResponse = 9999;
}
message FriendCancelAllResponse {
  api.CommonResponse commonResponse = 9999;
}
message FriendRejectRequest {
  string userId = 1;
}
message FriendRejectResponse {
  bool isOfferDeleted = 1;
  api.CommonResponse commonResponse = 9999;
}
message FriendListApplyingResponse {
  repeated api.ProfileInfo profiles = 1;
  api.CommonResponse commonResponse = 9999;
}
message FriendListAppliedResponse {
  repeated api.ProfileInfo profiles = 1;
  api.CommonResponse commonResponse = 9999;
}
message FriendSearchResponse {
  repeated api.ProfileInfo profiles = 1;
  api.CommonResponse commonResponse = 9999;
}
message GachaListResponse {
  repeated api.GachaInfo gachas = 1;
  api.CommonResponse commonResponse = 9999;
}
message GachaDrawRequest {
  string gachaButtonId = 1;
  int32 execCount = 2;
}
message GachaDrawResponse {
  api.GachaButtonInfo button = 1;
  repeated transaction.Reward rewards = 2;
  repeated transaction.ConsumptionResult consumptionResults = 3;
  repeated transaction.RewardResult rewardResults = 4;
  repeated transaction.RewardResult drawRewardResults = 5;
  repeated transaction.Reward bonusRewards = 6;
  api.GachaMovie gachaMovie = 9;
  repeated transaction.Reward cardRewards = 10;
  api.GachaContinuousResult continuousResult = 11;
  api.GachaStampInfo stampInfo = 12;
  repeated transaction.Reward stampRewards = 13;
  repeated transaction.Reward pickupRewards = 14;
  api.CommonResponse commonResponse = 9999;
}
message GachaExchangeRequest {
  string gachaExchangeId = 1;
  int32 count = 2;
}
message GachaExchangeResponse {
  api.GachaExchangeInfo exchange = 1;
  repeated transaction.RewardResult rewardResults = 2;
  repeated transaction.ConsumptionResult consumptionResults = 3;
  api.CommonResponse commonResponse = 9999;
}
message GachaProbabilityRequest {
  string gachaId = 1;
}
message GachaProbabilityResponse {
  repeated api.RarityProbabilityInfo rarityProbabilityInfos = 1;
  repeated api.FixProbabilityInfo fixProbabilityInfos = 2;
  repeated api.ProbabilityInfo probabilityInfos = 3;
  api.CommonResponse commonResponse = 9999;
}
message GachaHistoryRequest {
  ProtoEnum.GachaType gachaType = 1;
}
message GachaHistoryResponse {
  repeated api.GachaHistory histories = 1;
  api.CommonResponse commonResponse = 9999;
}
message GachaSelectCardRequest {
  string gachaId = 1;
  repeated string selectedCardIds = 2;
}
message GachaSelectCardResponse {
  api.CommonResponse commonResponse = 9999;
}
message GachaReceiveFreePremiumGachaTicketRequest {
  string gachaId = 1;
}
message GachaReceiveFreePremiumGachaTicketResponse {
  repeated transaction.RewardResult rewardResults = 1;
  api.CommonResponse commonResponse = 9999;
}
message RarityProbabilityInfo {
  int32 rarity = 1;
  int32 probability = 2;
  repeated api.ProbabilityInfo probabilityInfos = 3;
  ProtoEnum.GachaRewardPatternType gachaRewardPatternType = 4;
  int32 individualProbability = 5;
}
message FixProbabilityInfo {
  string gachaButtonId = 1;
  repeated api.RarityProbabilityInfo rarityProbabilityInfos = 2;
}
message ProbabilityInfo {
  ProtoEnum.ResourceType resourceType = 1;
  string resourceId = 2;
  int64 amount = 3;
  int32 probability = 4;
  bool isRatioUp = 5;
}
message GachaAnimation {
  string id = 1;
  ProtoEnum.GachaAnimationEmbeddedType embeddedType = 2;
  string assetId = 3;
}
message GachaMovie {
  string assetId = 1;
  string bgmAssetId = 2;
  bool isForce = 3;
}
message GiftListRequest {
  int32 offset = 1;
  ProtoEnum.GiftSortType sortType = 3;
  repeated ProtoEnum.GiftFilterType filters = 4;
  bool desc = 5;
}
message GiftListResponse {
  repeated transaction.UserGift gifts = 1;
  bool hasNext = 2;
  int32 count = 3;
  api.CommonResponse commonResponse = 9999;
}
message GiftCountRequest {
  repeated ProtoEnum.GiftFilterType filters = 1;
}
message GiftCountResponse {
  int32 count = 1;
  api.CommonResponse commonResponse = 9999;
}
message GiftReceiveRequest {
  repeated string giftIds = 1;
}
message GiftReceiveResponse {
  repeated transaction.RewardResult results = 1;
  bool hasUnreceivedGift = 2;
  repeated string receivedGiftIds = 3;
  repeated string unreceivedGiftIds = 4;
  api.HierarchyChangeInfo hierarchyChangeInfo = 5;
  api.CommonResponse commonResponse = 9999;
}
message GiftHistoryListResponse {
  repeated transaction.UserGiftHistory gifts = 1;
  api.CommonResponse commonResponse = 9999;
}
message GppReceiveRewardRequest {
  string productId = 1;
  string receipt = 2;
  string signature = 3;
}
message GppReceiveRewardResponse {
  repeated transaction.Reward rewards = 1;
  api.CommonResponse commonResponse = 9999;
}
message GuildListResponse {
  repeated api.GuildParam guilds = 1;
  api.CommonResponse commonResponse = 9999;
}
message GuildGvgSeasonResult {
  int32 seasonRank = 1;
  int32 seasonWinCount = 2;
  int32 seasonLoseCount = 3;
  int32 seasonDrawCount = 4;
  int64 seasonTotalPoint = 5;
}
message GuildTopResponse {
  int32 rewardGuildMedalAmount = 1;
  api.GuildGvgSeasonInfo gvgSeasonInfo = 2;
  string exchangeBoothId = 3;
  api.CommonResponse commonResponse = 9999;
}
message GuildGvgRankInfo {
  string name = 1;
  int64 point = 2;
  int32 rank = 3;
}
message GuildJoinRequest {
  string guildId = 1;
  bool isRecommended = 2;
}
message GuildJoinResponse {
  api.CommonResponse commonResponse = 9999;
}
message GvgTopResponse {
  api.GvgTopInfo topResult = 1;
  api.CommonResponse commonResponse = 9999;
}
message GvgTopInfo {
  api.GvgSeasonInfo gvgSeason = 1;
  api.GvgCurrentSeasonMatchInfo currentMatch = 2;
  repeated api.GvgSeasonMatchInfo seasonMatches = 3;
  repeated api.GvgRankingRewardInfo rankingRewards = 4;
  repeated api.GvgGuildRankingRewardInfo guildRankingRewards = 5;
  api.LiveBattleQuestInfo gvgQuest = 6;
  api.UserGvgSeasonInfo userGvgSeason = 7;
}
message UserGvgSeasonInfo {
  repeated int64 points = 1;
  int64 totalPoint = 2;
  int32 rankRatePercent = 3;
  int32 rank = 4;
  int64 guildPoint = 5;
  int32 guildRank = 6;
  bool hasChallenged = 7;
  int32 winCount = 8;
  int32 loseCount = 9;
  int32 drawCount = 10;
  bool isCurrentMatchWin = 11;
}
message GvgListOpponentRequest {
  string gvgSeasonId = 1;
}
message GvgListOpponentResponse {
  repeated api.GvgOpponentInfo opponentInfos = 1;
  api.CommonResponse commonResponse = 9999;
}
message GvgListRankingRequest {
  string gvgSeasonId = 1;
}
message GvgListRankingResponse {
  repeated api.LiveRankingInfo rankingInfos = 1;
  int64 selfPoint = 2;
  int32 selfRank = 3;
  api.CommonResponse commonResponse = 9999;
}
message GvgStartRequest {
  string gvgSeasonId = 1;
  string opponentId = 2;
  int32 deckNumber = 3;
  bool isSkip = 5;
  int32 matchNumber = 6;
  ProtoEnum.GvgChallengeConsumptionType challengeConsumptionType = 7;
}
message GvgStartResponse {
  api.LiveResult result = 1;
  int64 point = 2;
  int64 addPoint = 3;
  int32 rank = 4;
  repeated transaction.Reward musicMasteryRewards = 5;
  repeated transaction.RewardResult challengeRewards = 6;
  int64 guildPoint = 7;
  int64 addGuildPoint = 8;
  int64 totalPoint = 9;
  api.AllProfileInfo profile = 10;
  api.AllProfileInfo opponentProfile = 11;
  repeated transaction.RewardResult winRewards = 12;
  api.CommonResponse commonResponse = 9999;
}
message GvgListAssetRequest {
  string gvgSeasonId = 1;
  string opponentId = 2;
  int32 deckNumber = 3;
  int32 matchNumber = 4;
}
message GvgListAssetResponse {
  repeated api.LiveCharacterAssetInfo characterAssets = 1;
  repeated api.LiveCharacterAssetInfo opponentCharacterAssets = 2;
  api.CommonResponse commonResponse = 9999;
}
message HairCheckRequest {
  string hairId = 1;
}
message HairCheckResponse {
  api.CommonResponse commonResponse = 9999;
}
message HealthCheckRequest {
  string service = 1;
}
message HealthCheckResponse {
}
message HierarchyRewardsReceiveRequest {
  repeated string hierarchyRewardIds = 1;
}
message HierarchyDivisionRewardsReceiveRequest {
  repeated string hierarchyDivisionRewardIds = 1;
}
message HierarchyTopResponse {
  api.UserHierarchyInfo userHierarchyInfo = 1;
  repeated api.HierarchyRewardInfo rewardInfos = 2;
  repeated api.HierarchyDivisionRewardInfo divisionRewardInfos = 3;
  repeated string highestGradeUserNames = 4;
  api.CommonResponse commonResponse = 9999;
}
message HierarchyRankingResponse {
  repeated api.HierarchyRankUserInfo rankUserInfos = 1;
  api.CommonResponse commonResponse = 9999;
}
message HierarchyRewardsReceiveResponse {
  repeated transaction.RewardResult results = 1;
  api.CommonResponse commonResponse = 9999;
}
message HierarchyDivisionRewardsReceiveResponse {
  repeated transaction.RewardResult results = 1;
  api.CommonResponse commonResponse = 9999;
}
message HomeEnterRequest {
  bool skipUpdate = 1;
}
message NotiShopItem {
  string shopId = 1;
  repeated string shopItemIds = 2;
}
message SpecialHomeActionDetail {
  string motionAssetId = 1;
  string additionMotionAssetId = 2;
  string voiceAssetId = 3;
  string text = 4;
  int32 weight = 5;
}
message RouletteInfo {
  bool isRouletteFreeDraw = 1;
}
message CompanyInfo {
  bool isReceivableRewards = 1;
  bool isReceivableEnjoyRewards = 2;
}
message HomeLoginRequest {
  api.SettingInfo settingInfo = 1;
}
message SettingInfo {
  int32 soundBgm = 1;
  int32 soundEffect = 2;
  int32 soundVoice = 3;
  ProtoEnum.GraphicType graphicType = 4;
  int32 frameRate = 5;
  bool activityFinishNotification = 6;
  bool messageNotification = 7;
  bool nightMode = 8;
  bool notLoginNotification = 9;
  int32 appCapacityLimit = 10;
}
message HomeLoginResponse {
  api.PaidJpy paidJpy = 1;
  repeated api.PurchasedLoginBonusShopInfo purchasedLoginBonusShopInfos = 2;
  api.BirthdayAdvInfo birthdayAdvInfo = 3;
  api.BirthdayRemindInfo birthdayRemindInfo = 4;
  api.CommonResponse commonResponse = 9999;
}
message HomeReadTalkRequest {
  string homeTalkId = 1;
}
message HomeReadTalkResponse {
  bool isReliabilityUp = 1;
  api.CommonResponse commonResponse = 9999;
}
message HomeSetReviewResponse {
  api.CommonResponse commonResponse = 9999;
}
message HomeSetCharacterPositionRequest {
  repeated api.HomeCharacterPosition positions = 1;
}
message HomeCharacterPosition {
  ProtoEnum.HomePositionType type = 1;
  string characterId = 2;
  bool isCharacterRandom = 3;
  bool isCostumeRandom = 4;
}
message HomeSetCharacterPositionResponse {
  api.CommonResponse commonResponse = 9999;
}
message HomePvpInfo {
  int32 remainingChallengeCount = 2;
  api.PvpSeasonInfo latestPvpSeason = 4;
}
message HomeLeagueInfo {
  int64 nextBattleStartTime = 1;
  int64 battleEndTime = 2;
  int64 nextSeasonStartTime = 3;
  ProtoEnum.LeagueStatusType statusType = 4;
  bool isNewsUnread = 5;
  bool isNewSeasonNotJoined = 6;
  bool isRemainingImperfectDeck = 7;
  repeated api.HomeLeagueDeckInfo deckInfos = 8;
}
message HomeLeagueDeckInfo {
  string seasonId = 1;
  ProtoEnum.LeagueDeckType deckType = 2;
  repeated transaction.UserDeckPosition deckPositions = 3;
}
message PvpRewardResultInfo {
  string name = 1;
  int64 point = 2;
  int64 rank = 3;
  repeated transaction.Reward rankingRewards = 4;
  api.HierarchyChangeInfo hierarchyChangeInfo = 5;
}
message GvgRewardResultInfo {
  string name = 1;
  int64 point = 2;
  int32 rank = 3;
  int32 rankRate = 4;
  int32 guildRank = 5;
  repeated transaction.Reward rankingRewards = 6;
  repeated transaction.Reward guildRankingRewards = 7;
  api.HierarchyChangeInfo hierarchyChangeInfo = 8;
}
message TourRewardResultInfo {
  string name = 1;
  int64 score = 2;
  int32 rank = 3;
  repeated transaction.Reward rankingRewards = 4;
}
message BacksideRewardResultInfo {
  string name = 1;
  int64 score = 2;
  int32 rank = 3;
  repeated transaction.Reward rankingRewards = 4;
}
message PhotoContestRewardResultInfo {
  string name = 1;
  int64 score = 2;
  int32 rank = 3;
  repeated transaction.Reward rankingRewards = 4;
}
message RaceRewardResultInfo {
  string name = 1;
  int64 score = 2;
  int32 rank = 3;
  repeated transaction.Reward rankingRewards = 4;
}
message RaceDailyRewardResultInfo {
  int64 score = 1;
  int32 rank = 2;
  repeated transaction.Reward rankingRewards = 3;
  repeated api.RaceDailyRankingUserInfo rankingUserInfos = 4;
  int32 days = 5;
}
message BuddyUsedRewardResultInfo {
  int64 usedCount = 1;
  repeated transaction.Reward rewards = 2;
}
message HomeActiveFanEvent {
  repeated string characterIds = 1;
  int64 finishTime = 2;
  int32 activityPoint = 3;
  ProtoEnum.ResultRankType rankType = 4;
  int32 rankPlus = 5;
  int32 currentCheerPoint = 6;
}
message HomeActivePromotion {
  repeated string characterIds = 1;
  int64 finishTime = 2;
  int32 rewardGoldAmount = 3;
  int32 rewardCardEnhanceItemAmount = 4;
  repeated api.ActivityPromotionReward rewards = 5;
  bool hasMoreRewards = 6;
}
message HomeActiveRefresh {
  repeated string characterIds = 1;
  int64 finishTime = 2;
}
message FunctionMaintenanceInfo {
  ProtoEnum.FunctionMaintenanceType type = 1;
  repeated string targetIds = 2;
  bool isTwitter = 3;
  string websiteUrl = 4;
}
message BannerInfo {
  repeated api.Banner menuBanners = 1;
  repeated api.Banner messageBanners = 2;
  repeated api.Banner boardBanners = 3;
  repeated api.Banner questBanners = 4;
  repeated api.Banner inviteBanners = 5;
  repeated api.Banner exerciseBanners = 6;
  repeated api.Banner specialPhotoShootingQuestBanners = 7;
  repeated api.Banner specialPhotoShootingActivityBanners = 8;
}
message FanEventInfo {
  repeated api.FanEvent fanEvents = 1;
  api.ActiveFanEvent activeFanEvent = 2;
  repeated api.ActivityCampaignEffect campaignEffects = 3;
}
message PromotionInfo {
  repeated api.Promotion promotions = 1;
  api.ActivePromotion activePromotion = 2;
  repeated api.ActivityCampaignEffect campaignEffects = 3;
}
message RefreshInfo {
  repeated api.Refresh refreshes = 1;
  api.ActiveRefresh activeRefresh = 2;
  repeated api.ActivityCampaignEffect campaignEffects = 3;
}
message PurchasedLoginBonusShopInfo {
  api.ShopInfo shopInfo = 1;
  api.LoginBonusPackageItem loginBonusPackageItem = 2;
}
message PurchasedConditionRewardShopInfo {
  api.ShopInfo shopInfo = 1;
  api.ConditionRewardPackageItem conditionRewardPackageItem = 2;
}
message LeagueRewardResultInfo {
  string leagueSeasonName = 1;
  string leagueGradeName = 2;
  ProtoEnum.LeagueSeasonResultType seasonResultType = 3;
  int32 rank = 4;
  int64 point = 5;
  int32 winCount = 6;
  int32 loseCount = 7;
  repeated transaction.Reward rewards = 8;
  string highestLeagueGradeName = 9;
}
message DiceRewardResultInfo {
  int64 score = 1;
  int32 rank = 2;
  repeated transaction.Reward rewardResults = 3;
  int64 totalAreaCount = 4;
  int64 totalMovedPanelCount = 5;
}
message ShowcaseLikedRewardResultInfo {
  int64 likedCount = 1;
  repeated transaction.Reward rewards = 2;
}
message HomeSatelliteInfo {
  string id = 1;
  string description = 2;
  string buttonText = 3;
  int64 startTime = 4;
  int64 endTime = 5;
  string buttonLabel = 6;
  bool isGeneratedCode = 7;
  string websiteUrl = 8;
}
message InviteTopResponse {
  string inviteCode = 1;
  repeated api.InviteGuestInfo guestInfos = 2;
  api.NoticeInfo noticeInfo = 3;
  int64 receivedHostRewardTotalAmount = 4;
  string exchangeBoothId = 5;
  api.CommonResponse commonResponse = 9999;
}
message InviteReceiveHostRewardsRequest {
  repeated string userIds = 1;
}
message InviteReceiveHostRewardsResponse {
  repeated transaction.RewardResult results = 1;
  api.CommonResponse commonResponse = 9999;
}
message InviteEnterCodeRequest {
  string inviteCode = 1;
}
message InviteEnterCodeResponse {
  api.CommonResponse commonResponse = 9999;
}
message ItemSellRequest {
  string itemId = 1;
  int64 amount = 2;
}
message ItemSellResponse {
  api.CommonResponse commonResponse = 9999;
}
message LadderTopRequest {
  string ladderId = 1;
}
message LadderTopResponse {
  api.LadderInfo ladderInfo = 1;
  api.LadderProgressInfo progressInfo = 2;
  repeated api.DokanInfo dokanInfos = 3;
  api.CommonResponse commonResponse = 9999;
}
message LadderPanelReachRequest {
  string ladderId = 1;
  int32 step = 2;
  int32 lane = 3;
}
message LadderPanelReachResponse {
  repeated transaction.RewardResult rewardResults = 1;
  api.LadderProgressInfo progressInfo = 2;
  int32 reachablePanelCount = 3;
  api.CommonResponse commonResponse = 9999;
}
message LeagueTopResponse {
  api.LeagueSeasonInfo seasonInfo = 1;
  api.LeagueNewsInfo newsInfo = 2;
  api.LeagueSeasonResultInfo seasonResultInfo = 3;
  repeated api.LeagueDailyResultInfo dailyResultInfos = 4;
  repeated api.LeagueSeasonCardResultInfo seasonCardResultInfos = 5;
  repeated api.LeagueDeckInfo deckInfos = 6;
  repeated api.LeagueDeckHistoryInfo deckHistoryInfos = 7;
  api.LeagueRankExistInfo rankExistInfo = 8;
  api.CommonResponse commonResponse = 9999;
}
message LeagueSeasonInfo {
  string id = 1;
  string name = 2;
  int64 endTime = 3;
  api.LiveBattleQuestInfo deckABattleQuestInfo = 4;
  api.LiveBattleQuestInfo deckBBattleQuestInfo = 5;
  api.LiveBattleQuestInfo nextSeasonDeckABattleQuestInfo = 6;
  api.LiveBattleQuestInfo nextSeasonDeckBBattleQuestInfo = 7;
  api.LeagueSeasonRewardInfo rewardInfo = 8;
  int64 nextBattleStartTime = 9;
  int32 skillActivationRateValidJoinCount = 10;
  string nextId = 11;
  string preId = 12;
}
message LeagueSeasonResultInfo {
  string leagueGradeName = 1;
  int64 point = 2;
  int32 rank = 3;
  int32 winCount = 4;
  int32 loseCount = 5;
  ProtoEnum.LeagueSeasonResultType seasonResultType = 6;
  int64 upgradeRankThreshold = 7;
  string upgradeLeagueGradeName = 8;
  int64 downgradeRankThreshold = 9;
  string downgradeLeagueGradeName = 10;
  string highestLeagueGradeName = 11;
  string lowestLeagueGradeName = 12;
  int32 memberAmount = 13;
}
message LeagueSeasonCardResultInfo {
  api.LeagueCardInfo cardInfo = 1;
  int64 highestScore = 2;
  int32 skillActivationRatePermil = 3;
  int32 mvpCount = 4;
  int32 highestScoreCardRank = 5;
  int32 skillActivationRateCardRank = 6;
  int32 mvpCountCardRank = 7;
  int32 highestScoreLeagueRank = 8;
  int32 skillActivationRateLeagueRank = 9;
  int32 mvpCountLeagueRank = 10;
  int32 joinCount = 11;
}
message LeagueGetDailyDetailRequest {
  string seasonId = 1;
  int64 date = 2;
}
message LeagueGetDailyDetailResponse {
  repeated api.LiveCardInfo deckACards = 1;
  repeated api.LiveCardInfo deckBCards = 2;
  repeated api.LeagueBattleResultInfo battleResultInfos = 3;
  int32 winCount = 4;
  int32 loseCount = 5;
  int64 point = 6;
  int32 rank = 7;
  api.CommonResponse commonResponse = 9999;
}
message LeagueBattleResultInfo {
  string opponentUserId = 1;
  string opponentUserName = 2;
  repeated api.LiveCardInfo opponentDeckACards = 3;
  int64 deckASelfScore = 4;
  int64 deckAOpponentScore = 5;
  repeated api.LiveCardInfo opponentDeckBCards = 6;
  int64 deckBSelfScore = 7;
  int64 deckBOpponentScore = 8;
}
message LeagueOpponentInfo {
  string userId = 1;
  string name = 2;
  repeated api.LiveCardInfo deckACards = 3;
  repeated api.LiveCardInfo deckBCards = 4;
}
message LeagueGetLiveResultRequest {
  string seasonId = 1;
  int64 date = 2;
  string userId = 3;
  ProtoEnum.LeagueDeckType deckType = 4;
  bool isDetail = 5;
}
message LeagueGetLiveResultResponse {
  api.LiveResult result = 1;
  api.CommonResponse commonResponse = 9999;
}
message LeagueSaveDeckRequest {
  string seasonId = 1;
  ProtoEnum.LeagueDeckType deckType = 2;
  repeated transaction.UserDeckPosition deckPositions = 3;
  ProtoEnum.DeckEditType deckEditType = 4;
}
message LeagueSaveDeckResponse {
  repeated transaction.UserDeckPosition deckPositions = 1;
  api.CommonResponse commonResponse = 9999;
}
message LeagueDeckInfo {
  string seasonId = 1;
  ProtoEnum.LeagueDeckType deckType = 2;
  repeated transaction.UserDeckPosition deckPositions = 3;
  int32 winCount = 4;
  int32 loseCount = 5;
  int32 consecutiveWinCount = 6;
}
message LeagueDeckHistoryInfo {
  int64 date = 1;
  repeated api.LiveCardInfo deckACards = 2;
  int32 deckAWinCount = 3;
  int32 deckALoseCount = 4;
  repeated api.LiveCardInfo deckBCards = 5;
  int32 deckBWinCount = 6;
  int32 deckBLoseCount = 7;
}
message LeagueGetLastSeasonResultResponse {
  string seasonName = 1;
  api.LeagueSeasonResultInfo seasonResultInfo = 2;
  repeated api.LeagueDailyResultInfo dailyResultInfos = 3;
  repeated api.LeagueSeasonCardResultInfo seasonCardResultInfos = 4;
  int32 skillActivationRateValidJoinCount = 5;
  api.LeagueRankExistInfo rankExistInfo = 6;
  api.CommonResponse commonResponse = 9999;
}
message LeagueListPointRankingRequest {
  string seasonId = 1;
}
message LeagueListPointRankingResponse {
  repeated api.LeaguePointRanking rankings = 1;
  api.CommonResponse commonResponse = 9999;
}
message LeagueListCardHighestScoreRankingRequest {
  string seasonId = 1;
}
message LeagueListCardHighestScoreRankingResponse {
  repeated api.LeagueCardRanking rankings = 1;
  api.CommonResponse commonResponse = 9999;
}
message LeagueListCardSkillRateRankingRequest {
  string seasonId = 1;
}
message LeagueListCardSkillRateRankingResponse {
  repeated api.LeagueCardRanking rankings = 1;
  api.CommonResponse commonResponse = 9999;
}
message LeagueListCardMvpRankingRequest {
  string seasonId = 1;
}
message LeagueListCardMvpRankingResponse {
  repeated api.LeagueCardRanking rankings = 1;
  api.CommonResponse commonResponse = 9999;
}
message LeagueRankExistInfo {
  bool isPointExist = 1;
  repeated api.LeagueCardRankExistInfo cardRankExistInfos = 2;
}
message LeagueCardRankExistInfo {
  ProtoEnum.LeagueSeasonCardResultType resultType = 1;
  bool isExist = 2;
}
message LoginBonusListResponse {
  repeated api.LoginBonusInfo infos = 1;
  api.CommonResponse commonResponse = 9999;
}
message LoginBonusReceiveRequest {
  string loginBonusId = 1;
}
message LoginBonusReceiveResponse {
  transaction.UserLoginBonus userLoginBonus = 1;
  repeated transaction.RewardResult rewards = 2;
  api.CommonResponse commonResponse = 9999;
}
message LoginBonusInfo {
  transaction.UserLoginBonus userLoginBonus = 1;
  api.NoticeInfo noticeInfo = 2;
}
message LoveTitleResponse {
  repeated api.LoveInfo loveInfos = 1;
  api.CommonResponse commonResponse = 9999;
}
message LoveTitleExtraRequest {
  string loveId = 1;
}
message LoveTitleExtraResponse {
  api.LoveInfo loveInfo = 1;
  string titleAssetId = 2;
  api.CommonResponse commonResponse = 9999;
}
message LoveStoryEndInfo {
  string id = 1;
  string name = 2;
  bool unlocked = 3;
}
message LoveRegisterRequest {
  string loveId = 1;
  string name = 2;
}
message LoveRegisterResponse {
  api.CommonResponse commonResponse = 9999;
}
message LoveTopRequest {
  string loveId = 1;
}
message LoveSaveInfo {
  bool unlocked = 1;
  repeated api.LoveSaveDataInfo saveDataInfos = 2;
}
message LoveLessonProgress {
  int64 lastReceiveTime = 1;
  int64 maxRewardTime = 2;
}
message LoveLevelInfo {
  int32 level = 1;
  int32 unlockStoryEpisode = 2;
  ProtoEnum.LoveHintType unlockLoveHintType = 3;
  bool isTextViewable = 4;
}
message LoveStartRequest {
  string storyEpisodeId = 1;
  int32 hintLevel = 2;
}
message LoveStartResponse {
  repeated api.LoveStoryChoiceGroupInfo storyChoiceGroupInfos = 1;
  repeated api.LoveAdvBranchInfo advBranchInfos = 2;
  api.CommonResponse commonResponse = 9999;
}
message LoveRestartRequest {
  string storyEpisodeId = 1;
  int32 hintLevel = 2;
}
message LoveRestartResponse {
  repeated api.LoveStoryChoiceGroupInfo storyChoiceGroupInfos = 1;
  repeated api.LoveAdvBranchInfo advBranchInfos = 2;
  api.CommonResponse commonResponse = 9999;
}
message LoveStoryChoiceGroupInfo {
  int32 groupIndex = 1;
  repeated api.LoveStoryChoiceInfo storyChoiceInfos = 2;
  bool existsObtainableFavorabilityDifference = 3;
}
message LoveStoryChoiceInfo {
  int32 index = 1;
  bool isBestObtainableFavorability = 2;
  bool isPastSelected = 3;
}
message LoveAdvBranchInfo {
  int32 groupIndex = 1;
  int32 index = 2;
}
message LoveFinishRequest {
  string storyEpisodeId = 1;
  repeated api.LoveSelectStoryChoiceInfo selectStoryChoiceInfos = 2;
  int32 hintLevel = 3;
}
message LoveSelectStoryChoiceInfo {
  int32 groupIndex = 1;
  int32 index = 2;
  bool isValid = 3;
}
message LoveFinishResponse {
  repeated transaction.RewardResult rewards = 1;
  string storyEndName = 2;
  bool unlockSave = 3;
  string endRollAssetId = 4;
  api.CommonResponse commonResponse = 9999;
}
message LoveResetReadingStoryStatusRequest {
  string loveId = 1;
}
message LoveResetReadingStoryStatusResponse {
  api.CommonResponse commonResponse = 9999;
}
message LovePresentRequest {
  string loveId = 1;
}
message LovePresentResponse {
  int64 hiddenFavorability = 1;
  api.CommonResponse commonResponse = 9999;
}
message LoveSaveRequest {
  string loveId = 1;
  int32 slotNumber = 2;
}
message LoveSaveResponse {
  api.CommonResponse commonResponse = 9999;
}
message LoveUpdateSaveNameRequest {
  string loveId = 1;
  int32 slotNumber = 2;
  string name = 3;
}
message LoveUpdateSaveNameResponse {
  api.CommonResponse commonResponse = 9999;
}
message LoveLoadRequest {
  string loveId = 1;
  int32 slotNumber = 2;
}
message LoveResetRequest {
  string loveId = 1;
}
message LoveReceiveLessonRewardRequest {
  string loveId = 1;
}
message LoveReceiveLessonRewardResponse {
  repeated transaction.Reward rewards = 1;
  int64 obtainExp = 2;
  int64 totalExp = 3;
  api.LoveLessonProgress lessonProgress = 4;
  api.CommonResponse commonResponse = 9999;
}
message LovePromoteLessonRequest {
  string loveId = 1;
}
message LovePromoteLessonResponse {
  repeated transaction.Reward rewards = 1;
  int64 obtainExp = 2;
  int64 totalExp = 3;
  api.LoveLessonProgress lessonProgress = 4;
  api.CommonResponse commonResponse = 9999;
}
message LoveUpdateNameRequest {
  string loveId = 1;
  string name = 2;
}
message LoveUpdateNameResponse {
  api.CommonResponse commonResponse = 9999;
}
message LoveGetMainCharacterRequest {
  string loveId = 1;
}
message LoveGetMainCharacterResponse {
  api.LoveMainCharacterInfo mainCharacterInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message MarathonTopRequest {
  string marathonId = 1;
}
message MarathonTopResponse {
  api.MarathonInfo marathonInfo = 1;
  api.UserMarathonInfo userMarathonInfo = 2;
  repeated api.MarathonQuestInfo questInfos = 3;
  repeated api.MarathonBoxGachaInfo boxGachaInfos = 4;
  repeated api.DokanInfo dokanInfos = 5;
  api.CommonResponse commonResponse = 9999;
}
message MarathonQuestUnlockRequest {
  string marathonQuestId = 1;
}
message MarathonQuestUnlockResponse {
  api.MarathonQuestInfo unlockedQuestInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message MarathonQuestStartRequest {
  string marathonQuestId = 1;
  int32 marathonQuestDifficultyNumber = 2;
  int32 deckNumber = 3;
  bool isSkip = 4;
  int32 execCount = 5;
  repeated transaction.UserDeckPosition userBuddyDeckPositions = 6;
  string buddyDeckName = 7;
}
message MarathonQuestListAssetRequest {
  string marathonId = 1;
  int32 deckNumber = 2;
  repeated transaction.UserDeckPosition userBuddyDeckPositions = 3;
  string buddyDeckName = 4;
}
message MarathonQuestListAssetResponse {
  repeated api.LiveCharacterAssetInfo characterAssets = 1;
  api.CommonResponse commonResponse = 9999;
}
message MarathonUseQuestStaminaRecoveryItemRequest {
  string marathonId = 1;
  int32 amount = 2;
}
message MarathonUseQuestStaminaRecoveryItemResponse {
  api.UserMarathonInfo userMarathonInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message MarathonListDeckRequest {
  string marathonId = 1;
  string marathonQuestId = 2;
  int32 marathonQuestDifficultyNumber = 3;
  repeated api.MarathonBuddyDeck marathonBuddyDecks = 4;
}
message MarathonListDeckResponse {
  repeated api.MarathonDeckInfo deckInfos = 1;
  repeated api.MarathonDeckInfo buddyDeckInfos = 2;
  api.CommonResponse commonResponse = 9999;
}
message MarathonDeckSaveRequest {
  string marathonQuestId = 1;
  int32 number = 2;
  string name = 3;
  repeated transaction.UserDeckPosition userDeckPositions = 4;
  int32 marathonQuestDifficultyNumber = 5;
}
message MarathonDeckSaveResponse {
  api.MarathonDeckInfo deckInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message MarathonBuddyDeckRequest {
  string marathonQuestId = 1;
  int32 marathonQuestDifficultyNumber = 2;
  repeated api.MarathonBuddyDeck marathonBuddyDecks = 3;
}
message MarathonBuddyDeck {
  int32 deckNumber = 1;
  string deckName = 2;
  repeated transaction.UserDeckPosition userBuddyDeckPositions = 3;
}
message MarathonBuddyDeckResponse {
  repeated api.MarathonDeckInfo buddyDeckInfos = 1;
  api.CommonResponse commonResponse = 9999;
}
message MarathonBoxGachaDrawRequest {
  string marathonId = 1;
  string boxGachaId = 2;
  int32 execCount = 3;
}
message MarathonBoxGachaDrawResponse {
  repeated api.BoxGachaDrawResult drawResults = 1;
  repeated api.BoxGachaDrawResult pickupResults = 2;
  api.CommonResponse commonResponse = 9999;
}
message MarathonBoxGachaResetRequest {
  string marathonId = 1;
  string boxGachaId = 2;
}
message MarathonBoxGachaResetResponse {
  api.MarathonBoxGachaInfo boxGachaInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message MarathonRaidListRequest {
  string marathonId = 1;
}
message MarathonRaidListResponse {
  repeated api.MarathonRaidQuestProgress joinableQuests = 1;
  repeated api.MarathonRaidQuestProgress progressingQuests = 2;
  repeated api.MarathonRaidQuestProgress finishedQuests = 3;
  int64 updateEnableTime = 4;
  api.CommonResponse commonResponse = 9999;
}
message MarathonRaidCheckProgressRequest {
  string marathonId = 1;
  string raidId = 2;
}
message MarathonRaidCheckProgressResponse {
  bool finished = 1;
  api.CommonResponse commonResponse = 9999;
}
message MarathonRaidListHistoryRequest {
  string marathonId = 1;
}
message MarathonRaidListHistoryResponse {
  repeated api.MarathonRaidQuestProgress quests = 1;
  api.CommonResponse commonResponse = 9999;
}
message MarathonRaidGetHistoryDetailRequest {
  string marathonId = 1;
  string raidId = 2;
}
message MarathonRaidGetHistoryDetailResponse {
  api.MarathonRaidResult raidResult = 1;
  api.CommonResponse commonResponse = 9999;
}
message MarathonRaidListRankingRequest {
  string marathonId = 1;
  string raidId = 2;
}
message MarathonRaidListRankingResponse {
  repeated api.MarathonRaidRankedUser rankedUsers = 1;
  int64 selfScore = 2;
  string hostUserName = 3;
  api.CommonResponse commonResponse = 9999;
}
message MarathonRaidStartRequest {
  string marathonId = 1;
  int32 difficultyNumber = 2;
  int32 deckNumber = 3;
  bool isSkip = 4;
}
message MarathonRaidJoinRequest {
  string marathonId = 1;
  string raidId = 2;
  int32 deckNumber = 3;
  bool isSkip = 4;
  int32 difficultyNumber = 5;
}
message MarathonRaidFinishRequest {
  string marathonId = 1;
  string raidId = 2;
}
message MarathonRaidFinishResponse {
  api.MarathonRaidResult raidResult = 1;
  api.CommonResponse commonResponse = 9999;
}
message MarathonUseRaidStaminaRecoveryItemRequest {
  string marathonId = 1;
  int32 amount = 2;
}
message MarathonUseRaidStaminaRecoveryItemResponse {
  api.UserMarathonInfo userMarathonInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message MarathonListRaidDeckRequest {
  string marathonId = 1;
  int32 difficultyNumber = 2;
  string raidId = 3;
}
message MarathonListRaidDeckResponse {
  repeated api.MarathonDeckInfo deckInfos = 1;
  repeated api.MarathonRaidSimpleRankedUser rankedUsers = 2;
  api.CommonResponse commonResponse = 9999;
}
message MarathonRaidDeckSaveRequest {
  string marathonId = 1;
  int32 number = 2;
  string name = 3;
  repeated transaction.UserDeckPosition userDeckPositions = 4;
  int32 difficultyNumber = 5;
}
message MarathonRaidDeckSaveResponse {
  api.MarathonDeckInfo deckInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message UserMarathonInfo {
  int32 currentStamina = 1;
  int64 staminaUpdatedTime = 2;
  repeated api.MarathonLiveBonusInfo liveBonusInfos = 3;
  int32 currentRaidStamina = 4;
  int64 raidStaminaUpdatedTime = 5;
  api.LadderProgressInfo ladderProgressInfo = 7;
  int32 progressingRaidQuestCount = 8;
  int32 finishedRaidQuestCount = 9;
  int64 nextRaidHostEnableTime = 10;
  bool isRaidHostEnable = 11;
  int32 reachableLadderPanelCount = 12;
}
message MarathonQuestDifficultyLevelInfo {
  int32 marathonQuestDifficultyNumber = 1;
  bool cleared = 2;
  ProtoEnum.ResultRankType rankType = 3;
  int32 plus = 4;
  api.QuestOpponentInfo opponentInfo = 5;
  bool unlocked = 6;
  int64 highestScore = 7;
  ProtoEnum.LiveSkipType liveSkipType = 8;
}
message MarathonDeckInfo {
  int32 number = 1;
  repeated api.MarathonDeckCardDetailInfo cardDetailInfo = 2;
  int64 deckOverallValue = 3;
}
message MarathonDeckCardDetailInfo {
  int32 position = 1;
  int64 vocal = 2;
  int64 dance = 3;
  int64 visual = 4;
  int64 stamina = 5;
  int64 mental = 6;
  int64 technique = 7;
  repeated api.MarathonAccessoryInfo accessoryInfos = 8;
  repeated api.MarathonPhotoInfo photoInfos = 9;
}
message MarathonPhotoInfo {
  string photoId = 1;
  int32 level = 2;
  repeated api.MarathonPhotoAbilityInfo abilities = 3;
}
message MarathonRaidResult {
  bool isClear = 1;
  int64 score = 2;
  int64 clearScore = 3;
  int64 totalScore = 4;
  int32 elapsedMilliSeconds = 5;
  int32 rank = 6;
  int32 joinedUserCount = 7;
  repeated transaction.RewardResult mvpRewards = 8;
  repeated api.MarathonRaidRankedUser rankedUsers = 9;
  repeated transaction.RewardResult clearRewards = 10;
}
message MarathonRaidSimpleRankedUser {
  int32 rank = 1;
  string userName = 2;
  string userId = 3;
}
message MarathonRaidQuestProgress {
  string raidId = 1;
  api.MarathonRaidHostUser hostUser = 2;
  int64 raidEndTime = 3;
  int32 joinedUserCount = 4;
  int64 clearScore = 5;
  int64 totalScore = 6;
  int32 difficultyNumber = 7;
  int32 difficultyLevel = 8;
  ProtoEnum.MarathonRaidProgressType progressType = 9;
  ProtoEnum.LiveSkipType liveSkipType = 10;
}
message MarketListItemResponse {
  repeated api.MarketItem marketItems = 1;
  int64 nextResetTime = 2;
  int32 freeResetRemainCount = 3;
  int32 resetRemainCount = 4;
  int32 requiredResetStoneAmount = 5;
  api.CommonResponse commonResponse = 9999;
}
message MarketResetRequest {
  bool isFree = 1;
}
message MarketResetResponse {
  repeated api.MarketItem marketItems = 1;
  int32 freeResetRemainCount = 2;
  int32 resetRemainCount = 3;
  int32 requiredResetStoneAmount = 4;
  api.CommonResponse commonResponse = 9999;
}
message MarketPurchaseRequest {
  int32 number = 1;
}
message MarketPurchaseResponse {
  repeated api.MarketItem marketItems = 1;
  api.CommonResponse commonResponse = 9999;
}
message MasterGetResponse {
  transaction.MasterTag masterTag = 1;
}
message MasterFaqResponse {
  repeated master.HelpCategory helpCategories = 1;
}
message MasterRuleRequest {
  ProtoEnum.RuleType ruleType = 1;
}
message MasterRuleResponse {
  string text = 1;
}
message MasterGetInquiryTemplateRequest {
  ProtoEnum.InquiryTemplateType templateType = 1;
}
message MasterGetInquiryTemplateResponse {
  string text = 1;
}
message MasterGetHelpCategoryRequest {
  ProtoEnum.HelpType helpType = 1;
}
message MasterGetHelpCategoryResponse {
  repeated master.HelpCategory helpCategories = 1;
}
message MessageListGroupResponse {
  repeated api.MessageGroupInfo infos = 1;
  api.CommonResponse commonResponse = 9999;
}
message MessageTimelineRequest {
  string messageGroupId = 1;
  int64 timelineId = 2;
}
message MessageTimelineResponse {
  repeated api.TimelineInfo infos = 1;
  bool hasNext = 2;
  api.CommonResponse commonResponse = 9999;
}
message MessageReceiveRequest {
  repeated string messageIds = 1;
}
message MessageReceiveResponse {
  api.CommonResponse commonResponse = 9999;
}
message MessageSaveRequest {
  string messageGroupId = 1;
  int64 timelineId = 2;
  string messageDetailId = 3;
  repeated string selectMessageDetailIds = 4;
}
message MessageSaveResponse {
  api.CommonResponse commonResponse = 9999;
}
message MessageFinishRequest {
  string messageGroupId = 1;
  int64 timelineId = 2;
  repeated string selectMessageDetailIds = 3;
}
message MessageFinishResponse {
  bool isReliabilityUp = 1;
  api.CommonResponse commonResponse = 9999;
}
message MessageSaveHistoryRequest {
  string messageId = 1;
  repeated string selectMessageDetailIds = 2;
}
message MessageSaveHistoryResponse {
  api.CommonResponse commonResponse = 9999;
}
message MigrationListResponse {
  bool apple = 1;
  bool google = 2;
  bool facebook = 3;
  bool twitter = 4;
  bool password = 5;
  api.CommonResponse commonResponse = 9999;
}
message MigrationExecuteRequest {
  string onetimeToken = 1;
}
message MigrationExecuteResponse {
  string token = 1;
}
message MigrationSetPasswordRequest {
  string password = 1;
}
message MigrationSetPasswordResponse {
  api.CommonResponse commonResponse = 9999;
}
message MigrationMigratePasswordRequest {
  string userId = 1;
  string password = 2;
}
message MigrationProviderAppleInfo {
  string idToken = 1;
}
message MigrationLinkAppleRequest {
  api.MigrationProviderAppleInfo info = 1;
}
message MigrationMigrateAppleRequest {
  api.MigrationProviderAppleInfo info = 1;
}
message MigrationProviderGoogleInfo {
  string idToken = 1;
}
message MigrationLinkGoogleRequest {
  api.MigrationProviderGoogleInfo info = 1;
}
message MigrationMigrateGoogleRequest {
  api.MigrationProviderGoogleInfo info = 1;
}
message RequestTwitterOAuthTokenRequest {
  string bundleId = 1;
}
message RequestTwitterOAuthTokenResponse {
  string oauthToken = 1;
}
message MigrationProviderTwitterInfo {
  string oauthToken = 1;
  string oauthVerifier = 2;
}
message MigrationLinkTwitterRequest {
  api.MigrationProviderTwitterInfo info = 1;
}
message MigrationMigrateTwitterRequest {
  api.MigrationProviderTwitterInfo info = 1;
}
message MigrationLinkResponse {
  bool success = 1;
  string linkedUserId = 2;
  transaction.User linkedUser = 3;
  string onetimeToken = 4;
  api.CommonResponse commonResponse = 9999;
}
message MigrationMigrateResponse {
  bool success = 1;
  string linkedUserId = 2;
  transaction.User linkedUser = 3;
  string onetimeToken = 4;
}
message MigrationUnlinkRequest {
  ProtoEnum.ProviderType providerType = 1;
}
message MigrationUnlinkResponse {
  api.CommonResponse commonResponse = 9999;
}
message MissionListResponse {
  repeated transaction.UserMission userMissions = 1;
  api.CommonResponse commonResponse = 9999;
}
message MissionReceiveRequest {
  repeated string missionIds = 1;
}
message MissionReceiveResponse {
  repeated transaction.RewardResult results = 1;
  api.CommonResponse commonResponse = 9999;
}
message MissionURLTransitionRequest {
  string url = 1;
}
message MissionURLTransitionResponse {
  api.CommonResponse commonResponse = 9999;
}
message MissionEventRequest {
  string eventMissionId = 1;
}
message MissionEventResponse {
  api.EventMissionInfo info = 1;
  api.CommonResponse commonResponse = 9999;
}
message MosaicTopRequest {
  string mosaicId = 1;
}
message MosaicTopResponse {
  api.MosaicInfo mosaicInfo = 1;
  api.MosaicProgressInfo progressInfo = 2;
  api.CommonResponse commonResponse = 9999;
}
message MosaicExchangeRequest {
  string mosaicId = 1;
  int32 number = 2;
  int32 count = 3;
}
message MosaicExchangeResponse {
  repeated transaction.RewardResult rewardResults = 1;
  api.MosaicProgressInfo progressInfo = 2;
  api.MosaicPanelInfo afterPanelInfo = 3;
  api.CommonResponse commonResponse = 9999;
}
message MosaicReceiveTotalConsumptionRewardRequest {
  string mosaicId = 1;
}
message MosaicReceiveTotalConsumptionRewardResponse {
  repeated transaction.RewardResult rewardResults = 1;
  api.MosaicProgressInfo progressInfo = 2;
  api.CommonResponse commonResponse = 9999;
}
message CheckOption {
  bool disableGameAuthToken = 1;
  bool disableMasterVersion = 2;
  bool enableResponseCache = 3;
  bool enableBodyHash = 4;
  bool disableCheckLoginToday = 5;
  bool disableCheckMaintenance = 6;
  bool disableCheckAppVersion = 7;
}
message ErrorOption {
  repeated ProtoEnum.ErrorCode errorCodes = 1;
}
message NoticeListResponse {
  repeated api.NoticeInfo notices = 1;
  repeated api.NoticeInfo malfunctionNotices = 2;
  repeated api.NoticeInfo prNotices = 3;
  bool noticeHasNext = 4;
  bool malfunctionNoticeHasNext = 5;
  bool prNoticeHasNext = 6;
  string roootAssociateToken = 7;
  api.CommonResponse commonResponse = 9999;
}
message NoticeFetchRequest {
  int32 noticeCategoryType = 1;
  int32 offset = 2;
}
message NoticeFetchResponse {
  repeated api.NoticeInfo notices = 1;
  bool hasNext = 2;
  string roootAssociateToken = 3;
  api.CommonResponse commonResponse = 9999;
}
message NoticeGetRequest {
  string noticeId = 1;
}
message NoticeGetResponse {
  api.NoticeInfo notice = 1;
  string roootAssociateToken = 2;
  api.CommonResponse commonResponse = 9999;
}
message PhotoSwitchLockRequest {
  repeated string photoIds = 1;
}
message PhotoSwitchLockResponse {
  api.CommonResponse commonResponse = 9999;
}
message PhotoDeleteRequest {
  repeated string photoIds = 1;
}
message PhotoDeleteResponse {
  repeated transaction.RewardResult rewardResults = 1;
  api.CommonResponse commonResponse = 9999;
}
message PhotoEnhanceRequest {
  string photoId = 1;
  int32 level = 2;
}
message PhotoEnhanceResponse {
  api.CommonResponse commonResponse = 9999;
}
message PhotoRerollRequest {
  string photoId = 1;
}
message PhotoRerollResponse {
  api.CommonResponse commonResponse = 9999;
}
message PhotoRetouchRequest {
  string photoRecipeId = 1;
  string photoId = 2;
}
message PhotoRetouchResponse {
  api.CommonResponse commonResponse = 9999;
}
message PhotoUpdateRequest {
  string photoId = 1;
  string name = 2;
}
message PhotoUpdateResponse {
  api.CommonResponse commonResponse = 9999;
}
message PhotoReportResponse {
  bool isGift = 1;
  api.CommonResponse commonResponse = 9999;
}
message PhotoGetImageUrlRequest {
  ProtoEnum.PhotoImageRequestType type = 1;
  repeated string assetIds = 2;
}
message PhotoGetImageUrlResponse {
  repeated api.PhotoImageUrl urlList = 1;
}
message PhotoImageUrl {
  string assetId = 1;
  string origUrl = 2;
  string tmbUrl = 3;
}
message PhotoCheckShootingRequest {
  ProtoEnum.PhotoShootingActionType actionType = 1;
  string photoActivityId = 2;
  string photoMusicId = 3;
  string photoStageId = 4;
  repeated string characterIds = 5;
  repeated string costumeIds = 6;
  repeated string hairIds = 7;
}
message PhotoCheckShootingResponse {
  api.CommonResponse commonResponse = 9999;
}
message PhotoCreateShootingsRequest {
  ProtoEnum.PhotoShootingActionType actionType = 1;
  string photoActivityId = 2;
  string photoMusicId = 3;
  string photoStageId = 4;
  repeated string characterIds = 5;
  repeated string costumeIds = 6;
  repeated string hairIds = 7;
  repeated api.PhotoCreateShootingParam createShootingParams = 8;
  int32 manualCount = 9;
}
message PhotoCreateShootingParam {
  string photoImageId = 1;
  string itemId = 2;
  string mainCharacterId = 3;
}
message PhotoCreateShootingsResponse {
  repeated transaction.UserPhoto photos = 1;
  bool isGift = 2;
  api.CommonResponse commonResponse = 9999;
}
message PhotoListShootingResponse {
  repeated api.PhotoActivity activities = 1;
  repeated api.PhotoMusic musics = 2;
  repeated api.PhotoStage stages = 3;
  repeated api.PhotoExpression expressions = 4;
  api.PhotoDokanInfo dokanInfo = 100;
  api.CommonResponse commonResponse = 9999;
}
message PhotoExtendLimitResponse {
  api.CommonResponse commonResponse = 9999;
}
message PhotoSaleRecipeRequest {
  repeated string photoRecipeIds = 1;
}
message PhotoSaleRecipeResponse {
  repeated transaction.RewardResult rewardResults = 1;
  api.CommonResponse commonResponse = 9999;
}
message PhotoListSpecialShootingRequest {
  string specialPhotoShootingId = 1;
}
message PhotoCheckSpecialShootingRequest {
  ProtoEnum.PhotoShootingActionType actionType = 1;
  string specialPhotoShootingId = 2;
  string musicId = 3;
  string stageId = 4;
  repeated string characterIds = 5;
  repeated string costumeIds = 6;
  repeated string hairIds = 7;
}
message PhotoCheckSpecialShootingResponse {
  api.CommonResponse commonResponse = 9999;
}
message PhotoCreateSpecialShootingsRequest {
  ProtoEnum.PhotoShootingActionType actionType = 1;
  string specialPhotoShootingId = 2;
  string musicId = 3;
  string stageId = 4;
  repeated string characterIds = 5;
  repeated string costumeIds = 6;
  repeated string hairIds = 7;
  repeated api.PhotoCreateShootingParam createShootingParams = 8;
  int32 manualCount = 9;
}
message PhotoCreateSpecialShootingsResponse {
  repeated transaction.UserPhoto photos = 1;
  bool isGift = 2;
  string snsText = 3;
  api.CommonResponse commonResponse = 9999;
}
message GetDreamBasePhotoEnhanceLevelInfosRequest {
  string basePhotoId = 1;
}
message GetDreamBasePhotoEnhanceLevelInfosResponse {
  repeated api.DreamBasePhotoEnhanceLevelInfo levelInfos = 1;
  api.CommonResponse commonResponse = 9999;
}
message DreamBasePhotoEnhanceLevelInfo {
  int32 level = 1;
  repeated api.DreamBasePhotoEnhanceLevelEffectValueInfo effectValueInfos = 2;
}
message PhotoActivateStoryEpisodeShootingRequest {
  string storyPartId = 1;
  int32 chapter = 2;
  int32 route = 3;
  int32 episode = 4;
}
message PhotoActivateStoryEpisodeShootingResponse {
  api.CommonResponse commonResponse = 9999;
}
message PhotoCheckStoryEpisodeShootingRequest {
  string storyPartId = 1;
  int32 chapter = 2;
  int32 route = 3;
  int32 episode = 4;
}
message PhotoCheckStoryEpisodeShootingResponse {
  api.CommonResponse commonResponse = 9999;
}
message PhotoCheckCardStoryShootingRequest {
  string cardId = 1;
  int32 number = 2;
}
message PhotoCheckCardStoryShootingResponse {
  api.CommonResponse commonResponse = 9999;
}
message PhotoCreateStoryEpisodeShootingsRequest {
  string storyPartId = 1;
  int32 chapter = 2;
  int32 route = 3;
  int32 episode = 4;
  repeated api.PhotoCreateShootingParam createShootingParams = 5;
  int32 manualCount = 6;
}
message PhotoCreateStoryEpisodeShootingsResponse {
  repeated transaction.UserPhoto photos = 1;
  bool isGift = 2;
  api.CommonResponse commonResponse = 9999;
}
message PhotoCreateCardStoryShootingsRequest {
  string cardId = 1;
  int32 number = 2;
  repeated api.PhotoCreateShootingParam createShootingParams = 3;
  int32 manualCount = 4;
}
message PhotoCreateCardStoryShootingsResponse {
  repeated transaction.UserPhoto photos = 1;
  bool isGift = 2;
  api.CommonResponse commonResponse = 9999;
}
message PhotoCheckExpressionShootingRequest {
  string photoExpressionId = 1;
  string characterId = 2;
  string costumeId = 3;
  string hairId = 4;
}
message PhotoCheckExpressionShootingResponse {
  api.CommonResponse commonResponse = 9999;
}
message PhotoCreateExpressionShootingsRequest {
  string photoExpressionId = 1;
  string characterId = 2;
  string costumeId = 3;
  string hairId = 4;
  repeated api.PhotoCreateExpressionShootingParam createExpressionShootingParams = 7;
  int32 manualCount = 8;
}
message PhotoCreateExpressionShootingsResponse {
  repeated transaction.UserPhoto photos = 1;
  bool isGift = 2;
  api.CommonResponse commonResponse = 9999;
}
message PhotoCreateExpressionShootingParam {
  string photoImageId = 1;
  string itemId = 2;
  int32 stagePositionNumber = 3;
  string photoPoseId = 4;
  string photoFacialId = 5;
  ProtoEnum.PhotoLookingType photoLookingType = 6;
}
message PhotoDokanInfo {
  repeated api.DokanInfo expressions = 1;
}
message PhotoContestTopRequest {
  string photoContestId = 1;
}
message PhotoContestTopResponse {
  api.PhotoContestInfo photoContestInfo = 1;
  repeated api.DokanInfo dokanInfos = 2;
  api.CommonResponse commonResponse = 9999;
}
message PhotoContestListPhotoRequest {
  string photoContestId = 1;
}
message PhotoContestListPhotoResponse {
  repeated api.PhotoContestPhotoInfo photoInfos = 1;
  api.CommonResponse commonResponse = 9999;
}
message PhotoContestRankingRequest {
  string photoContestId = 1;
}
message PhotoContestRankingResponse {
  repeated api.PhotoContestRankingInfo rankingInfos = 1;
  int64 selfPoint = 2;
  int32 selfRank = 3;
  api.CommonResponse commonResponse = 9999;
}
message PhotoContestReceiveSectionRewardsRequest {
  string photoContestId = 1;
  repeated string sectionRewardIds = 2;
  string sectionId = 3;
}
message PhotoContestReceiveSectionRewardsResponse {
  repeated transaction.RewardResult results = 1;
  api.CommonResponse commonResponse = 9999;
}
message PhotoContestCheckShootingRequest {
  string photoContestId = 1;
  ProtoEnum.PhotoShootingActionType actionType = 2;
  string photoContestActivityId = 3;
  string photoContestQuestMusicId = 4;
  string photoContestQuestStageId = 5;
  repeated string selectedCharacterIds = 6;
  repeated string selectedCostumeIds = 7;
  string sectionId = 8;
  repeated string selectedHairIds = 9;
}
message PhotoContestCheckShootingResponse {
  string nextPhotoImageId = 1;
  api.CommonResponse commonResponse = 9999;
}
message PhotoContestSubmitShootingRequest {
  string photoContestId = 1;
  string sectionId = 2;
  string itemId = 3;
  ProtoEnum.PhotoShootingActionType actionType = 4;
  string photoContestActivityId = 5;
  string photoContestQuestMusicId = 6;
  string photoContestQuestStageId = 7;
  string mainCharacterId = 8;
  repeated string characterIds = 9;
  repeated string costumeIds = 10;
  int32 elapsedMilliSeconds = 11;
  int32 sizeFullPermil = 12;
  int32 sizeUpperPermil = 13;
  int32 directionFrontPermil = 14;
  int32 directionSidePermil = 15;
  int32 positionPermil = 16;
  string shootingMotionId = 17;
  repeated string selectedCharacterIds = 18;
  repeated string selectedCostumeIds = 19;
  repeated string hairIds = 20;
  repeated string selectedHairIds = 21;
}
message PhotoContestCreateShootingRequest {
  string photoContestId = 1;
  string assetId = 2;
  string itemId = 3;
}
message PhotoContestCreateShootingResponse {
  transaction.UserPhoto photo = 1;
  bool isGift = 2;
  api.CommonResponse commonResponse = 9999;
}
message PhotoContestSectionBaseGuideInfo {
  ProtoEnum.PhotoContestBaseEvaluationType baseEvaluationType = 1;
  ProtoEnum.PhotoContestBaseGuideRankType baseGuideRankType = 2;
}
message PhotoContestSectionAdvanceGuideInfo {
  int32 number = 1;
  string description = 2;
  bool isSatisfied = 3;
}
message ProfileFindUserRequest {
  string userId = 1;
}
message ProfileUpdateNameRequest {
  string name = 1;
}
message ProfileUpdateNameResponse {
  api.CommonResponse commonResponse = 9999;
}
message ProfileUpdateMessageRequest {
  string message = 1;
}
message ProfileUpdateMessageResponse {
  api.CommonResponse commonResponse = 9999;
}
message ProfileUpdateBackgroundRequest {
  ProtoEnum.ProfileBackgroundType backgroundType = 1;
  string favoriteCardId = 2;
  string favoritePhotoId = 3;
  ProtoEnum.CardDisplayType favoriteCardDisplayType = 4;
}
message ProfileUpdateBackgroundResponse {
  api.CommonResponse commonResponse = 9999;
}
message ProfileUpdateFavoriteCharactersRequest {
  repeated string favoriteCharacterIds = 1;
}
message ProfileUpdateFavoriteCharactersResponse {
  api.CommonResponse commonResponse = 9999;
}
message ProfileUpdateDecorationRequest {
  string decorationId = 1;
}
message ProfileUpdateDecorationResponse {
  api.CommonResponse commonResponse = 9999;
}
message ProfileUpdateEmblemRequest {
  string emblemId = 1;
}
message ProfileUpdateEmblemResponse {
  api.CommonResponse commonResponse = 9999;
}
message ProfileUpdateLayoutRequest {
  ProtoEnum.ProfileLayoutType layoutType = 1;
  ProtoEnum.ProfileInformationType informationType = 2;
  ProtoEnum.ProfileColorType colorType = 3;
}
message ProfileUpdateLayoutResponse {
  api.CommonResponse commonResponse = 9999;
}
message ProfileClearTwitterMissionResponse {
  api.CommonResponse commonResponse = 9999;
}
message ProfileUpdateBuddyCardRequest {
  string cardId = 1;
}
message ProfileUpdateBuddyCardResponse {
  api.CommonResponse commonResponse = 9999;
}
message ProfileUpdateBirthdayRequest {
  int32 month = 1;
  int32 day = 2;
}
message ProfileUpdateBirthdayResponse {
  api.BirthdayAdvInfo birthdayAdvInfo = 1;
  api.BirthdayRemindInfo birthdayRemindInfo = 2;
  api.CommonResponse commonResponse = 9999;
}
message PvpTopResponse {
  api.PvpTopResultInfo topResult = 1;
  repeated api.PvpOpponentInfo opponentInfos = 2;
  api.CommonResponse commonResponse = 9999;
}
message PvpTopResultInfo {
  api.PvpSeasonInfo pvpSeason = 1;
  repeated api.PvpRewardInfo pvpRewards = 2;
  api.LiveBattleQuestInfo pvpQuest = 3;
  api.UserPvpSeasonInfo userPvpSeason = 4;
  int64 rank = 5;
  int32 pvpTicketAvailableAmount = 7;
}
message UserPvpSeasonInfo {
  int64 point = 1;
  int32 challengeCount = 2;
}
message PvpListOpponentRequest {
  string pvpSeasonId = 1;
}
message PvpListOpponentResponse {
  repeated api.PvpOpponentInfo opponentInfos = 1;
  api.CommonResponse commonResponse = 9999;
}
message PvpListRankingRequest {
  string pvpSeasonId = 1;
}
message PvpListRankingResponse {
  repeated api.LiveRankingInfo rankingInfos = 1;
  int64 selfPoint = 2;
  int32 selfRank = 3;
  api.CommonResponse commonResponse = 9999;
}
message PvpStartRequest {
  string pvpSeasonId = 1;
  string opponentId = 2;
  int32 deckNumber = 3;
  bool usePvpTicket = 4;
  bool isSkip = 5;
}
message PvpStartResponse {
  api.LiveResult result = 1;
  int64 point = 2;
  int64 addPoint = 3;
  int32 rank = 4;
  repeated transaction.Reward musicMasteryRewards = 5;
  repeated transaction.RewardResult challengeRewards = 6;
  api.AllProfileInfo profile = 7;
  api.AllProfileInfo opponentProfile = 8;
  api.CommonResponse commonResponse = 9999;
}
message PvpListAssetRequest {
  string pvpSeasonId = 1;
  string opponentId = 2;
  int32 deckNumber = 3;
}
message PvpListAssetResponse {
  repeated api.LiveCharacterAssetInfo characterAssets = 1;
  repeated api.LiveCharacterAssetInfo opponentCharacterAssets = 2;
  api.CommonResponse commonResponse = 9999;
}
message QuestListMainResponse {
  repeated api.QuestAreaGroupInfo areaGroups = 1;
  api.CommonResponse commonResponse = 9999;
}
message QuestListDailyResponse {
  repeated api.QuestAreaInfo areas = 1;
  repeated api.QuestBulkDailyInfo bulkDailyInfos = 2;
  api.CommonResponse commonResponse = 9999;
}
message QuestListContestResponse {
  api.QuestAreaInfo area = 1;
  api.CommonResponse commonResponse = 9999;
}
message QuestListTowerResponse {
  api.QuestAreaInfo area = 1;
  api.CommonResponse commonResponse = 9999;
}
message QuestStartRequest {
  string questId = 1;
  int32 deckNumber = 2;
  bool useDailyTicket = 3;
  bool isSkip = 4;
  int32 playCount = 5;
  repeated transaction.UserDeckPosition userBuddyDeckPositions = 6;
  string buddyDeckName = 7;
}
message QuestStartBulkDailyResponse {
  repeated api.QuestBulkDailyResultInfo results = 1;
  api.CommonResponse commonResponse = 9999;
}
message QuestListTowerRankingRequest {
  string areaId = 1;
}
message QuestListContestRankingRequest {
  string questId = 1;
}
message QuestListContestRankingResponse {
  int32 selfHighestRank = 1;
  int64 selfScore = 2;
  repeated api.QuestContestRankInfo ranks = 3;
  api.CommonResponse commonResponse = 9999;
}
message QuestListLatestClearRequest {
  string questId = 1;
}
message QuestListLatestClearResponse {
  repeated api.QuestClearInfo clears = 1;
  api.CommonResponse commonResponse = 9999;
}
message QuestListAssetRequest {
  string questId = 1;
  int32 deckNumber = 2;
  repeated transaction.UserDeckPosition userBuddyDeckPositions = 3;
  string buddyDeckName = 4;
}
message QuestListAssetResponse {
  repeated api.LiveCharacterAssetInfo characterAssets = 1;
  api.CommonResponse commonResponse = 9999;
}
message QuestGetLatestClearLiveResultRequest {
  string questId = 1;
  string userId = 2;
  bool isDetail = 3;
}
message QuestGetLatestClearLiveResultResponse {
  api.LiveResult result = 1;
  repeated api.QuestRankPattern rankPatterns = 2;
  api.CommonResponse commonResponse = 9999;
}
message QuestGetRankingLiveResultRequest {
  string questId = 1;
  string userId = 2;
  bool isDetail = 3;
}
message QuestGetRankingLiveResultResponse {
  api.LiveResult result = 1;
  repeated api.QuestRankPattern rankPatterns = 2;
  api.CommonResponse commonResponse = 9999;
}
message QuestTowerTopResponse {
  api.QuestTowerAreaInfo towerArea = 1;
  repeated api.QuestTowerAreaInfo subTowerAreas = 2;
  api.HierarchyNotiInfo hierarchyNotiInfo = 3;
}
message QuestTopPvpInfo {
  int32 rank = 5;
  int32 remainingChallengeCount = 6;
  api.PvpSeasonInfo latestPvpSeason = 9;
}
message OutputLiveResultDetailLogRequest {
  string liveResultDetailLogId = 1;
  bool cleared = 2;
  int64 score = 3;
}
message OutputLiveResultDetailLogResponse {
  api.CommonResponse commonResponse = 9999;
}
message RaceTopRequest {
  string raceId = 1;
}
message RaceTopResponse {
  api.RaceInfo raceInfo = 1;
  api.UserRaceInfo userRaceInfo = 2;
  repeated api.RaceLiveQuestInfo liveQuestInfos = 3;
  bool isInitialLogin = 5;
  repeated api.DokanInfo dokanInfos = 6;
  repeated api.RaceOpponentProgressInfo opponentProgressInfos = 7;
  bool isFirstLoginInDailyAggregationPeriod = 8;
  int64 nextDailyAggregationTime = 9;
  api.CommonResponse commonResponse = 9999;
}
message RaceMovePanelRequest {
  string raceId = 1;
}
message RaceMovePanelResponse {
  repeated transaction.RewardResult rewardResults = 1;
  api.UserRaceInfo userRaceInfo = 2;
  repeated api.RaceOpponentProgressInfo opponentProgressInfos = 3;
  repeated api.RaceLiveQuestInfo liveQuestInfos = 4;
  api.CommonResponse commonResponse = 9999;
}
message RaceReceiveActivityLessonRequest {
  string raceId = 1;
}
message RaceReceiveActivityLessonResponse {
  repeated transaction.Reward rewards = 1;
  api.UserRaceInfo userRaceInfo = 2;
  api.CommonResponse commonResponse = 9999;
}
message RaceEnhanceLiveBonusRequest {
  string raceId = 1;
  string liveBonusId = 2;
  int32 level = 3;
}
message RaceEnhanceLiveBonusResponse {
  api.UserRaceInfo userRaceInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message RaceResetLiveBonusRequest {
  string raceId = 1;
}
message RaceResetLiveBonusResponse {
  api.UserRaceInfo userRaceInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message RaceStartLivePanelQuestRequest {
  string raceId = 1;
  int32 deckNumber = 2;
  bool isSkip = 3;
}
message RaceStartLivePanelQuestResponse {
  api.LiveResult result = 1;
  api.UserRaceInfo userRaceInfo = 2;
  repeated api.RaceOpponentProgressInfo opponentProgressInfos = 3;
  int64 beforeScore = 4;
  repeated api.QuestRankPattern rankPatterns = 5;
  api.CommonResponse commonResponse = 9999;
}
message RaceStartLiveAreaQuestRequest {
  string raceId = 1;
  string raceQuestId = 2;
  int32 difficultyNumber = 3;
  int32 deckNumber = 4;
  bool isSkip = 5;
}
message RaceStartLiveAreaQuestResponse {
  api.LiveResult result = 1;
  api.UserRaceInfo userRaceInfo = 2;
  repeated api.QuestRankPattern rankPatterns = 3;
  api.CommonResponse commonResponse = 9999;
}
message RaceQuestListAssetRequest {
  string raceId = 1;
  string raceQuestId = 2;
  int32 deckNumber = 3;
}
message RaceQuestListAssetResponse {
  repeated api.LiveCharacterAssetInfo characterAssets = 1;
  api.CommonResponse commonResponse = 9999;
}
message RaceListDeckRequest {
  string raceId = 1;
  string raceQuestId = 2;
  int32 difficultyNumber = 3;
}
message RaceListDeckResponse {
  repeated api.RaceDeckInfo deckInfos = 1;
}
message RaceSaveDeckRequest {
  string raceId = 1;
  int32 number = 2;
  string name = 3;
  repeated transaction.UserDeckPosition userDeckPositions = 4;
  string raceQuestId = 5;
  int32 difficultyNumber = 6;
}
message RaceSaveDeckResponse {
  api.RaceDeckInfo deckInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message RaceResetCardCoolTimeRequest {
  string raceId = 1;
  string cardId = 2;
}
message RaceResetCardCoolTimeResponse {
  api.UserRaceInfo userRaceInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message RaceRankingRequest {
  string raceId = 1;
}
message RaceRankingResponse {
  repeated api.RaceRankingInfo rankingInfos = 1;
  int64 selfClearPanelCount = 2;
  int32 selfRank = 3;
}
message RaceAreaInfo {
  string raceAreaId = 1;
  int32 order = 2;
  int32 panelCount = 3;
}
message RaceRankGradeInfo {
  string id = 1;
  int64 hierarchyPointFrom = 2;
  string name = 3;
  string topColorCode = 4;
  string bottomColorCode = 5;
}
message UserRaceInfo {
  string rankGradeId = 1;
  int32 rankGradeNumber = 2;
  int32 currnentRank = 3;
  string currentAreaId = 4;
  int32 currentPanelNumber = 5;
  api.RaceActivityLessonProgress activityLessonProgress = 6;
  repeated api.RaceLiveBonusInfo liveBonusInfos = 7;
  repeated api.RaceUserCardCoolTimeInfo cardCoolTimeInfos = 8;
  int32 totalClearPanelCount = 9;
  int64 currentLivePanelScore = 10;
}
message RaceActivityLessonProgress {
  int32 stepRewardRacePoint = 1;
  int32 stepRewardRaceMedal = 2;
  int64 lastReceiveTime = 3;
  int64 maxRewardTime = 4;
}
message RaceLiveQuestDifficultyLevelInfo {
  int32 raceLiveQuestDifficultyNumber = 1;
  bool cleared = 2;
  api.QuestOpponentInfo opponentInfo = 3;
  int64 highestScore = 4;
  bool unlocked = 5;
}
message RaceDeckInfo {
  int32 number = 1;
  repeated api.RaceDeckCardDetailInfo cardDetailInfos = 2;
  int64 deckOverallValue = 3;
}
message RaceDeckCardDetailInfo {
  int32 position = 1;
  int64 vocal = 2;
  int64 dance = 3;
  int64 visual = 4;
  int64 stamina = 5;
  int64 mental = 6;
  int64 technique = 7;
  repeated api.RaceAccessoryInfo accessoryInfos = 8;
  repeated api.RacePhotoInfo photoInfos = 9;
}
message RacePhotoInfo {
  string photoId = 1;
  int32 level = 2;
  repeated api.RacePhotoAbilityInfo abilities = 3;
}
message RouletteTopResponse {
  string id = 1;
  int32 freeCountLimit = 2;
  int32 adCountLimit = 3;
  repeated api.RouletteReward displayRewardList = 4;
  int32 currentDrawFreeCount = 5;
  int32 currentDrawAdCount = 6;
  string assetId = 7;
  api.CommonResponse commonResponse = 9999;
}
message RouletteCheckRequest {
  string rouletteId = 1;
}
message RouletteCheckResponse {
  api.CommonResponse commonResponse = 9999;
}
message RouletteDrawRequest {
  string rouletteId = 1;
}
message RouletteDrawResponse {
  repeated transaction.RewardResult rewardResults = 1;
  int32 number = 2;
  ProtoEnum.RouletteRarityType rarityType = 3;
  api.RouletteEffectInfo effectInfo = 4;
  repeated api.RouletteReward rewardList = 5;
  api.CommonResponse commonResponse = 9999;
}
message RouletteReward {
  transaction.Reward reward = 1;
  int32 number = 2;
  ProtoEnum.RouletteRarityType rarityType = 3;
}
message RouletteEffectInfo {
  ProtoEnum.RouletteSpecialEffectType specialEffectType = 1;
  string reversalEffectAssetId = 2;
  ProtoEnum.RouletteCharacterType characterType = 3;
  string frameAssetId = 4;
  string characterStoppingAssetId = 5;
  string characterRotatingAssetId = 6;
  string crowdAssetId = 7;
  ProtoEnum.RouletteBackgroundColorType backgroundColorType = 8;
  string buttonColorAssetId = 9;
  ProtoEnum.RouletteButtonColorType buttonColorType = 10;
  bool isMuteBgm = 11;
  bool isVibration = 12;
  bool isRotateDirectionLeft = 13;
  ProtoEnum.RouletteObtainEffectType obtainEffectType = 14;
}
message SalaryGetPayslipRequest {
  repeated int32 yearMonths = 1;
}
message SalaryGetPayslipResponse {
  repeated transaction.Payslip payslips = 1;
  api.CommonResponse commonResponse = 9999;
}
message SalaryPayRequest {
  int32 year = 1;
  int32 month = 2;
}
message SalaryPayResponse {
  transaction.Payslip payslip = 1;
  api.CommonResponse commonResponse = 9999;
}
message SatelliteInitCodeRequest {
  string satelliteId = 1;
}
message SatelliteInitCodeResponse {
  string code = 1;
  api.CommonResponse commonResponse = 9999;
}
message ShelfTopResponse {
  api.ShelfInfo shelfInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message ShelfAlbumTopRequest {
  string shelfAlbumId = 1;
}
message ShelfAlbumTopResponse {
  repeated api.ShelfTemplateInfo templateInfos = 1;
  repeated api.ShelfPhotoInfo photoInfos = 2;
  repeated api.ShelfAlbumEpisodeInfo episodeInfos = 3;
  string selectedTemplateId = 4;
  api.CommonResponse commonResponse = 9999;
}
message ShelfCheckShootingRequest {
  string shelfAlbumId = 1;
  int32 episode = 2;
}
message ShelfCheckShootingResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShelfSavePhotoRequest {
  string shelfAlbumId = 1;
  int32 episode = 2;
  repeated api.ShelfSavePhotoParam savePhotoParams = 3;
}
message ShelfSavePhotoResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShelfSetPhotoRequest {
  string shelfAlbumId = 1;
  int32 slotNumber = 2;
  string assetId = 3;
  int64 positionX = 4;
}
message ShelfSetPhotoResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShelfCreatePhotoRequest {
  string shelfAlbumId = 1;
  string assetId = 2;
}
message ShelfCreatePhotoResponse {
  transaction.UserPhoto photo = 1;
  bool isGift = 2;
  api.CommonResponse commonResponse = 9999;
}
message ShelfCreateAlbumPhotoRequest {
  string shelfAlbumId = 1;
  string assetId = 2;
}
message ShelfCreateAlbumPhotoResponse {
  transaction.UserPhoto photo = 1;
  bool isGift = 2;
  api.CommonResponse commonResponse = 9999;
}
message ShelfDeletePhotoRequest {
  string shelfAlbumId = 1;
  repeated string assetIds = 2;
}
message ShelfDeletePhotoResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShelfSwitchTemplateRequest {
  string shelfAlbumId = 1;
  string templateId = 2;
}
message ShelfSwitchTemplateResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShelfUnsetPhotoRequest {
  string shelfAlbumId = 1;
  int32 slotNumber = 2;
}
message ShelfUnsetPhotoResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShelfTemplateInfo {
  string templateId = 1;
  repeated api.ShelfAlbumSlotInfo slotInfos = 2;
  ProtoEnum.ShelfTemplateType templateType = 3;
  string backgroundAssetId = 4;
}
message ShelfAlbumSlotInfo {
  int32 slotNumber = 1;
  int32 episode = 2;
  string assetId = 3;
  int64 positionX = 4;
}
message ShelfSavePhotoParam {
  string assetId = 1;
  string mainCharacterId = 2;
  repeated string characterIds = 3;
}
message ShopListResponse {
  repeated api.ShopInfo shops = 1;
  repeated api.DokanInfo dokanInfos = 2;
  api.CommonResponse commonResponse = 9999;
}
message ShopListItemRequest {
  string shopId = 1;
}
message ShopListItemResponse {
  repeated api.ShopItem shopItems = 1;
  api.CommonResponse commonResponse = 9999;
}
message ShopGetLoginBonusPackageItemRequest {
  string shopId = 1;
}
message ShopGetLoginBonusPackageItemResponse {
  api.LoginBonusPackageItem loginBonusPackageItem = 1;
  api.CommonResponse commonResponse = 9999;
}
message ShopGetConditionRewardPackageItemRequest {
  string shopId = 1;
}
message ShopGetConditionRewardPackageItemResponse {
  api.ConditionRewardPackageItem conditionRewardPackageItem = 1;
  api.CommonResponse commonResponse = 9999;
}
message ShopPurchaseRequest {
  string shopItemId = 1;
}
message ShopPurchaseResponse {
  repeated transaction.RewardResult rewards = 1;
  api.CommonResponse commonResponse = 9999;
}
message ShopRegisterPurchaseTransactionRequest {
  string shopItemId = 1;
}
message ShopRegisterPurchaseTransactionResponse {
  string transactionId = 1;
  api.CommonResponse commonResponse = 9999;
}
message ShopCancelPurchaseTransactionRequest {
  string shopItemId = 1;
  string transactionId = 2;
}
message ShopCancelPurchaseTransactionResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShopPurchaseStoneRequest {
  string productId = 1;
  string transactionId = 2;
  string receipt = 3;
  string signature = 4;
  string currencyCode = 5;
  int64 localizedPricePermyriad = 6;
}
message ShopPurchaseStoneResponse {
  repeated transaction.RewardResult rewards = 1;
  api.PaidJpy paidJpy = 2;
  api.CommonResponse commonResponse = 9999;
}
message ShopRecoverPurchaseStoneRequest {
  string productId = 1;
  string receipt = 2;
  string signature = 3;
  string currencyCode = 4;
  int64 localizedPricePermyriad = 5;
}
message ShopRecoverPurchaseStoneResponse {
  repeated transaction.RewardResult rewards = 1;
  string shopItemName = 2;
  api.CommonResponse commonResponse = 9999;
}
message ShopCheckPurchaseStoneRequest {
  string shopItemId = 1;
}
message ShopCheckPurchaseStoneResponse {
  bool birthdayNotRegistered = 1;
  bool exceedMaxStoneAmount = 2;
  bool exceedPurchaseThreshold = 3;
  bool exceedAlertThreshold = 4;
  api.CommonResponse commonResponse = 9999;
}
message ShopRegisterBirthdayRequest {
  int32 year = 1;
  int32 month = 2;
}
message ShopRegisterBirthdayResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShopReceiveConditionRewardRequest {
  string shopId = 1;
  repeated int32 numbers = 2;
}
message ShopReceiveConditionRewardResponse {
  repeated transaction.RewardResult rewards = 1;
  api.CommonResponse commonResponse = 9999;
}
message ShopTryOnRequest {
  string shopItemId = 1;
  string costumeId = 2;
  string hairId = 3;
}
message ShopTryOnResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseSaveRequest {
  int32 number = 1;
  string frameId = 3;
  string assetId = 5;
  api.ShowcaseLayoutInfo layoutInfo = 6;
}
message ShowcaseSaveResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseSaveDetailRequest {
  int32 number = 1;
  string name = 2;
  string comment = 3;
  string musicId = 4;
  bool isOpen = 5;
}
message ShowcaseSaveDetailResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseSaveMysetRequest {
  int32 number = 1;
  string frameId = 3;
  api.ShowcaseLayoutInfo layoutInfo = 6;
}
message ShowcaseSaveMysetResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseDeleteMysetRequest {
  int32 number = 1;
}
message ShowcaseDeleteMysetResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseApplyMysetRequest {
  int32 number = 1;
}
message ShowcaseRenameMysetRequest {
  int32 number = 1;
  string name = 2;
}
message ShowcaseRenameMysetResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseCheckThumbnailShootingRequest {
  int32 number = 1;
}
message ShowcaseCheckThumbnailShootingResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseLikeRequest {
  string userId = 1;
  int32 number = 2;
}
message ShowcaseLikeResponse {
  repeated transaction.Reward rewards = 1;
  bool isAlreadyLike = 2;
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseGetRequest {
  string userId = 1;
}
message ShowcaseGetResponse {
  repeated api.ShowcaseInfo showcaseInfos = 1;
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseGalleryTopResponse {
  repeated api.ShowcaseInfo showcaseInfos = 1;
  api.ShowcaseTermInfo termInfo = 2;
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseSearchFriendRecommendListResponse {
  repeated api.ShowcaseInfo showcaseInfos = 1;
  api.ShowcaseTermInfo termInfo = 2;
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseSearchHashtagListRequest {
  string hashtagId = 1;
  bool isHead = 2;
}
message ShowcaseSearchHashtagListResponse {
  repeated api.ShowcaseInfo showcaseInfos = 1;
  api.ShowcaseTermInfo termInfo = 2;
  bool isEndHashtagSearchList = 3;
  bool isAlwaysEmpty = 4;
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseDisplayRequest {
  string userId = 1;
  int32 number = 2;
}
message ShowcaseDisplayResponse {
  api.ShowcaseInfo showcaseInfo = 1;
  bool isViewable = 2;
  api.ShowcaseLayoutInfo layoutInfo = 3;
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseCheckShootingRequest {
  int32 number = 1;
}
message ShowcaseCheckShootingResponse {
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseCreatePhotoRequest {
  int32 number = 1;
  repeated api.ShowcaseCreatePhotoParam createPhotoParams = 2;
  int32 manualCount = 3;
}
message ShowcaseCreatePhotoResponse {
  repeated transaction.UserPhoto photos = 1;
  bool isGift = 2;
  api.CommonResponse commonResponse = 9999;
}
message ShowcaseToyInfo {
  string id = 1;
  int32 count = 2;
}
message ShowcaseMysetInfo {
  int32 number = 1;
  string defaultName = 2;
}
message ShowcaseInfo {
  transaction.UserShowcase showcase = 1;
  api.ProfileInfo profileInfo = 2;
  bool isFriend = 3;
  bool isLiked = 4;
}
message ShowcaseTermInfo {
  int32 month = 1;
  int32 day = 2;
  int32 hour = 3;
}
message ShowcaseCreatePhotoParam {
  string assetId = 1;
  string itemId = 2;
  string mainCharacterId = 3;
}
message ShowcaseLayoutInfo {
  repeated api.ShowcaseToyAssetInfo showcaseToyAssetInfos = 1;
  repeated api.ShowcaseToyArrangementInfo showcaseToyArrangementInfos = 2;
}
message ShowcaseToyAssetInfo {
  int32 uniqueNumber = 1;
  string showcaseToyId = 2;
  int32 count = 3;
}
message ShowcaseToyArrangementInfo {
  int32 uniqueNumber = 1;
  int32 toyAssetInfoUniqueNumber = 2;
  float positionX = 3;
  float positionY = 4;
  float rotation = 5;
  int32 parentUniqueNumber = 6;
  int32 showcaseFaceNumber = 7;
}
message StaffTrainRequest {
  ProtoEnum.ParameterType parameterType = 1;
}
message StaffTrainResponse {
  api.CommonResponse commonResponse = 9999;
}
message StaffLevelLimitBreakRequest {
  ProtoEnum.ParameterType parameterType = 1;
}
message StaffLevelLimitBreakResponse {
  api.CommonResponse commonResponse = 9999;
}
message StoryReadRequest {
  string storyId = 1;
  bool isLast = 2;
}
message StoryReadResponse {
  repeated transaction.RewardResult rewards = 1;
  api.CommonResponse commonResponse = 9999;
}
message StoryReleaseEpisodeRequest {
  string storyPartId = 1;
  int32 chapter = 2;
  int32 route = 3;
  int32 episode = 4;
}
message StoryReleaseEpisodeResponse {
  api.CommonResponse commonResponse = 9999;
}
message StoryListEventResponse {
  repeated api.EventStoryInfo infos = 1;
  api.CommonResponse commonResponse = 9999;
}
message StoryReadEventRequest {
  string eventStoryId = 1;
  int32 episode = 2;
  bool isLast = 3;
}
message StoryReadEventResponse {
  repeated transaction.RewardResult rewards = 1;
  api.CommonResponse commonResponse = 9999;
}
message StoryListExtraResponse {
  repeated api.ExtraStoryPartInfo infos = 1;
  api.CommonResponse commonResponse = 9999;
}
message StoryReadExtraRequest {
  string extraStoryId = 1;
  int32 episode = 2;
  bool isLast = 3;
}
message StoryReadExtraResponse {
  repeated transaction.RewardResult rewards = 1;
  api.CommonResponse commonResponse = 9999;
}
message StoryReadAnniversaryStoryRequest {
  string anniversaryId = 1;
  int32 episode = 2;
}
message StoryReadCharacterCompanyEnjoyStoryRequest {
  string characterId = 1;
  int32 number = 2;
  bool isLast = 3;
}
message StoryReadCharacterCompanyEnjoyStoryResponse {
  repeated transaction.RewardResult rewards = 1;
  api.CommonResponse commonResponse = 9999;
}
message SystemCheckRequest {
  string firebaseIDToken = 1;
}
message SystemCheckResponse {
  api.MaintenanceInfo maintenanceInfo = 1;
  api.ReviewInfo reviewInfo = 2;
  int32 keepAliveTimeMilliseconds = 3;
  int32 keepAliveTimeoutMilliseconds = 4;
  bool enableCrashlyticsCollection = 5;
  bool enableUnityLogErrorToLogException = 6;
  bool enableApiParallelExecutionSuppression = 7;
}
message MaintenanceInfo {
  bool inMaintenance = 1;
  string topMessage = 2;
  string bottomMessage = 3;
  int64 startTime = 4;
  int64 endTime = 5;
  bool isBeforeRelease = 6;
  string twitterUrl = 7;
  string mvUrl = 8;
  string gamePvUrl = 9;
}
message ReviewInfo {
  bool inReview = 1;
  string alternativeApiHost = 2;
}
message TelephoneReceiveRequest {
  repeated string telephoneIds = 1;
}
message TelephoneReceiveResponse {
  api.CommonResponse commonResponse = 9999;
}
message TelephoneFinishesRequest {
  repeated string telephoneIds = 1;
}
message TelephoneFinishesResponse {
  bool isReliabilityUp = 1;
  api.CommonResponse commonResponse = 9999;
}
message TelephoneCallHistoryRequest {
  string telephoneId = 1;
}
message TelephoneCallHistoryResponse {
  api.CommonResponse commonResponse = 9999;
}
message TourTopRequest {
  string tourId = 1;
}
message TourTopResponse {
  api.TourInfo tourInfo = 1;
  api.UserTourInfo userTourInfo = 2;
  repeated api.DokanInfo dokanInfos = 3;
  api.CommonResponse commonResponse = 9999;
}
message TourRankingRequest {
  string tourId = 1;
}
message TourRankingResponse {
  repeated api.TourRankingInfo rankingInfos = 1;
  int64 selfPoint = 2;
  int32 selfRank = 3;
  api.CommonResponse commonResponse = 9999;
}
message TourAreaTopRequest {
  string tourId = 1;
  bool isCurrentAreaRestart = 2;
  int32 tourDifficultyNumber = 3;
}
message TourAreaTopResponse {
  api.TourAreaInfo areaInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message TourAreaActivityRequest {
  string tourId = 1;
  int32 step = 2;
  int32 position = 3;
}
message TourAreaActivityResponse {
  api.TourAreaInfo areaInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message TourAreaRefreshRequest {
  string tourId = 1;
  int32 step = 2;
  int32 position = 3;
}
message TourAreaRefreshResponse {
  api.TourAreaInfo areaInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message TourAreaScoutRequest {
  string tourId = 1;
  int32 step = 2;
  int32 position = 3;
  string cardId = 4;
  int32 evolutionLevel = 5;
}
message TourAreaScoutResponse {
  api.TourAreaInfo areaInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message TourAreaLiveRequest {
  string tourId = 1;
  int32 step = 2;
  int32 position = 3;
  bool isSkip = 4;
}
message TourAreaLiveResponse {
  api.TourAreaInfo areaInfo = 1;
  api.TourLiveInfo liveInfo = 2;
  api.TourResultInfo resultInfo = 3;
  api.CommonResponse commonResponse = 9999;
}
message TourAreaLiveBonusRequest {
  string tourId = 1;
  int32 step = 2;
  int32 position = 3;
  string liveBonusId = 4;
}
message TourAreaLiveBonusResponse {
  api.TourAreaInfo areaInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message TourAreaPvpRequest {
  string tourId = 1;
  int32 step = 2;
  int32 position = 3;
  bool isSkip = 4;
}
message TourAreaPvpResponse {
  api.TourAreaInfo areaInfo = 1;
  api.TourLiveInfo liveInfo = 2;
  api.TourResultInfo resultInfo = 3;
  api.CommonResponse commonResponse = 9999;
}
message TourAreaClearRequest {
  string tourId = 1;
}
message TourAreaClearResponse {
  api.TourAreaInfo areaInfo = 1;
  api.TourAreaClearInfo areaClearInfo = 2;
  api.TourResultInfo resultInfo = 3;
  api.CommonResponse commonResponse = 9999;
}
message TourAreaNextRequest {
  string tourId = 1;
}
message TourAreaNextResponse {
  api.TourAreaInfo areaInfo = 1;
  api.CommonResponse commonResponse = 9999;
}
message TourAreaRetireRequest {
  string tourId = 1;
}
message TourAreaRetireResponse {
  api.TourAreaInfo areaInfo = 1;
  api.TourResultInfo resultInfo = 2;
  api.CommonResponse commonResponse = 9999;
}
message TourDeckSaveRequest {
  string tourId = 1;
  repeated api.TourDeckInfo deckInfos = 2;
}
message TourDeckSaveResponse {
  api.CommonResponse commonResponse = 9999;
}
message TourInfo {
  string id = 1;
  string name = 2;
  ProtoEnum.TourType type = 3;
  ProtoEnum.TourEnemyType enemyType = 4;
  int64 startTime = 5;
  int64 endTime = 6;
  int64 aggregateEndTime = 7;
  int64 exchangeEndTime = 8;
  string assetId = 9;
  string bannerAssetId = 10;
  int32 areaStaminaRecoveryMinutes = 11;
  int32 initialAreaStamina = 12;
  int32 initialLife = 13;
  api.EventStoryInfo eventStoryInfo = 14;
  api.EventMissionInfo eventMissionInfo = 15;
  api.EventExchangeBoothInfo eventExchangeBoothInfo = 16;
  api.NoticeInfo noticeInfo = 17;
  repeated api.TourRankingRewardInfo tourRankingRewardInfos = 18;
  repeated api.TourDifficultyInfo tourDifficultyInfos = 19;
}
message UserTourInfo {
  int32 areaStamina = 1;
  int64 staminaUpdatedTime = 2;
  int64 highestScore = 3;
  int64 highestScoreTime = 4;
  int32 mostProgressArea = 5;
  string mostProgressAreaName = 6;
  int32 life = 7;
  int64 currentScore = 8;
  int32 currentArea = 9;
  string currentAreaName = 10;
  int64 rank = 11;
  bool isRetired = 13;
  bool isAreaCleared = 14;
  bool isLastArea = 15;
  int32 clearedDifficultyNumber = 16;
  int32 currentDifficultyNumber = 17;
}
message TourDeckInfo {
  int32 position = 1;
  string cardId = 2;
  string scoutId = 3;
  int32 evolutionLevel = 4;
}
message TourAreaInfo {
  int32 areaStamina = 1;
  int64 staminaUpdatedTime = 2;
  int64 highestScore = 3;
  int64 highestScoreTime = 4;
  int32 mostProgressArea = 5;
  string mostProgressAreaName = 6;
  int32 life = 7;
  int64 score = 8;
  int32 area = 9;
  string areaName = 10;
  int32 step = 11;
  int32 position = 12;
  int64 areaScore = 13;
  bool isAreaCleared = 14;
  bool isRetired = 15;
  repeated api.TourStepInfo stepInfos = 16;
  repeated transaction.Reward areaRewards = 17;
  repeated api.TourLiveBonusInfo liveBonusInfos = 18;
  repeated api.TourCardInfo cardInfos = 19;
  repeated api.TourScoutInfo scoutInfos = 20;
  repeated api.TourDeckInfo deckInfos = 21;
  bool isLastArea = 22;
  ProtoEnum.TourType tourType = 23;
  ProtoEnum.TourAreaType tourAreaType = 24;
}
message TourStepInfo {
  int32 step = 1;
  repeated api.TourPositionInfo positionInfos = 2;
}
message TourPositionInfo {
  int32 position = 1;
  ProtoEnum.TourStepType type = 2;
  api.TourEffectActivity activityInfo = 3;
  api.TourEffectRefresh refreshInfo = 4;
  api.TourEffectScout scoutInfo = 5;
  api.TourEffectLive liveInfo = 6;
  api.TourEffectPvp pvpInfo = 7;
  repeated api.TourLiveBonusInfo liveBonusInfos = 9;
  bool isPassed = 10;
}
message TourEffectScout {
  repeated api.TourScoutInfo scoutInfos = 1;
}
message TourOpponentInfo {
  string name = 1;
  int32 managerLevel = 2;
  repeated api.LiveBattleCardInfo cardInfos = 3;
}
message TourCardInfo {
  string cardId = 1;
  int32 staminaPermil = 2;
  int32 evolutionLevel = 3;
}
message TourScoutInfo {
  string scoutId = 1;
  string cardId = 2;
  int32 staminaPermil = 3;
  bool isRival = 4;
  int32 level = 5;
  int32 rarity = 6;
  int64 dance = 7;
  int64 vocal = 8;
  int64 visual = 9;
  int64 stamina = 10;
  int64 mental = 11;
  int64 technique = 12;
  int32 skillLevel1 = 13;
  int32 skillLevel2 = 14;
  int32 skillLevel3 = 15;
  int32 skillLevel4 = 16;
  int32 evolutionLevel = 17;
}
message TourLiveInfo {
  api.LiveResult result = 1;
  repeated transaction.Reward rewards = 2;
  ProtoEnum.ResultRankType rankType = 3;
  int32 rankPlus = 4;
  repeated api.QuestRankPattern rankPatterns = 5;
}
message TourAreaClearInfo {
  repeated transaction.Reward areaRewards = 1;
  repeated transaction.Reward firstClearRewards = 2;
  int64 score = 3;
  int64 areaScore = 4;
  int64 rank = 5;
  bool isBest = 6;
}
message TourResultInfo {
  int64 score = 1;
  int64 rank = 2;
  bool isBest = 3;
}
message TutorialInitRequest {
  string name = 1;
}
message TutorialInitResponse {
  api.CommonResponse commonResponse = 9999;
}
message TutorialProgressRequest {
  ProtoEnum.TutorialType type = 1;
  int32 step = 2;
}
message TutorialProgressResponse {
  api.CommonResponse commonResponse = 9999;
}
message TutorialStartQuestRequest {
  string questId = 1;
}
message TutorialStartQuestResponse {
  api.LiveResult result = 1;
  repeated api.QuestRankPattern rankPatterns = 2;
  api.CommonResponse commonResponse = 9999;
}
message TutorialActivityStartFanEventResponse {
  api.FanEventProgress progress = 1;
  api.CommonResponse commonResponse = 9999;
}
message TutorialActivityReceivePromotionRewardResponse {
  repeated transaction.Reward rewards = 1;
  api.ActivityLevelProgress activityLevelProgress = 2;
  api.CommonResponse commonResponse = 9999;
}
message TutorialActivityReceiveLessonRewardResponse {
  repeated transaction.Reward rewards = 1;
  api.CommonResponse commonResponse = 9999;
}
message TutorialPhotoCreateShootingRequest {
  string mainCharacterId = 1;
  string photoImageId = 2;
}
message TutorialPhotoCreateShootingResponse {
  transaction.UserPhoto photo = 1;
  bool isGift = 2;
  api.CommonResponse commonResponse = 9999;
}
message TutorialSkipResponse {
  api.CommonResponse commonResponse = 9999;
}
message UserGetResponse {
  transaction.User user = 1;
  repeated transaction.UserItem items = 2;
  repeated transaction.UserCard cards = 3;
  repeated transaction.UserCharacter characters = 4;
  repeated transaction.UserCostume costumes = 5;
  repeated transaction.UserAccessory accessories = 6;
  repeated transaction.UserPhoto photos = 7;
  repeated transaction.UserDeck decks = 8;
  repeated transaction.UserDeckPosition deckPositions = 9;
  repeated transaction.UserStory stories = 10;
  repeated transaction.UserPoint points = 11;
  repeated transaction.UserStaff staffs = 12;
  repeated transaction.UserMessage messages = 13;
  repeated transaction.UserTelephone telephones = 14;
  repeated transaction.UserMission missions = 15;
  transaction.UserProfile profile = 16;
  repeated transaction.UserEmblem emblems = 17;
  repeated transaction.UserCharacterMusic characterMusics = 18;
  transaction.UserBalance balance = 19;
  transaction.UserTotalCount totalCount = 20;
  repeated transaction.UserArea areas = 21;
  repeated transaction.UserQuest quests = 22;
  repeated transaction.UserGachaButton gachaButtons = 23;
  repeated transaction.UserHomeTalk homeTalks = 24;
  transaction.UserPhotoReport photoReport = 25;
  repeated transaction.UserCardSupport cardSupports = 26;
  repeated transaction.UserMessageSchedule messageSchedules = 27;
  repeated transaction.UserNotification notifications = 28;
  transaction.UserHierarchy hierarchy = 29;
  repeated transaction.UserTutorial tutorials = 30;
  repeated transaction.UserHomePosition homePositions = 31;
  repeated transaction.UserMusic musics = 32;
  repeated transaction.UserDecoration decorations = 33;
  repeated transaction.UserPhotoRecipe photoRecipes = 34;
  transaction.UserBuddy buddy = 35;
  transaction.UserInvite invite = 36;
  repeated transaction.UserHair hairs = 37;
  transaction.UserActivityFanEventProgress activityFanEventProgress = 38;
  repeated transaction.UserLove loves = 39;
  repeated transaction.UserLeagueDeckPosition leagueDeckPositions = 40;
  repeated transaction.UserDuty duties = 41;
  repeated transaction.UserDutyPoint dutyPoints = 42;
  transaction.UserCompany company = 43;
  repeated transaction.UserShowcase showcases = 44;
  transaction.UserShowcaseLike showcaseLike = 45;
  repeated transaction.UserShowcaseMusic showcaseMusics = 46;
  repeated transaction.UserShowcaseToy showcaseToys = 47;
  repeated transaction.UserShowcaseMyset showcaseMysets = 48;
  repeated transaction.UserTourArea tourAreas = 49;
  repeated transaction.UserPhotoPose photoPoses = 50;
  transaction.UserPublic userPublic = 999;
}
message UserUpdateRequest {
  string name = 1;
}
message UserUpdateResponse {
  api.CommonResponse commonResponse = 9999;
}
message UserProvideExternalRewardRequest {
  string externalRewardId = 1;
}
message UserProvideExternalRewardResponse {
  api.CommonResponse commonResponse = 9999;
}

message Empty {}
service Accessory {
  rpc Enhance(AccessoryEnhanceRequest) returns (AccessoryEnhanceResponse);
  rpc LimitBreak(AccessoryLimitBreakRequest) returns (AccessoryLimitBreakResponse);
  rpc Sell(AccessorySellRequest) returns (AccessorySellResponse);
}
service Activity {
  rpc StartFanEvent(ActivityStartFanEventRequest) returns (ActivityStartFanEventResponse);
  rpc LoadFanEvent(Empty) returns (ActivityLoadFanEventResponse);
  rpc FetchFanEventSteps(ActivityFetchFanEventStepsRequest) returns (ActivityFetchFanEventStepsResponse);
  rpc SaveFanEvent(ActivitySaveFanEventRequest) returns (ActivitySaveFanEventResponse);
  rpc FinishFanEvent(Empty) returns (ActivityFinishFanEventResponse);
  rpc GetFanEventRanking(ActivityGetFanEventRankingRequest) returns (ActivityGetFanEventRankingResponse);
  rpc StartPromotion(ActivityStartPromotionRequest) returns (ActivityStartPromotionResponse);
  rpc LoadPromotion(Empty) returns (ActivityLoadPromotionResponse);
  rpc UsePromotionItem(ActivityUsePromotionItemRequest) returns (ActivityUsePromotionItemResponse);
  rpc ReceivePromotionReward(Empty) returns (ActivityReceivePromotionRewardResponse);
  rpc FetchPromotionSteps(ActivityFetchPromotionStepsRequest) returns (ActivityFetchPromotionStepsResponse);
  rpc FinishPromotion(Empty) returns (ActivityFinishPromotionResponse);
  rpc StartRefresh(ActivityStartRefreshRequest) returns (ActivityStartRefreshResponse);
  rpc LoadRefresh(Empty) returns (ActivityLoadRefreshResponse);
  rpc UseRefreshItem(ActivityUseRefreshItemRequest) returns (ActivityUseRefreshItemResponse);
  rpc FinishRefresh(Empty) returns (ActivityFinishRefreshResponse);
  rpc ReceiveLessonReward(Empty) returns (ActivityReceiveLessonRewardResponse);
  rpc PromoteLesson(ActivityPromoteLessonRequest) returns (ActivityPromoteLessonResponse);
}
service Advertisement {
  rpc Start(AdvertisementStartRequest) returns (AdvertisementStartResponse);
  rpc End(AdvertisementEndRequest) returns (AdvertisementEndResponse);
}
service Anniversary {
  rpc OutputTransitionLog(AnniversaryOutputTransitionLogRequest) returns (AnniversaryOutputTransitionLogResponse);
}
service Auth {
  rpc Create(AuthCreateRequest) returns (AuthCreateResponse);
  rpc Login(AuthLoginRequest) returns (AuthLoginResponse);
  rpc Delete(Empty) returns (AuthDeleteResponse);
  rpc Recreate(AuthRecreateRequest) returns (AuthRecreateResponse);
}
service Backside {
  rpc Top(BacksideTopRequest) returns (BacksideTopResponse);
  rpc Ranking(BacksideRankingRequest) returns (BacksideRankingResponse);
  rpc StageStart(BacksideStageStartRequest) returns (BacksideStageStartResponse);
  rpc StageAction(BacksideStageActionRequest) returns (BacksideStageActionResponse);
  rpc StageLiveBonus(BacksideStageLiveBonusRequest) returns (BacksideStageLiveBonusResponse);
  rpc StagePracticeUpdate(BacksideStagePracticeUpdateRequest) returns (BacksideStagePracticeUpdateResponse);
  rpc StageReset(BacksideStageResetRequest) returns (BacksideStageResetResponse);
  rpc StageSurpriseFinish(BacksideStageSurpriseFinishRequest) returns (BacksideStageSurpriseFinishResponse);
  rpc StageDeckPositionChange(BacksideStageDeckPositionChangeRequest) returns (BacksideStageDeckPositionChangeResponse);
}
service Birthday {
  rpc Top(Empty) returns (BirthdayTopResponse);
  rpc SetWatched(BirthdaySetWatchedRequest) returns (BirthdaySetWatchedResponse);
  rpc ReceiveReward(Empty) returns (BirthdayReceiveRewardResponse);
  rpc OutputWatchedLog(BirthdayOutputWatchedLogRequest) returns (BirthdayOutputWatchedLogResponse);
  rpc SetWatchedRemindInfo(Empty) returns (BirthdaySetWatchedRemindInfoResponse);
}
service Card {
  rpc Enhance(CardEnhanceRequest) returns (CardEnhanceResponse);
  rpc LimitBreak(CardLimitBreakRequest) returns (CardLimitBreakResponse);
  rpc SkillEnhance(CardSkillEnhanceRequest) returns (CardSkillEnhanceResponse);
  rpc LiveAbilityEnhance(CardLiveAbilityEnhanceRequest) returns (CardLiveAbilityEnhanceResponse);
  rpc ActivityAbilityEnhance(CardActivityAbilityEnhanceRequest) returns (CardActivityAbilityEnhanceResponse);
  rpc Reset(CardResetRequest) returns (CardResetResponse);
  rpc SetSupport(CardSetSupportRequest) returns (CardSetSupportResponse);
  rpc RemoveSupport(CardRemoveSupportRequest) returns (CardRemoveSupportResponse);
  rpc ReleaseSupport(CardReleaseSupportRequest) returns (CardReleaseSupportResponse);
  rpc RankUp(CardRankUpRequest) returns (CardRankUpResponse);
  rpc UpdateDisplayType(CardUpdateDisplayTypeRequest) returns (CardUpdateDisplayTypeResponse);
}
service Company {
  rpc Top(CompanyTopRequest) returns (CompanyTopResponse);
  rpc ListRanking(Empty) returns (CompanyListRankingResponse);
  rpc ReceiveGradeRewards(CompanyReceiveGradeRewardsRequest) returns (CompanyReceiveGradeRewardsResponse);
  rpc BulkReceiveMission(CompanyBulkReceiveMissionRequest) returns (CompanyBulkReceiveMissionResponse);
  rpc EnjoyCharacterTop(CompanyEnjoyCharacterTopRequest) returns (CompanyEnjoyCharacterTopResponse);
  rpc ListEnjoyCharacterRanking(CompanyListEnjoyCharacterRankingRequest) returns (CompanyListEnjoyCharacterRankingResponse);
  rpc ReceiveEnjoyCharacterLevelRewards(CompanyReceiveEnjoyCharacterLevelRewardsRequest) returns (CompanyReceiveEnjoyCharacterLevelRewardsResponse);
  rpc UseEnjoyObtainPointItem(CompanyUseObtainEnjoyPointItemRequest) returns (CompanyUseObtainEnjoyPointItemResponse);
  rpc BulkReceiveEnjoy(CompanyBulkReceiveEnjoyRequest) returns (CompanyBulkReceiveEnjoyResponse);
  rpc BulkReceiveEnjoyCharacterLevelRewards(Empty) returns (CompanyBulkReceiveEnjoyCharacterLevelRewardsResponse);
  rpc ReceiveTrustLevelRewards(CompanyReceiveTrustLevelRewardsRequest) returns (CompanyReceiveTrustLevelRewardsResponse);
}
service Costume {
  rpc SetCostume(CostumeSetRequest) returns (CostumeSetResponse);
  rpc SetLiveCostume(CostumeLiveSetRequest) returns (CostumeLiveSetResponse);
  rpc CheckCostume(CostumeCheckRequest) returns (CostumeCheckResponse);
  rpc CheckBulk(CostumeCheckBulkRequest) returns (CostumeCheckBulkResponse);
}
service Deck {
  rpc Save(DeckSaveRequest) returns (DeckSaveResponse);
  rpc Delete(DeckDeleteRequest) returns (DeckDeleteResponse);
  rpc BuddyList(Empty) returns (DeckBuddyListResponse);
}
service Diary {
  rpc GetInfos(Empty) returns (DiaryGetInfosResponse);
  rpc Read(DiaryReadRequest) returns (DiaryReadResponse);
}
service Dice {
  rpc Top(Empty) returns (DiceTopResponse);
  rpc MovePanel(Empty) returns (DiceMovePanelResponse);
  rpc UseItem(DiceUseItemRequest) returns (DiceUseItemResponse);
  rpc DiscardItem(DiceDiscardItemRequest) returns (DiceDiscardItemResponse);
  rpc PurchaseItem(DicePurchaseItemRequest) returns (DicePurchaseItemResponse);
  rpc SellItem(DiceSellItemRequest) returns (DiceSellItemResponse);
  rpc FinishShopPanel(Empty) returns (DiceFinishShopPanelResponse);
  rpc FinishStoryPanel(DiceFinishStoryPanelRequest) returns (DiceFinishStoryPanelResponse);
  rpc UseStaminaRecoveryItem(DiceUseStaminaRecoveryItemRequest) returns (DiceUseStaminaRecoveryItemResponse);
  rpc ListDeck(DiceListDeckRequest) returns (DiceListDeckResponse);
  rpc StartQuest(DiceStartQuestRequest) returns (DiceStartQuestResponse);
  rpc StartGoalQuest(DiceStartGoalQuestRequest) returns (DiceStartGoalQuestResponse);
  rpc ChooseLiveBonus(DiceChooseLiveBonusRequest) returns (DiceChooseLiveBonusResponse);
  rpc ListRanking(Empty) returns (DiceListRankingResponse);
  rpc SaveDeck(DiceSaveDeckRequest) returns (DiceSaveDeckResponse);
}
service Division {
  rpc List(Empty) returns (DivisionListResponse);
  rpc Move(DivisionMoveRequest) returns (DivisionMoveResponse);
}
service Dokan {
  rpc List(Empty) returns (DokanListResponse);
  rpc SetWatched(DokanSetWatchedRequest) returns (DokanSetWathcedResponse);
  rpc OutputWatchedLog(DokanOutputWatchedLogRequest) returns (DokanOutputWatchedLogResponse);
}
service Dream {
  rpc Top(Empty) returns (DreamTopResponse);
  rpc ListMaterialPhoto(DreamListMaterialPhotoRequest) returns (DreamListMaterialPhotoResponse);
  rpc ListQuest(DreamListQuestRequest) returns (DreamListQuestResponse);
  rpc GenerateArea(DreamGenerateAreaRequest) returns (DreamGenerateAreaResponse);
  rpc StartQuest(DreamStartQuestRequest) returns (DreamStartQuestResponse);
  rpc SkipQuest(DreamSkipQuestRequest) returns (DreamSkipQuestResponse);
  rpc ResetArea(DreamResetAreaRequest) returns (DreamResetAreaResponse);
}
service Duty {
  rpc Top(DutyTopRequest) returns (DutyTopResponse);
  rpc ExchangeReward(DutyExchangeRewardRequest) returns (DutyExchangeRewardResponse);
  rpc ReceiveTotalObtainReward(DutyReceiveTotalObtainRewardRequest) returns (DutyReceiveTotalObtainRewardResponse);
}
service Exchange {
  rpc List(Empty) returns (ExchangeListResponse);
  rpc Execute(ExchangeExecuteRequest) returns (ExchangeExecuteResponse);
  rpc TryOn(ExchangeTryOnRequest) returns (ExchangeTryOnResponse);
}
service Exercise {
  rpc Top(Empty) returns (ExerciseTopResponse);
  rpc SaveDeck(ExerciseSaveDeckRequest) returns (ExerciseSaveDeckResponse);
  rpc Start(ExerciseStartRequest) returns (ExerciseStartResponse);
  rpc ListAsset(ExerciseListAssetRequest) returns (ExerciseListAssetResponse);
}
service Forum {
  rpc ListThread(Empty) returns (ForumListThreadResponse);
  rpc ListThreadReply(ForumListThreadReplyRequest) returns (ForumListThreadReplyResponse);
  rpc CreateThread(ForumCreateThreadRequest) returns (ForumCreateThreadResponse);
  rpc SendThreadReply(ForumSendThreadReplyRequest) returns (ForumSendThreadReplyResponse);
  rpc LikeReply(ForumLikeReplyRequest) returns (ForumLikeReplyResponse);
  rpc DislikeReply(ForumDislikeReplyRequest) returns (ForumDislikeReplyResponse);
  rpc BookmarkThread(ForumBookmarkThreadRequest) returns (ForumBookmarkThreadResponse);
  rpc UnbookmarkThread(ForumUnbookmarkThreadRequest) returns (ForumUnbookmarkThreadResponse);
  rpc BlockUser(ForumBlockUserRequest) returns (ForumBlockUserResponse);
}
service Friend {
  rpc List(Empty) returns (FriendListResponse);
  rpc Delete(FriendDeleteRequest) returns (FriendDeleteResponse);
  rpc Apply(FriendApplyRequest) returns (FriendApplyResponse);
  rpc Approve(FriendApproveRequest) returns (FriendApproveResponse);
  rpc Cancel(FriendCancelRequest) returns (FriendCancelResponse);
  rpc CancelAll(Empty) returns (FriendCancelAllResponse);
  rpc Reject(FriendRejectRequest) returns (FriendRejectResponse);
  rpc ListApplying(Empty) returns (FriendListApplyingResponse);
  rpc ListApplied(Empty) returns (FriendListAppliedResponse);
  rpc Search(Empty) returns (FriendSearchResponse);
}
service Gacha {
  rpc List(Empty) returns (GachaListResponse);
  rpc Draw(GachaDrawRequest) returns (GachaDrawResponse);
  rpc Exchange(GachaExchangeRequest) returns (GachaExchangeResponse);
  rpc Probability(GachaProbabilityRequest) returns (GachaProbabilityResponse);
  rpc History(GachaHistoryRequest) returns (GachaHistoryResponse);
  rpc SelectCard(GachaSelectCardRequest) returns (GachaSelectCardResponse);
  rpc ReceiveFreePremiumGachaTicket(GachaReceiveFreePremiumGachaTicketRequest) returns (GachaReceiveFreePremiumGachaTicketResponse);
}
service Gift {
  rpc List(GiftListRequest) returns (GiftListResponse);
  rpc Receive(GiftReceiveRequest) returns (GiftReceiveResponse);
  rpc ListHistory(Empty) returns (GiftHistoryListResponse);
}
service Gpp {
  rpc ReceiveReward(GppReceiveRewardRequest) returns (GppReceiveRewardResponse);
}
service Guild {
  rpc List(Empty) returns (GuildListResponse);
  rpc Top(Empty) returns (GuildTopResponse);
  rpc Join(GuildJoinRequest) returns (GuildJoinResponse);
}
service Gvg {
  rpc Top(Empty) returns (GvgTopResponse);
  rpc ListOpponent(GvgListOpponentRequest) returns (GvgListOpponentResponse);
  rpc ListRanking(GvgListRankingRequest) returns (GvgListRankingResponse);
  rpc Start(GvgStartRequest) returns (GvgStartResponse);
  rpc ListAsset(GvgListAssetRequest) returns (GvgListAssetResponse);
}
service Hair {
  rpc CheckHair(HairCheckRequest) returns (HairCheckResponse);
}
service Health {
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}
service Hierarchy {
  rpc Top(Empty) returns (HierarchyTopResponse);
  rpc ListRanking(Empty) returns (HierarchyRankingResponse);
  rpc ReceiveRewards(HierarchyRewardsReceiveRequest) returns (HierarchyRewardsReceiveResponse);
  rpc ReceiveDivisionRewards(HierarchyDivisionRewardsReceiveRequest) returns (HierarchyDivisionRewardsReceiveResponse);
}
service Home {
  rpc Enter(HomeEnterRequest) returns (HomeEnterResponse);
  rpc Login(HomeLoginRequest) returns (HomeLoginResponse);
  rpc ReadTalk(HomeReadTalkRequest) returns (HomeReadTalkResponse);
  rpc SetReview(Empty) returns (HomeSetReviewResponse);
  rpc SetCharacterPosition(HomeSetCharacterPositionRequest) returns (HomeSetCharacterPositionResponse);
}
service Invite {
  rpc Top(Empty) returns (InviteTopResponse);
  rpc ReceiveHostRewards(InviteReceiveHostRewardsRequest) returns (InviteReceiveHostRewardsResponse);
  rpc EnterCode(InviteEnterCodeRequest) returns (InviteEnterCodeResponse);
}
service Item {
  rpc Sell(ItemSellRequest) returns (ItemSellResponse);
}
service Ladder {
  rpc Top(LadderTopRequest) returns (LadderTopResponse);
  rpc ReachPanel(LadderPanelReachRequest) returns (LadderPanelReachResponse);
}
service League {
  rpc Top(Empty) returns (LeagueTopResponse);
  rpc GetLiveResult(LeagueGetLiveResultRequest) returns (LeagueGetLiveResultResponse);
  rpc SaveDeck(LeagueSaveDeckRequest) returns (LeagueSaveDeckResponse);
  rpc GetLastSeasonResult(Empty) returns (LeagueGetLastSeasonResultResponse);
  rpc ListPointRanking(LeagueListPointRankingRequest) returns (LeagueListPointRankingResponse);
  rpc ListCardHighestScoreRanking(LeagueListCardHighestScoreRankingRequest) returns (LeagueListCardHighestScoreRankingResponse);
  rpc ListCardSkillRateRanking(LeagueListCardSkillRateRankingRequest) returns (LeagueListCardSkillRateRankingResponse);
  rpc ListCardMvpRanking(LeagueListCardMvpRankingRequest) returns (LeagueListCardMvpRankingResponse);
  rpc GetDailyDetail(LeagueGetDailyDetailRequest) returns (LeagueGetDailyDetailResponse);
}
service LoginBonus {
  rpc List(Empty) returns (LoginBonusListResponse);
  rpc Receive(LoginBonusReceiveRequest) returns (LoginBonusReceiveResponse);
}
service Love {
  rpc Title(Empty) returns (LoveTitleResponse);
  rpc TitleExtra(LoveTitleExtraRequest) returns (LoveTitleExtraResponse);
  rpc Register(LoveRegisterRequest) returns (LoveRegisterResponse);
  rpc Top(LoveTopRequest) returns (LoveTopResponse);
  rpc Start(LoveStartRequest) returns (LoveStartResponse);
  rpc Restart(LoveRestartRequest) returns (LoveRestartResponse);
  rpc Finish(LoveFinishRequest) returns (LoveFinishResponse);
  rpc ResetReadingStoryStatus(LoveResetReadingStoryStatusRequest) returns (LoveResetReadingStoryStatusResponse);
  rpc Present(LovePresentRequest) returns (LovePresentResponse);
  rpc Save(LoveSaveRequest) returns (LoveSaveResponse);
  rpc UpdateSaveName(LoveUpdateSaveNameRequest) returns (LoveUpdateSaveNameResponse);
  rpc Load(LoveLoadRequest) returns (LoveLoadResponse);
  rpc Reset(LoveResetRequest) returns (LoveResetResponse);
  rpc ReceiveLessonReward(LoveReceiveLessonRewardRequest) returns (LoveReceiveLessonRewardResponse);
  rpc PromoteLesson(LovePromoteLessonRequest) returns (LovePromoteLessonResponse);
  rpc UpdateName(LoveUpdateNameRequest) returns (LoveUpdateNameResponse);
  rpc GetMainCharacter(LoveGetMainCharacterRequest) returns (LoveGetMainCharacterResponse);
}
service Marathon {
  rpc Top(MarathonTopRequest) returns (MarathonTopResponse);
  rpc UnlockQuest(MarathonQuestUnlockRequest) returns (MarathonQuestUnlockResponse);
  rpc StartQuest(MarathonQuestStartRequest) returns (MarathonQuestStartResponse);
  rpc ListQuestAsset(MarathonQuestListAssetRequest) returns (MarathonQuestListAssetResponse);
  rpc UseQuestStaminaRecoveryItem(MarathonUseQuestStaminaRecoveryItemRequest) returns (MarathonUseQuestStaminaRecoveryItemResponse);
  rpc ListDeck(MarathonListDeckRequest) returns (MarathonListDeckResponse);
  rpc SaveDeck(MarathonDeckSaveRequest) returns (MarathonDeckSaveResponse);
  rpc BuddyDeck(MarathonBuddyDeckRequest) returns (MarathonBuddyDeckResponse);
  rpc DrawBoxGacha(MarathonBoxGachaDrawRequest) returns (MarathonBoxGachaDrawResponse);
  rpc ResetBoxGacha(MarathonBoxGachaResetRequest) returns (MarathonBoxGachaResetResponse);
  rpc ListRaid(MarathonRaidListRequest) returns (MarathonRaidListResponse);
  rpc CheckRaidProgress(MarathonRaidCheckProgressRequest) returns (MarathonRaidCheckProgressResponse);
  rpc ListRaidHistory(MarathonRaidListHistoryRequest) returns (MarathonRaidListHistoryResponse);
  rpc GetRaidHistoryDetail(MarathonRaidGetHistoryDetailRequest) returns (MarathonRaidGetHistoryDetailResponse);
  rpc ListRaidRanking(MarathonRaidListRankingRequest) returns (MarathonRaidListRankingResponse);
  rpc StartRaid(MarathonRaidStartRequest) returns (MarathonRaidStartResponse);
  rpc JoinRaid(MarathonRaidJoinRequest) returns (MarathonRaidJoinResponse);
  rpc FinishRaid(MarathonRaidFinishRequest) returns (MarathonRaidFinishResponse);
  rpc UseRaidStaminaRecoveryItem(MarathonUseRaidStaminaRecoveryItemRequest) returns (MarathonUseRaidStaminaRecoveryItemResponse);
  rpc ListRaidDeck(MarathonListRaidDeckRequest) returns (MarathonListRaidDeckResponse);
  rpc SaveRaidDeck(MarathonRaidDeckSaveRequest) returns (MarathonRaidDeckSaveResponse);
}
service Market {
  rpc ListItem(Empty) returns (MarketListItemResponse);
  rpc Reset(MarketResetRequest) returns (MarketResetResponse);
  rpc Purchase(MarketPurchaseRequest) returns (MarketPurchaseResponse);
}
service Master {
  rpc Get(Empty) returns (MasterGetResponse);
  rpc Rule(MasterRuleRequest) returns (MasterRuleResponse);
  rpc GetInquiryTemplate(MasterGetInquiryTemplateRequest) returns (MasterGetInquiryTemplateResponse);
  rpc GetHelpCategory(MasterGetHelpCategoryRequest) returns (MasterGetHelpCategoryResponse);
}
service Message {
  rpc ListGroup(Empty) returns (MessageListGroupResponse);
  rpc Timeline(MessageTimelineRequest) returns (MessageTimelineResponse);
  rpc Receive(MessageReceiveRequest) returns (MessageReceiveResponse);
  rpc Save(MessageSaveRequest) returns (MessageSaveResponse);
  rpc Finish(MessageFinishRequest) returns (MessageFinishResponse);
  rpc SaveHistory(MessageSaveHistoryRequest) returns (MessageSaveHistoryResponse);
}
service Migration {
  rpc List(Empty) returns (MigrationListResponse);
  rpc Execute(MigrationExecuteRequest) returns (MigrationExecuteResponse);
  rpc SetPassword(MigrationSetPasswordRequest) returns (MigrationSetPasswordResponse);
  rpc MigratePassword(MigrationMigratePasswordRequest) returns (MigrationMigrateResponse);
  rpc LinkApple(MigrationLinkAppleRequest) returns (MigrationLinkResponse);
  rpc MigrateApple(MigrationMigrateAppleRequest) returns (MigrationMigrateResponse);
  rpc LinkGoogle(MigrationLinkGoogleRequest) returns (MigrationLinkResponse);
  rpc MigrateGoogle(MigrationMigrateGoogleRequest) returns (MigrationMigrateResponse);
  rpc RequestTwitterOAuthToken(RequestTwitterOAuthTokenRequest) returns (RequestTwitterOAuthTokenResponse);
  rpc LinkTwitter(MigrationLinkTwitterRequest) returns (MigrationLinkResponse);
  rpc MigrateTwitter(MigrationMigrateTwitterRequest) returns (MigrationMigrateResponse);
  rpc Unlink(MigrationUnlinkRequest) returns (MigrationUnlinkResponse);
}
service Mission {
  rpc List(Empty) returns (MissionListResponse);
  rpc Receive(MissionReceiveRequest) returns (MissionReceiveResponse);
  rpc URLTransition(MissionURLTransitionRequest) returns (MissionURLTransitionResponse);
  rpc Event(MissionEventRequest) returns (MissionEventResponse);
}
service Mosaic {
  rpc Top(MosaicTopRequest) returns (MosaicTopResponse);
  rpc Exchange(MosaicExchangeRequest) returns (MosaicExchangeResponse);
  rpc ReceiveTotalConsumptionReward(MosaicReceiveTotalConsumptionRewardRequest) returns (MosaicReceiveTotalConsumptionRewardResponse);
}
service Notice {
  rpc List(Empty) returns (NoticeListResponse);
  rpc FetchList(NoticeFetchRequest) returns (NoticeFetchResponse);
  rpc Get(NoticeGetRequest) returns (NoticeGetResponse);
}
service PhotoContest {
  rpc Top(PhotoContestTopRequest) returns (PhotoContestTopResponse);
  rpc ListPhoto(PhotoContestListPhotoRequest) returns (PhotoContestListPhotoResponse);
  rpc Ranking(PhotoContestRankingRequest) returns (PhotoContestRankingResponse);
  rpc ReceiveSectionRewards(PhotoContestReceiveSectionRewardsRequest) returns (PhotoContestReceiveSectionRewardsResponse);
  rpc CheckShooting(PhotoContestCheckShootingRequest) returns (PhotoContestCheckShootingResponse);
  rpc SubmitShooting(PhotoContestSubmitShootingRequest) returns (PhotoContestSubmitShootingResponse);
  rpc CreateShooting(PhotoContestCreateShootingRequest) returns (PhotoContestCreateShootingResponse);
}
service Photo {
  rpc SwitchLock(PhotoSwitchLockRequest) returns (PhotoSwitchLockResponse);
  rpc Delete(PhotoDeleteRequest) returns (PhotoDeleteResponse);
  rpc Enhance(PhotoEnhanceRequest) returns (PhotoEnhanceResponse);
  rpc Reroll(PhotoRerollRequest) returns (PhotoRerollResponse);
  rpc Retouch(PhotoRetouchRequest) returns (PhotoRetouchResponse);
  rpc Update(PhotoUpdateRequest) returns (PhotoUpdateResponse);
  rpc Report(Empty) returns (PhotoReportResponse);
  rpc GetImageURL(PhotoGetImageUrlRequest) returns (PhotoGetImageUrlResponse);
  rpc CheckShooting(PhotoCheckShootingRequest) returns (PhotoCheckShootingResponse);
  rpc CreateShootings(PhotoCreateShootingsRequest) returns (PhotoCreateShootingsResponse);
  rpc ListShooting(Empty) returns (PhotoListShootingResponse);
  rpc ExtendLimit(Empty) returns (PhotoExtendLimitResponse);
  rpc SaleRecipe(PhotoSaleRecipeRequest) returns (PhotoSaleRecipeResponse);
  rpc ListSpecialShooting(PhotoListSpecialShootingRequest) returns (PhotoListSpecialShootingResponse);
  rpc CheckSpecialShooting(PhotoCheckSpecialShootingRequest) returns (PhotoCheckSpecialShootingResponse);
  rpc CreateSpecialShootings(PhotoCreateSpecialShootingsRequest) returns (PhotoCreateSpecialShootingsResponse);
  rpc GetDreamBasePhotoEnhanceLevelInfos(GetDreamBasePhotoEnhanceLevelInfosRequest) returns (GetDreamBasePhotoEnhanceLevelInfosResponse);
  rpc ActivateStoryEpisodeShooting(PhotoActivateStoryEpisodeShootingRequest) returns (PhotoActivateStoryEpisodeShootingResponse);
  rpc CheckStoryEpisodeShooting(PhotoCheckStoryEpisodeShootingRequest) returns (PhotoCheckStoryEpisodeShootingResponse);
  rpc CheckCardStoryShooting(PhotoCheckCardStoryShootingRequest) returns (PhotoCheckCardStoryShootingResponse);
  rpc CreateStoryEpisodeShootings(PhotoCreateStoryEpisodeShootingsRequest) returns (PhotoCreateStoryEpisodeShootingsResponse);
  rpc CreateCardStoryShootings(PhotoCreateCardStoryShootingsRequest) returns (PhotoCreateCardStoryShootingsResponse);
  rpc CheckExpressionShooting(PhotoCheckExpressionShootingRequest) returns (PhotoCheckExpressionShootingResponse);
  rpc CreateExpressionShootings(PhotoCreateExpressionShootingsRequest) returns (PhotoCreateExpressionShootingsResponse);
}
service Profile {
  rpc Top(Empty) returns (ProfileTopResponse);
  rpc FindUser(ProfileFindUserRequest) returns (ProfileFindUserResponse);
  rpc UpdateName(ProfileUpdateNameRequest) returns (ProfileUpdateNameResponse);
  rpc UpdateMessage(ProfileUpdateMessageRequest) returns (ProfileUpdateMessageResponse);
  rpc UpdateBackground(ProfileUpdateBackgroundRequest) returns (ProfileUpdateBackgroundResponse);
  rpc UpdateFavoriteCharacters(ProfileUpdateFavoriteCharactersRequest) returns (ProfileUpdateFavoriteCharactersResponse);
  rpc UpdateDecoration(ProfileUpdateDecorationRequest) returns (ProfileUpdateDecorationResponse);
  rpc UpdateEmblem(ProfileUpdateEmblemRequest) returns (ProfileUpdateEmblemResponse);
  rpc UpdateLayout(ProfileUpdateLayoutRequest) returns (ProfileUpdateLayoutResponse);
  rpc ClearTwitterMission(Empty) returns (ProfileClearTwitterMissionResponse);
  rpc UpdateBuddyCard(ProfileUpdateBuddyCardRequest) returns (ProfileUpdateBuddyCardResponse);
  rpc UpdateBirthday(ProfileUpdateBirthdayRequest) returns (ProfileUpdateBirthdayResponse);
}
service Pvp {
  rpc Top(Empty) returns (PvpTopResponse);
  rpc ListOpponent(PvpListOpponentRequest) returns (PvpListOpponentResponse);
  rpc ListRanking(PvpListRankingRequest) returns (PvpListRankingResponse);
  rpc Start(PvpStartRequest) returns (PvpStartResponse);
  rpc ListAsset(PvpListAssetRequest) returns (PvpListAssetResponse);
}
service Quest {
  rpc Top(Empty) returns (QuestTopResponse);
  rpc ListMain(Empty) returns (QuestListMainResponse);
  rpc ListDaily(Empty) returns (QuestListDailyResponse);
  rpc ListContest(Empty) returns (QuestListContestResponse);
  rpc ListTower(Empty) returns (QuestListTowerResponse);
  rpc Start(QuestStartRequest) returns (QuestStartResponse);
  rpc StartBulkDaily(Empty) returns (QuestStartBulkDailyResponse);
  rpc ListTowerRanking(QuestListTowerRankingRequest) returns (QuestListTowerRankingResponse);
  rpc ListContestRanking(QuestListContestRankingRequest) returns (QuestListContestRankingResponse);
  rpc ListLatestClear(QuestListLatestClearRequest) returns (QuestListLatestClearResponse);
  rpc ListAsset(QuestListAssetRequest) returns (QuestListAssetResponse);
  rpc GetLatestClearLiveResult(QuestGetLatestClearLiveResultRequest) returns (QuestGetLatestClearLiveResultResponse);
  rpc GetRankingLiveResult(QuestGetRankingLiveResultRequest) returns (QuestGetRankingLiveResultResponse);
  rpc TowerTop(Empty) returns (QuestTowerTopResponse);
  rpc OutputLiveResultDetailLog(OutputLiveResultDetailLogRequest) returns (OutputLiveResultDetailLogResponse);
}
service Race {
  rpc Top(RaceTopRequest) returns (RaceTopResponse);
  rpc MovePanel(RaceMovePanelRequest) returns (RaceMovePanelResponse);
  rpc ReceiveActivityLesson(RaceReceiveActivityLessonRequest) returns (RaceReceiveActivityLessonResponse);
  rpc EnhanceLiveBonus(RaceEnhanceLiveBonusRequest) returns (RaceEnhanceLiveBonusResponse);
  rpc ResetLiveBonus(RaceResetLiveBonusRequest) returns (RaceResetLiveBonusResponse);
  rpc StartLivePanelQuest(RaceStartLivePanelQuestRequest) returns (RaceStartLivePanelQuestResponse);
  rpc StartLiveAreaQuest(RaceStartLiveAreaQuestRequest) returns (RaceStartLiveAreaQuestResponse);
  rpc ListQuestAsset(RaceQuestListAssetRequest) returns (RaceQuestListAssetResponse);
  rpc ListDeck(RaceListDeckRequest) returns (RaceListDeckResponse);
  rpc SaveDeck(RaceSaveDeckRequest) returns (RaceSaveDeckResponse);
  rpc ResetCardCoolTime(RaceResetCardCoolTimeRequest) returns (RaceResetCardCoolTimeResponse);
  rpc Ranking(RaceRankingRequest) returns (RaceRankingResponse);
}
service Roulette {
  rpc Top(Empty) returns (RouletteTopResponse);
  rpc Check(RouletteCheckRequest) returns (RouletteCheckResponse);
  rpc Draw(RouletteDrawRequest) returns (RouletteDrawResponse);
}
service Salary {
  rpc GetPayslip(SalaryGetPayslipRequest) returns (SalaryGetPayslipResponse);
  rpc Pay(SalaryPayRequest) returns (SalaryPayResponse);
}
service Satellite {
  rpc InitCode(SatelliteInitCodeRequest) returns (SatelliteInitCodeResponse);
}
service Shelf {
  rpc Top(Empty) returns (ShelfTopResponse);
  rpc AlbumTop(ShelfAlbumTopRequest) returns (ShelfAlbumTopResponse);
  rpc CheckShooting(ShelfCheckShootingRequest) returns (ShelfCheckShootingResponse);
  rpc SavePhoto(ShelfSavePhotoRequest) returns (ShelfSavePhotoResponse);
  rpc SetPhoto(ShelfSetPhotoRequest) returns (ShelfSetPhotoResponse);
  rpc CreatePhoto(ShelfCreatePhotoRequest) returns (ShelfCreatePhotoResponse);
  rpc CreateAlbumPhoto(ShelfCreateAlbumPhotoRequest) returns (ShelfCreateAlbumPhotoResponse);
  rpc DeletePhoto(ShelfDeletePhotoRequest) returns (ShelfDeletePhotoResponse);
  rpc SwitchTemplate(ShelfSwitchTemplateRequest) returns (ShelfSwitchTemplateResponse);
  rpc UnsetPhoto(ShelfUnsetPhotoRequest) returns (ShelfUnsetPhotoResponse);
}
service Shop {
  rpc List(Empty) returns (ShopListResponse);
  rpc ListItem(ShopListItemRequest) returns (ShopListItemResponse);
  rpc GetLoginBonusPackageItem(ShopGetLoginBonusPackageItemRequest) returns (ShopGetLoginBonusPackageItemResponse);
  rpc GetConditionRewardPackageItem(ShopGetConditionRewardPackageItemRequest) returns (ShopGetConditionRewardPackageItemResponse);
  rpc Purchase(ShopPurchaseRequest) returns (ShopPurchaseResponse);
  rpc RegisterPurchaseTransaction(ShopRegisterPurchaseTransactionRequest) returns (ShopRegisterPurchaseTransactionResponse);
  rpc CancelPurchaseTransaction(ShopCancelPurchaseTransactionRequest) returns (ShopCancelPurchaseTransactionResponse);
  rpc PurchaseStone(ShopPurchaseStoneRequest) returns (ShopPurchaseStoneResponse);
  rpc RecoverPurchaseStone(ShopRecoverPurchaseStoneRequest) returns (ShopRecoverPurchaseStoneResponse);
  rpc CheckPurchaseStone(ShopCheckPurchaseStoneRequest) returns (ShopCheckPurchaseStoneResponse);
  rpc RegisterBirthday(ShopRegisterBirthdayRequest) returns (ShopRegisterBirthdayResponse);
  rpc ReceiveConditionReward(ShopReceiveConditionRewardRequest) returns (ShopReceiveConditionRewardResponse);
  rpc TryOn(ShopTryOnRequest) returns (ShopTryOnResponse);
}
service Showcase {
  rpc Top(Empty) returns (ShowcaseTopResponse);
  rpc Save(ShowcaseSaveRequest) returns (ShowcaseSaveResponse);
  rpc SaveDetail(ShowcaseSaveDetailRequest) returns (ShowcaseSaveDetailResponse);
  rpc SaveMyset(ShowcaseSaveMysetRequest) returns (ShowcaseSaveMysetResponse);
  rpc DeleteMyset(ShowcaseDeleteMysetRequest) returns (ShowcaseDeleteMysetResponse);
  rpc ApplyMyset(ShowcaseApplyMysetRequest) returns (ShowcaseApplyMysetResponse);
  rpc RenameMyset(ShowcaseRenameMysetRequest) returns (ShowcaseRenameMysetResponse);
  rpc CheckThumbnailShooting(ShowcaseCheckThumbnailShootingRequest) returns (ShowcaseCheckThumbnailShootingResponse);
  rpc Like(ShowcaseLikeRequest) returns (ShowcaseLikeResponse);
  rpc Get(ShowcaseGetRequest) returns (ShowcaseGetResponse);
  rpc GalleryTop(Empty) returns (ShowcaseGalleryTopResponse);
  rpc SearchFriendRecommendList(Empty) returns (ShowcaseSearchFriendRecommendListResponse);
  rpc SearchHashtagList(ShowcaseSearchHashtagListRequest) returns (ShowcaseSearchHashtagListResponse);
  rpc Display(ShowcaseDisplayRequest) returns (ShowcaseDisplayResponse);
  rpc CheckShooting(ShowcaseCheckShootingRequest) returns (ShowcaseCheckShootingResponse);
  rpc CreatePhoto(ShowcaseCreatePhotoRequest) returns (ShowcaseCreatePhotoResponse);
}
service Staff {
  rpc Train(StaffTrainRequest) returns (StaffTrainResponse);
  rpc LevelLimitBreak(StaffLevelLimitBreakRequest) returns (StaffLevelLimitBreakResponse);
}
service Story {
  rpc Read(StoryReadRequest) returns (StoryReadResponse);
  rpc ReleaseEpisode(StoryReleaseEpisodeRequest) returns (StoryReleaseEpisodeResponse);
  rpc ListEvent(Empty) returns (StoryListEventResponse);
  rpc ReadEvent(StoryReadEventRequest) returns (StoryReadEventResponse);
  rpc ListExtra(Empty) returns (StoryListExtraResponse);
  rpc ReadExtra(StoryReadExtraRequest) returns (StoryReadExtraResponse);
  rpc ReadAnniversaryStory(StoryReadAnniversaryStoryRequest) returns (StoryReadAnniversaryStoryResponse);
  rpc ReadCharacterCompanyEnjoyStory(StoryReadCharacterCompanyEnjoyStoryRequest) returns (StoryReadCharacterCompanyEnjoyStoryResponse);
}
service System {
  rpc Check(SystemCheckRequest) returns (SystemCheckResponse);
  rpc GetMetadata(Empty) returns (Empty);
  rpc CheckApp(Empty) returns (Empty);
}
service Telephone {
  rpc Receive(TelephoneReceiveRequest) returns (TelephoneReceiveResponse);
  rpc Finishes(TelephoneFinishesRequest) returns (TelephoneFinishesResponse);
  rpc CallHistory(TelephoneCallHistoryRequest) returns (TelephoneCallHistoryResponse);
}
service Tour {
  rpc Top(TourTopRequest) returns (TourTopResponse);
  rpc Ranking(TourRankingRequest) returns (TourRankingResponse);
  rpc AreaTop(TourAreaTopRequest) returns (TourAreaTopResponse);
  rpc AreaActivity(TourAreaActivityRequest) returns (TourAreaActivityResponse);
  rpc AreaRefresh(TourAreaRefreshRequest) returns (TourAreaRefreshResponse);
  rpc AreaScout(TourAreaScoutRequest) returns (TourAreaScoutResponse);
  rpc AreaLive(TourAreaLiveRequest) returns (TourAreaLiveResponse);
  rpc AreaLiveBonus(TourAreaLiveBonusRequest) returns (TourAreaLiveBonusResponse);
  rpc AreaPvp(TourAreaPvpRequest) returns (TourAreaPvpResponse);
  rpc AreaClear(TourAreaClearRequest) returns (TourAreaClearResponse);
  rpc AreaNext(TourAreaNextRequest) returns (TourAreaNextResponse);
  rpc AreaRetire(TourAreaRetireRequest) returns (TourAreaRetireResponse);
  rpc DeckSave(TourDeckSaveRequest) returns (TourDeckSaveResponse);
}
service Tutorial {
  rpc Init(TutorialInitRequest) returns (TutorialInitResponse);
  rpc Progress(TutorialProgressRequest) returns (TutorialProgressResponse);
  rpc StartQuest(TutorialStartQuestRequest) returns (TutorialStartQuestResponse);
  rpc StartFanEvent(Empty) returns (TutorialActivityStartFanEventResponse);
  rpc ReceivePromotionReward(Empty) returns (TutorialActivityReceivePromotionRewardResponse);
  rpc ReceiveLessonReward(Empty) returns (TutorialActivityReceiveLessonRewardResponse);
  rpc CreateShooting(TutorialPhotoCreateShootingRequest) returns (TutorialPhotoCreateShootingResponse);
  rpc Skip(Empty) returns (TutorialSkipResponse);
}
service User {
  rpc Get(Empty) returns (UserGetResponse);
  rpc ProvideExternalReward(UserProvideExternalRewardRequest) returns (UserProvideExternalRewardResponse);
}
