import asyncio
from motor.motor_asyncio import AsyncIOMotorClient
import rich_console as console

client = None
db = None
version: str


async def push_many_db(db_json_array: list[str]):
    collection = db["masterdb"]
    console.info(f"(Mongo) Inserting new dbs...")
    result = await collection.insert_many(db_json_array)
    console.info(f"(Mongo) Insert completed. Count: {result.inserted_ids.__len__()}.")


async def update_version(old_version: str, new_version: str):
    collection = db["version"]
    console.info(f"(Mongo) Updating version '{old_version}' to '{new_version}'.")
    doc = await collection.find_one({})
    if doc is None or len(doc) == 0:
        console.info(
            f"(Mongo) Collection named 'version' does not exists, change updating behaviour to inserting."
        )
        result = await collection.insert_one({"version": new_version})
        console.info(f"(Mongo) Inserted id {result.inserted_id}")
    else:
        result = await collection.update_one(
            {"version": old_version}, {"$set": {"version": new_version}}
        )
        console.info(f"(Mongo) Updated count {result.modified_count}.")


async def delete_all_old_docs(delete_version: str, new_version: str):
    collection = db["masterdb"]
    if new_version == delete_version:
        console.warning(
            f"(Mongo) Requested deleting version is the same as the new incoming version."
        )
        # This aggregation pipelines was generated by Copilot
        cursor = collection.aggregate(
            [
                {"$sort": {"time": -1}},
                {
                    "$group": {
                        "_id": "$name",
                        "data": {"$push": {"id": "$_id", "time": "$time"}},
                        "count": {"$sum": 1},
                        "latest_time": {"$first": "$time"},
                    }
                },
                {"$match": {"count": {"$gte": 2}}},
                {"$unwind": "$data"},
                {
                    "$project": {
                        "id": "$data.id",
                        "time": "$data.time",
                        "latest_time": "$latest_time",
                    }
                },
                {"$match": {"$expr": {"$ne": ["$latest_time", "$time"]}}},
            ]
        )

        docs = await cursor.to_list(None)
        delete_ids = [doc["id"] for doc in docs]
        result = await collection.delete_many({"_id": {"$in": delete_ids}})
        console.info(
            f"(Mongo) Deleted duplicated version '{delete_version}' docs, count: {result.deleted_count}."
        )

    else:
        result = await collection.delete_many(
            {"version": delete_version},
        )
        console.info(
            f"(Mongo) Deleted version '{delete_version}' docs, count: {result.deleted_count}."
        )


async def replace_or_insert_one(sem: asyncio.Semaphore, name: str, db_json_str: str):
    collection = db["masterdb"]
    async with sem:
        doc = await collection.find_one({"name": name})
        if doc is None or len(doc) == 0:
            result = await collection.insert_one(db_json_str)
            console.info(
                f"(Mongo) Inserted document '{name}', id '{result.inserted_id}'."
            )
        else:
            result = await collection.replace_one({"name": name}, db_json_str)
            console.info(
                f"(Mongo) Replaced document '{name}', count '{result.modified_count}'."
            )


async def _init_current_version():
    global version
    collection = db["version"]
    cursor = collection.find().sort("time", -1).limit(1)
    document = await cursor.to_list(1)
    if len(document) > 0:
        ver_str: str = document[0]["version"]
        version = ver_str
    else:
        version = ""


async def init(uri: str):
    global client, db
    client = AsyncIOMotorClient(uri)
    db = client["HoshimiStage"]
    await _init_current_version()
    console.info(f"(Mongo) Initialization completed, current version '{version}'.")
